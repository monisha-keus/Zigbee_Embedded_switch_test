///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              03/Jan/2020  16:00:42
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
//    Command line       =  
//        -f C:\Users\Monisha\AppData\Local\Temp\EWA059.tmp
//        (D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        HAL_KEY=FALSE -D HAL_LCD=FALSE -D HAL_LED=FALSE -D HAL_UART=TRUE -D
//        HAL_UART_ISR=1 -D HAL_UART_ISR_RX_MAX=64 -D HAL_UART_ISR_TX_MAX=64 -D
//        HAL_UART_DMA=2 -D HAL_UART_DMA_RX_MAX=64 -D HAL_UART_DMA_TX_MAX=64 -D
//        NWK_MAX_DEVICE_LIST=5 -D NWK_LINK_STATUS_PERIOD=50 -D
//        INT_HEAP_LEN=3172 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D
//        MULTICAST_ENABLED=FALSE -D APS_MAX_GROUPS=4 -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_READ -D DISABLE_GREENPOWER_BASIC_PROXY -D
//        KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -lC
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List
//        -lA
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\Source\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\Source\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\keus\embeddedswitch\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\keus\common\
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List\keus_task.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME keus_task

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?S_SHL
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??KEUS_init_fnc::?relay`
        FUNCTION `??KEUS_init_fnc::?relay`,0203H
        PUBLIC `??KEUS_loop::?relay`
        FUNCTION `??KEUS_loop::?relay`,0203H
        PUBWEAK `??halKeusPort1Isr::??INTVEC 123`
        PUBLIC `??ledTimerCbk::?relay`
        FUNCTION `??ledTimerCbk::?relay`,0203H
        PUBLIC `??leddebounceCbk::?relay`
        FUNCTION `??leddebounceCbk::?relay`,0203H
        PUBLIC KEUS_init_fnc
        FUNCTION KEUS_init_fnc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC KEUS_loop
        FUNCTION KEUS_loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P1IFG
        PUBWEAK _A_IEN0
        PUBWEAK _A_IRCON2
        PUBLIC buttonPin1
        PUBLIC buttonPin2
        PUBLIC buttonPin3
        PUBLIC buttonPin4
        PUBLIC button_Pressed
        PUBLIC button_state
        PUBLIC count
        PUBLIC count1
        PUBLIC count2
        PUBLIC debounce
        PUBLIC debounceTimer
        PUBLIC halKeusPort1Isr
        FUNCTION halKeusPort1Isr,0a1233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC init_status
        PUBLIC intervalTimer
        PUBLIC ledPin1
        PUBLIC ledPin2
        PUBLIC ledPin3
        PUBLIC ledPin4
        PUBLIC ledTimerCbk
        FUNCTION ledTimerCbk,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC leddebounceCbk
        FUNCTION leddebounceCbk,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC read_status
        PUBLIC write_status
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalUARTPoll         SYMBOL "HalUARTPoll"
`??HalUARTPoll::?relay` SYMBOL "?relay", HalUARTPoll
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
KeusGPIOEdgeConfiguration SYMBOL "KeusGPIOEdgeConfiguration"
`??KeusGPIOEdgeConfiguration::?relay` SYMBOL "?relay", KeusGPIOEdgeConfiguration
KeusGPIOInterruptEnable SYMBOL "KeusGPIOInterruptEnable"
`??KeusGPIOInterruptEnable::?relay` SYMBOL "?relay", KeusGPIOInterruptEnable
KeusGPIOReadPinValue SYMBOL "KeusGPIOReadPinValue"
`??KeusGPIOReadPinValue::?relay` SYMBOL "?relay", KeusGPIOReadPinValue
KeusGPIOSetDirection SYMBOL "KeusGPIOSetDirection"
`??KeusGPIOSetDirection::?relay` SYMBOL "?relay", KeusGPIOSetDirection
KeusGPIOSetPinValue SYMBOL "KeusGPIOSetPinValue"
`??KeusGPIOSetPinValue::?relay` SYMBOL "?relay", KeusGPIOSetPinValue
KeusGPIOToggledState SYMBOL "KeusGPIOToggledState"
`??KeusGPIOToggledState::?relay` SYMBOL "?relay", KeusGPIOToggledState
KeusTimerUtilAddTimer SYMBOL "KeusTimerUtilAddTimer"
`??KeusTimerUtilAddTimer::?relay` SYMBOL "?relay", KeusTimerUtilAddTimer
KeusTimerUtilInit   SYMBOL "KeusTimerUtilInit"
`??KeusTimerUtilInit::?relay` SYMBOL "?relay", KeusTimerUtilInit
KeusTimerUtilStartTimer SYMBOL "KeusTimerUtilStartTimer"
`??KeusTimerUtilStartTimer::?relay` SYMBOL "?relay", KeusTimerUtilStartTimer
initUart0           SYMBOL "initUart0"
`??initUart0::?relay` SYMBOL "?relay", initUart0
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen
KEUS_init_fnc       SYMBOL "KEUS_init_fnc"
`??KEUS_init_fnc::?relay` SYMBOL "?relay", KEUS_init_fnc
KEUS_loop           SYMBOL "KEUS_loop"
`??KEUS_loop::?relay` SYMBOL "?relay", KEUS_loop
halKeusPort1Isr     SYMBOL "halKeusPort1Isr"
`??halKeusPort1Isr::??INTVEC 123` SYMBOL "??INTVEC 123", halKeusPort1Isr
ledTimerCbk         SYMBOL "ledTimerCbk"
`??ledTimerCbk::?relay` SYMBOL "?relay", ledTimerCbk
leddebounceCbk      SYMBOL "leddebounceCbk"
`??leddebounceCbk::?relay` SYMBOL "?relay", leddebounceCbk

        EXTERN `??HalUARTPoll::?relay`
        FUNCTION `??HalUARTPoll::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??KeusGPIOEdgeConfiguration::?relay`
        FUNCTION `??KeusGPIOEdgeConfiguration::?relay`,00H
        EXTERN `??KeusGPIOInterruptEnable::?relay`
        FUNCTION `??KeusGPIOInterruptEnable::?relay`,00H
        EXTERN `??KeusGPIOReadPinValue::?relay`
        FUNCTION `??KeusGPIOReadPinValue::?relay`,00H
        EXTERN `??KeusGPIOSetDirection::?relay`
        FUNCTION `??KeusGPIOSetDirection::?relay`,00H
        EXTERN `??KeusGPIOSetPinValue::?relay`
        FUNCTION `??KeusGPIOSetPinValue::?relay`,00H
        EXTERN `??KeusGPIOToggledState::?relay`
        FUNCTION `??KeusGPIOToggledState::?relay`,00H
        EXTERN `??KeusTimerUtilAddTimer::?relay`
        FUNCTION `??KeusTimerUtilAddTimer::?relay`,00H
        EXTERN `??KeusTimerUtilInit::?relay`
        FUNCTION `??KeusTimerUtilInit::?relay`,00H
        EXTERN `??KeusTimerUtilStartTimer::?relay`
        FUNCTION `??KeusTimerUtilStartTimer::?relay`,00H
        EXTERN `??initUart0::?relay`
        FUNCTION `??initUart0::?relay`,00H
        EXTERN `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,00H
        EXTERN HalUARTPoll
        FUNCTION HalUARTPoll,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOEdgeConfiguration
        FUNCTION KeusGPIOEdgeConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOInterruptEnable
        FUNCTION KeusGPIOInterruptEnable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOReadPinValue
        FUNCTION KeusGPIOReadPinValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOSetDirection
        FUNCTION KeusGPIOSetDirection,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOSetPinValue
        FUNCTION KeusGPIOSetPinValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOToggledState
        FUNCTION KeusGPIOToggledState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusTimerUtilAddTimer
        FUNCTION KeusTimerUtilAddTimer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusTimerUtilInit
        FUNCTION KeusTimerUtilInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusTimerUtilStartTimer
        FUNCTION KeusTimerUtilStartTimer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN config_state_buffer
        EXTERN event_t
        EXTERN initUart0
        FUNCTION initUart0,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
//    1 
//    2 /********************************************************
//    3  * @fn  This function is to declare all GPIOs
//    4  * *****************************************************/
//    5 
//    6 #include "keus_task.h"

        ASEGN SFR_AN:DATA:NOROOT,08aH
// unsigned char volatile __sfr P1IFG
P1IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1
//    7 
//    8 #define UART0     HAL_UART_PORT_0
//    9 //#define UART1     HAL_UART_PORT_1
//   10 
//   11 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   12 bool init_status = 0;
init_status:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   13 bool read_status = 0;
read_status:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   14 bool write_status = 0;
write_status:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   15 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   16 bool debounce = false;
debounce:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   17 //bool toggle = false, toggle1 = false, toggle3 = false;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   18 uint8 count = 0, count1 = 0, count2 = 0;//led_state;
count:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
count1:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
count2:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   19 uint8 button_Pressed =0,button_state = 0;
button_Pressed:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
button_state:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   20 
//   21 void ledTimerCbk(uint8 timerId);
//   22 void leddebounceCbk(uint8 timerId);
//   23 
//   24 //Debounce configuration

        RSEG XDATA_I:XDATA:NOROOT(0)
//   25 KeusTimerConfig debounceTimer = {
debounceTimer:
        DATA8
        DS 8
        REQUIRE `?<Initializer for debounceTimer>`
        REQUIRE __INIT_XDATA_I
//   26     &leddebounceCbk,
//   27     200,
//   28     true,
//   29     -1,
//   30     0};
//   31 
//   32 //Timer Configuration

        RSEG XDATA_I:XDATA:NOROOT(0)
//   33 KeusTimerConfig intervalTimer = {
intervalTimer:
        DATA8
        DS 8
        REQUIRE `?<Initializer for intervalTimer>`
        REQUIRE __INIT_XDATA_I
//   34     &ledTimerCbk,
//   35     100,
//   36     true,
//   37     -1,
//   38     0};
//   39 /****************************************************************************
//   40  * **************************FUNCTION DECLARATION****************************
//   41  * ***************************************************************************/
//   42 void KEUS_init_fnc(void);
//   43 
//   44 //void update_led_array(uint8 led_no,uint8 led_state);
//   45 void KEUS_loop(void);
//   46 void update_config_to_memory(void);
//   47 void uart_send_button_ack(void);
//   48 
//   49 /*******************************************************
//   50  * @brief  Callback function for timer
//   51            Called every after 100ms
//   52 
//   53 *********************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   54 void ledTimerCbk(uint8 timerId)
ledTimerCbk:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ledTimerCbk
        CODE
//   55 {
        FUNCALL ledTimerCbk, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   56   // if (switch_state_buffer)
//   57   // { //To control Blinking led rate
//   58     HalUARTWrite(HAL_UART_PORT_0,&button_Pressed,1);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,#button_Pressed & 0xff
        MOV       R3,#(button_Pressed >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//   59 
//   60     // count1++;
//   61     // if(count1 == 5){
//   62     //   count1 = 0;    }
//   63   // }
//   64 
//   65   if (config_state_buffer)
        MOV       DPTR,#config_state_buffer
        MOVX      A,@DPTR
        JZ        ??ledTimerCbk_0
//   66   { 
//   67     count2++;
        MOV       DPTR,#count2
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//   68     if(count2 == 5){
        XRL       A,#0x5
        JNZ       ??ledTimerCbk_0
//   69       count2 = 0;
        CLR       A
        MOVX      @DPTR,A
//   70     }
//   71   }
//   72 }
??ledTimerCbk_0:
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock1
//   73 
//   74 /**************************************************************
//   75  * @fn      leddebounceCbk
//   76  * @brief   callback function for Debounce,called every after 200ms
//   77  * @param   none
//   78  * @return  None
//   79  * ***********************************************************/
//   80 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   81 void leddebounceCbk(uint8 timerId)
leddebounceCbk:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function leddebounceCbk
        CODE
//   82 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   83   debounce = true;
        MOV       DPTR,#debounce
        MOV       A,#0x1
        MOVX      @DPTR,A
//   84 }
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock2
//   85 
//   86 //********LED and button initilization

        RSEG XDATA_I:XDATA:NOROOT(0)
//   87 extern KeusGPIOPin ledPin1 = {0, 0, GPIO_OUTPUT, false, GPIO_LOW};
ledPin1:
        DATA8
        DS 5
        REQUIRE `?<Initializer for ledPin1>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   88 extern KeusGPIOPin ledPin2 = {0, 1, GPIO_OUTPUT, false, GPIO_LOW};
ledPin2:
        DATA8
        DS 5
        REQUIRE `?<Initializer for ledPin2>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   89 extern KeusGPIOPin ledPin3 = {0, 4, GPIO_OUTPUT, false, GPIO_LOW};
ledPin3:
        DATA8
        DS 5
        REQUIRE `?<Initializer for ledPin3>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   90 extern KeusGPIOPin ledPin4 = {0, 5, GPIO_OUTPUT, false, GPIO_LOW};
ledPin4:
        DATA8
        DS 5
        REQUIRE `?<Initializer for ledPin4>`
        REQUIRE __INIT_XDATA_I
//   91 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   92 extern KeusGPIOPin buttonPin1 = {1, 2, GPIO_INPUT, true, GPIO_LOW};
buttonPin1:
        DATA8
        DS 5
        REQUIRE `?<Initializer for buttonPin1>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   93 extern KeusGPIOPin buttonPin2 = {1, 3, GPIO_INPUT, true, GPIO_LOW};
buttonPin2:
        DATA8
        DS 5
        REQUIRE `?<Initializer for buttonPin2>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   94 extern KeusGPIOPin buttonPin3 = {1, 4, GPIO_INPUT, true, GPIO_LOW};
buttonPin3:
        DATA8
        DS 5
        REQUIRE `?<Initializer for buttonPin3>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   95 extern KeusGPIOPin buttonPin4 = {1, 5, GPIO_INPUT, true, GPIO_LOW};
buttonPin4:
        DATA8
        DS 5
        REQUIRE `?<Initializer for buttonPin4>`
        REQUIRE __INIT_XDATA_I
//   96 
//   97 /*************************************************************
//   98  * @fn      KEUS_init_fnc
//   99  * @brief   All Initilization
//  100  * @return  None
//  101  * @param   None  
//  102  * ***********************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  103 void KEUS_init_fnc(void)
KEUS_init_fnc:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function KEUS_init_fnc
        CODE
//  104 {
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOEdgeConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOEdgeConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOEdgeConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOEdgeConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOInterruptEnable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOInterruptEnable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOInterruptEnable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOInterruptEnable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusTimerUtilAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusTimerUtilAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusTimerUtilInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusTimerUtilStartTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, initUart0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, HalUARTPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  105 
//  106   //****Setting GPIOs direction and edge
//  107   KeusGPIOSetDirection(&ledPin1);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#ledPin1 & 0xff
        MOV       R3,#(ledPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  108   KeusGPIOSetDirection(&buttonPin1);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#buttonPin1 & 0xff
        MOV       R3,#(buttonPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  109   KeusGPIOEdgeConfiguration(&buttonPin1, GPIO_FALLING_EDGE);
        ; Setup parameters for call to function KeusGPIOEdgeConfiguration
        MOV       R1,#0x2
        MOV       R2,#buttonPin1 & 0xff
        MOV       R3,#(buttonPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
//  110   KeusGPIOReadPinValue(&buttonPin1);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin1 & 0xff
        MOV       R3,#(buttonPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//  111   KeusGPIOSetPinValue(&ledPin1);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin1 & 0xff
        MOV       R3,#(ledPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  112 
//  113   KeusGPIOSetDirection(&ledPin2);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  114   KeusGPIOSetDirection(&buttonPin2);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#buttonPin2 & 0xff
        MOV       R3,#(buttonPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  115   KeusGPIOEdgeConfiguration(&buttonPin2, GPIO_RISING_EDGE);
        ; Setup parameters for call to function KeusGPIOEdgeConfiguration
        MOV       R1,#0x1
        MOV       R2,#buttonPin2 & 0xff
        MOV       R3,#(buttonPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
//  116   KeusGPIOReadPinValue(&buttonPin2);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin2 & 0xff
        MOV       R3,#(buttonPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//  117   KeusGPIOSetPinValue(&ledPin2);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  118 
//  119   KeusGPIOSetDirection(&ledPin3);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#ledPin3 & 0xff
        MOV       R3,#(ledPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  120   KeusGPIOSetDirection(&buttonPin3);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#buttonPin3 & 0xff
        MOV       R3,#(buttonPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  121   KeusGPIOEdgeConfiguration(&buttonPin3, GPIO_RISING_EDGE);
        ; Setup parameters for call to function KeusGPIOEdgeConfiguration
        MOV       R1,#0x1
        MOV       R2,#buttonPin3 & 0xff
        MOV       R3,#(buttonPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
//  122   KeusGPIOReadPinValue(&buttonPin3);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin3 & 0xff
        MOV       R3,#(buttonPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//  123   KeusGPIOSetPinValue(&ledPin3);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin3 & 0xff
        MOV       R3,#(ledPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  124 
//  125   KeusGPIOSetDirection(&ledPin4);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#ledPin4 & 0xff
        MOV       R3,#(ledPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  126   KeusGPIOSetDirection(&buttonPin4);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#buttonPin4 & 0xff
        MOV       R3,#(buttonPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  127   KeusGPIOEdgeConfiguration(&buttonPin4, GPIO_RISING_EDGE);
        ; Setup parameters for call to function KeusGPIOEdgeConfiguration
        MOV       R1,#0x1
        MOV       R2,#buttonPin4 & 0xff
        MOV       R3,#(buttonPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
//  128   KeusGPIOReadPinValue(&buttonPin4);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin4 & 0xff
        MOV       R3,#(buttonPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//  129   KeusGPIOSetPinValue(&ledPin4);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin4 & 0xff
        MOV       R3,#(ledPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  130 
//  131   //*****Enabling Interrupts
//  132   KeusGPIOInterruptEnable(&buttonPin1);
        ; Setup parameters for call to function KeusGPIOInterruptEnable
        MOV       R2,#buttonPin1 & 0xff
        MOV       R3,#(buttonPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOInterruptEnable::?relay`; Banked call to: KeusGPIOInterruptEnable
//  133   KeusGPIOInterruptEnable(&buttonPin2);
        ; Setup parameters for call to function KeusGPIOInterruptEnable
        MOV       R2,#buttonPin2 & 0xff
        MOV       R3,#(buttonPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOInterruptEnable::?relay`; Banked call to: KeusGPIOInterruptEnable
//  134   KeusGPIOInterruptEnable(&buttonPin3);
        ; Setup parameters for call to function KeusGPIOInterruptEnable
        MOV       R2,#buttonPin3 & 0xff
        MOV       R3,#(buttonPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOInterruptEnable::?relay`; Banked call to: KeusGPIOInterruptEnable
//  135   KeusGPIOInterruptEnable(&buttonPin4);
        ; Setup parameters for call to function KeusGPIOInterruptEnable
        MOV       R2,#buttonPin4 & 0xff
        MOV       R3,#(buttonPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOInterruptEnable::?relay`; Banked call to: KeusGPIOInterruptEnable
//  136 
//  137   //******Enabling Timer and Debounce
//  138   KeusTimerUtilAddTimer(&intervalTimer);
        ; Setup parameters for call to function KeusTimerUtilAddTimer
        MOV       R2,#intervalTimer & 0xff
        MOV       R3,#(intervalTimer >> 8) & 0xff
        LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
//  139   KeusTimerUtilAddTimer(&debounceTimer);
        ; Setup parameters for call to function KeusTimerUtilAddTimer
        MOV       R2,#debounceTimer & 0xff
        MOV       R3,#(debounceTimer >> 8) & 0xff
        LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
//  140 
//  141   // init_status = KeusThemeSwitchMiniMemoryInit();
//  142   // read_status = KeusThemeSwitchMiniReadConfigDataIntoMemory();
//  143   //*****Timer Initialization
//  144   KeusTimerUtilInit();
        ; Setup parameters for call to function KeusTimerUtilInit
        LCALL     `??KeusTimerUtilInit::?relay`; Banked call to: KeusTimerUtilInit
//  145   //******Timer Start
//  146   KeusTimerUtilStartTimer();
        ; Setup parameters for call to function KeusTimerUtilStartTimer
        LCALL     `??KeusTimerUtilStartTimer::?relay`; Banked call to: KeusTimerUtilStartTimer
//  147 
//  148   // //*****UART Initialization
//  149   initUart0();
        ; Setup parameters for call to function initUart0
        LCALL     `??initUart0::?relay`; Banked call to: initUart0
//  150 
//  151   HalUARTWrite(HAL_UART_PORT_0, "KEUS INIT", (byte)osal_strlen("KEUS INIT"));
        ; Setup parameters for call to function osal_strlen
        MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
        MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
        LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV       ?V0,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,?V0
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
        MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  152 
//  153   
//  154 
//  155   //********At bootup send config and switch state to mini-58
//  156   //uart_send_switch_sate_ack(UART1,0x04,4,0x0B);
//  157 
//  158   KEUS_loop();
??KEUS_init_fnc_0:
        ; Setup parameters for call to function HalUARTPoll
        LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
        SJMP      ??KEUS_init_fnc_0
//  159 }
          CFI EndBlock cfiBlock3
//  160 
//  161 /**********************************************************************
//  162  * @fn      KEUS_loop
//  163  * @brief   Infinite loop
//  164  * @return  No return after this
//  165  * @param   None
//  166  * *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  167 void KEUS_loop(void)
KEUS_loop:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function KEUS_loop
        CODE
//  168 {
        FUNCALL KEUS_loop, HalUARTPoll
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  169   while (1)
//  170   {
//  171     HalUARTPoll();
??KEUS_loop_0:
        ; Setup parameters for call to function HalUARTPoll
        LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
        SJMP      ??KEUS_loop_0
//  172     
//  173   }
//  174 }
          CFI EndBlock cfiBlock4
//  175 
//  176 /*******************************************************************************
//  177  * @fn      HAL_ISR_FUNCTION
//  178  * @brief   ISR for button pressed
//  179  * ****************************************************************************/
//  180 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  181 HAL_ISR_FUNCTION(halKeusPort1Isr, P1INT_VECTOR)
halKeusPort1Isr:
          CFI Block cfiBlock5 Using cfiCommon1
          CFI Function halKeusPort1Isr
        CODE
//  182 {
        FUNCALL halKeusPort1Isr, KeusGPIOToggledState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeusPort1Isr, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeusPort1Isr, KeusGPIOToggledState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeusPort1Isr, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeusPort1Isr, KeusGPIOToggledState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeusPort1Isr, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeusPort1Isr, KeusGPIOToggledState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeusPort1Isr, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        PUSH      A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        MOV       A,#-0xf
        LCALL     ?INTERRUPT_ENTER_XSP
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  183   HAL_ENTER_ISR();
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       R6,A
        SETB      0xa8.7
//  184   if (debounce)
        MOV       DPTR,#debounce
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??halKeusPort1Isr_0
//  185   {
//  186     debounce = false;
        CLR       A
        MOVX      @DPTR,A
//  187     if (P1IFG & BV(buttonPin1.bit))
        MOV       ?V0,#0x1
        MOV       ?V1,A
        MOV       DPTR,#buttonPin1 + 1
        MOVX      A,@DPTR
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ANL       A,0x8a
        JZ        ??halKeusPort1Isr_1
//  188     {
//  189       ledPin1.state = KeusGPIOToggledState(ledPin1.state); //toggle led at button pressed
        ; Setup parameters for call to function KeusGPIOToggledState
        MOV       DPTR,#ledPin1 + 4
        LCALL     ?Subroutine2
??CrossCallReturnLabel_3:
        MOV       DPTR,#ledPin1 + 4
        MOVX      @DPTR,A
//  190       KeusGPIOSetPinValue(&ledPin1);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin1 & 0xff
        MOV       R3,#(ledPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  191      // config_data[0].valid_state =  ledPin1.state;
//  192       button_state = !ledPin1.state;
        MOV       DPTR,#ledPin1 + 4
        MOVX      A,@DPTR
        MOV       DPTR,#button_state
        JNZ       ??halKeusPort1Isr_2
        MOV       A,#0x1
        SJMP      ??halKeusPort1Isr_3
??halKeusPort1Isr_2:
        CLR       A
??halKeusPort1Isr_3:
        MOVX      @DPTR,A
//  193       button_Pressed++;
        MOV       DPTR,#button_Pressed
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  194 
//  195     }
//  196 
//  197     if (P1IFG & BV(buttonPin2.bit))
??halKeusPort1Isr_1:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       DPTR,#buttonPin2 + 1
        MOVX      A,@DPTR
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ANL       A,0x8a
        JZ        ??halKeusPort1Isr_4
//  198     {
//  199       ledPin2.state = KeusGPIOToggledState(ledPin2.state);
        ; Setup parameters for call to function KeusGPIOToggledState
        MOV       DPTR,#ledPin2 + 4
        LCALL     ?Subroutine2
??CrossCallReturnLabel_4:
        MOV       DPTR,#ledPin2 + 4
        MOVX      @DPTR,A
//  200       KeusGPIOSetPinValue(&ledPin2);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  201       //config_data[1].valid_state =  ledPin2.state;
//  202       button_state = !ledPin2.state;
        MOV       DPTR,#ledPin2 + 4
        MOVX      A,@DPTR
        MOV       DPTR,#button_state
        JNZ       ??halKeusPort1Isr_5
        MOV       A,#0x1
        SJMP      ??halKeusPort1Isr_6
??halKeusPort1Isr_5:
        CLR       A
??halKeusPort1Isr_6:
        LCALL     ?Subroutine1
//  203       event_t = 0x10;
//  204       button_Pressed = SWITCH_2;
//  205 
//  206     }
??CrossCallReturnLabel_0:
        MOV       A,#0x2
        MOVX      @DPTR,A
//  207 
//  208     if (P1IFG & BV(buttonPin3.bit))
??halKeusPort1Isr_4:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       DPTR,#buttonPin3 + 1
        MOVX      A,@DPTR
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ANL       A,0x8a
        JZ        ??halKeusPort1Isr_7
//  209     {
//  210       ledPin3.state = KeusGPIOToggledState(ledPin3.state);
        ; Setup parameters for call to function KeusGPIOToggledState
        MOV       DPTR,#ledPin3 + 4
        LCALL     ?Subroutine2
??CrossCallReturnLabel_5:
        MOV       DPTR,#ledPin3 + 4
        MOVX      @DPTR,A
//  211       KeusGPIOSetPinValue(&ledPin3);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin3 & 0xff
        MOV       R3,#(ledPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  212       //config_data[2].valid_state =  ledPin3.state;
//  213       button_state = !ledPin3.state;
        MOV       DPTR,#ledPin3 + 4
        MOVX      A,@DPTR
        MOV       DPTR,#button_state
        JNZ       ??halKeusPort1Isr_8
        MOV       A,#0x1
        SJMP      ??halKeusPort1Isr_9
??halKeusPort1Isr_8:
        CLR       A
??halKeusPort1Isr_9:
        LCALL     ?Subroutine1
//  214       event_t = 0x10;
//  215       button_Pressed = SWITCH_3;
//  216     }
??CrossCallReturnLabel_1:
        MOV       A,#0x3
        MOVX      @DPTR,A
//  217     if (P1IFG & BV(buttonPin4.bit))
??halKeusPort1Isr_7:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       DPTR,#buttonPin4 + 1
        MOVX      A,@DPTR
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ANL       A,0x8a
        JZ        ??halKeusPort1Isr_0
//  218     {
//  219       ledPin4.state = KeusGPIOToggledState(ledPin4.state);
        ; Setup parameters for call to function KeusGPIOToggledState
        MOV       DPTR,#ledPin4 + 4
        LCALL     ?Subroutine2
??CrossCallReturnLabel_6:
        MOV       DPTR,#ledPin4 + 4
        MOVX      @DPTR,A
//  220       KeusGPIOSetPinValue(&ledPin4);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin4 & 0xff
        MOV       R3,#(ledPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  221       //config_data[3].valid_state =  ledPin4.state;
//  222       button_state = !ledPin4.state;
        MOV       DPTR,#ledPin4 + 4
        MOVX      A,@DPTR
        MOV       DPTR,#button_state
        JNZ       ??halKeusPort1Isr_10
        MOV       A,#0x1
        SJMP      ??halKeusPort1Isr_11
??halKeusPort1Isr_10:
        CLR       A
??halKeusPort1Isr_11:
        LCALL     ?Subroutine1
//  223       event_t = 0x10;
//  224       button_Pressed = SWITCH_4;
//  225 
//  226 
//  227     }
//  228   }
??CrossCallReturnLabel_2:
        MOV       A,#0x4
        MOVX      @DPTR,A
//  229 
//  230   /*
//  231     Clear the CPU interrupt flag for Port_0
//  232     PxIFG has to be cleared before PxIF
//  233   */
//  234   P1IFG = 0;
??halKeusPort1Isr_0:
        MOV       0x8a,#0x0
//  235   P1IF = 0;
        CLR       0xe8.3
//  236 
//  237   CLEAR_SLEEP_MODE();
//  238   HAL_EXIT_ISR();
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        MOV       0xa8.7,C
//  239 }
        MOV       R7,#0x2
        LJMP      ?INTERRUPT_LEAVE_XSP
          CFI EndBlock cfiBlock5
        REQUIRE _A_IEN0
        REQUIRE P1IFG
        REQUIRE _A_IRCON2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond6 Using cfiCommon1
          CFI Function halKeusPort1Isr
          CFI Conditional ??CrossCallReturnLabel_3
          CFI A Frame(CFA_SP, 3)
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond7 Using cfiCommon1
          CFI (cfiCond7) Function halKeusPort1Isr
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond7) A Frame(CFA_SP, 3)
          CFI (cfiCond7) R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-5
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond8 Using cfiCommon1
          CFI (cfiCond8) Function halKeusPort1Isr
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond8) A Frame(CFA_SP, 3)
          CFI (cfiCond8) R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-5
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond9 Using cfiCommon1
          CFI (cfiCond9) Function halKeusPort1Isr
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond9) A Frame(CFA_SP, 3)
          CFI (cfiCond9) R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-5
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??KeusGPIOToggledState::?relay`; Banked call to: KeusGPIOToggledState
        MOV       A,R1
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond11 Using cfiCommon1
          CFI Function halKeusPort1Isr
          CFI Conditional ??CrossCallReturnLabel_0
          CFI A Frame(CFA_SP, 3)
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond12 Using cfiCommon1
          CFI (cfiCond12) Function halKeusPort1Isr
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond12) A Frame(CFA_SP, 3)
          CFI (cfiCond12) R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-5
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond13 Using cfiCommon1
          CFI (cfiCond13) Function halKeusPort1Isr
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond13) A Frame(CFA_SP, 3)
          CFI (cfiCond13) R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-5
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOVX      @DPTR,A
        MOV       DPTR,#event_t
        MOV       A,#0x10
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        MOV       DPTR,#button_Pressed
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14

        COMMON INTVEC:CODE:ROOT(0)
        ORG 123
`??halKeusPort1Isr::??INTVEC 123`:
        LJMP       (halKeusPort1Isr)

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for debounceTimer>`:
        DATA16
        DW `??leddebounceCbk::?relay`
        DW 200
        DATA8
        DB 1
        DB -1
        DATA16
        DW 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for intervalTimer>`:
        DATA16
        DW `??ledTimerCbk::?relay`
        DW 100
        DATA8
        DB 1
        DB -1
        DATA16
        DW 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledPin1>`:
        DATA8
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledPin2>`:
        DATA8
        DB 0
        DB 1
        DB 1
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledPin3>`:
        DATA8
        DB 0
        DB 4
        DB 1
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledPin4>`:
        DATA8
        DB 0
        DB 5
        DB 1
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for buttonPin1>`:
        DATA8
        DB 1
        DB 2
        DB 0
        DB 1
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for buttonPin2>`:
        DATA8
        DB 1
        DB 3
        DB 0
        DB 1
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for buttonPin3>`:
        DATA8
        DB 1
        DB 4
        DB 0
        DB 1
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for buttonPin4>`:
        DATA8
        DB 1
        DB 5
        DB 0
        DB 1
        DB 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ledTimerCbk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ledTimerCbk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??leddebounceCbk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    leddebounceCbk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??KEUS_init_fnc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    KEUS_init_fnc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??KEUS_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    KEUS_loop

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "KEUS INIT">`:
        DB "KEUS INIT"

        END
//  240 
//  241 //*************************NVIC MEMORY
//  242 
//  243 // /*******************************************************
//  244 //  * @fn          KeusThemeSwitchMiniMemoryInit
//  245 //  * @brief       nvic memory init
//  246 //  * @return
//  247 //  * @param
//  248 //  * *****************************************************/
//  249 // bool KeusThemeSwitchMiniMemoryInit(void)
//  250 // {
//  251 //   //  for (uint8 i = 0; i < CLICK_TYPES; i++)
//  252 //   //  {
//  253 //   //    themeManager.btnThemeMap[i] = 255;
//  254 //   //  }
//  255 
//  256 //   uint8 res = osal_nv_item_init(NVIC_MEMORY_POSITION, sizeof(config_data), (void *)config_data);
//  257 
//  258 //   if (res == SUCCESS || res == NV_ITEM_UNINIT)
//  259 //   {
//  260 //     return true;
//  261 //   }
//  262 //   else
//  263 //   {
//  264 //     return false;
//  265 //   }
//  266 // }
//  267 // /*******************************************************
//  268 //  * @fn      KeusThemeSwitchMiniReadConfigDataIntoMemory
//  269 //  * @brief   NVIC memory read 
//  270 //  * @return
//  271 //  * @param  
//  272 //  * ****************************************************/
//  273 // bool KeusThemeSwitchMiniReadConfigDataIntoMemory(void)
//  274 // {
//  275 //   uint8 res = osal_nv_read(NVIC_MEMORY_POSITION, 0, sizeof(config_data), (void *)config_data);
//  276 
//  277 //   if (res == SUCCESS)
//  278 //   {
//  279 //     return true;
//  280 //   }
//  281 //   else
//  282 //   {
//  283 //     return false;
//  284 //   }
//  285 // }
//  286 // /********************************************************
//  287 //  * @fn      KeusThemeSwitchMiniWriteConfigDataIntoMemory
//  288 //  * @brief   NVIC Memory write
//  289 //  * @return
//  290 //  * @param
//  291 //  * *****************************************************/
//  292 // bool KeusThemeSwitchMiniWriteConfigDataIntoMemory(void)
//  293 // {
//  294 //   uint8 res = osal_nv_write(NVIC_MEMORY_POSITION, 0, sizeof(config_data), (void *)config_data);
//  295 
//  296 //   if (res == SUCCESS)
//  297 //   {
//  298 //     return true;
//  299 //   }
//  300 //   else
//  301 //   {
//  302 //     return false;
//  303 //   }
//  304 // }
// 
// 294 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
// 293 bytes in segment NEAR_CODE
//   3 bytes in segment SFR_AN
//  56 bytes in segment XDATA_I
//  56 bytes in segment XDATA_ID
//  10 bytes in segment XDATA_ROM_C
//   9 bytes in segment XDATA_Z
// 
// 373 bytes of CODE     memory (+ 3 bytes shared)
//  10 bytes of CONST    memory
//   0 bytes of DATA     memory (+ 3 bytes shared)
// 294 bytes of HUGECODE memory
//  65 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
