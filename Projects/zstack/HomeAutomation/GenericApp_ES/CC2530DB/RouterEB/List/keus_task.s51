///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              06/Jan/2020  19:06:11
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
//    Command line       =  
//        -f C:\Users\Monisha\AppData\Local\Temp\EW8C61.tmp
//        (D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        HAL_KEY=FALSE -D HAL_LCD=FALSE -D HAL_LED=FALSE -D HAL_UART=TRUE -D
//        HAL_UART_ISR=1 -D HAL_UART_ISR_RX_MAX=64 -D HAL_UART_ISR_TX_MAX=64 -D
//        HAL_UART_DMA=2 -D HAL_UART_DMA_RX_MAX=64 -D HAL_UART_DMA_TX_MAX=64 -D
//        NWK_MAX_DEVICE_LIST=5 -D NWK_LINK_STATUS_PERIOD=50 -D
//        INT_HEAP_LEN=3172 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D
//        MULTICAST_ENABLED=FALSE -D APS_MAX_GROUPS=4 -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_READ -D DISABLE_GREENPOWER_BASIC_PROXY -D
//        KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -lC
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List
//        -lA
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\Source\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\Source\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\keus\embeddedswitch\
//        -I
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\keus\common\
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List\keus_task.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME keus_task

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??KEUS_init_fnc::?relay`
        FUNCTION `??KEUS_init_fnc::?relay`,0203H
        PUBLIC `??KEUS_loop::?relay`
        FUNCTION `??KEUS_loop::?relay`,0203H
        PUBLIC `??KeusThemeSwitchMiniMemoryInit::?relay`
        FUNCTION `??KeusThemeSwitchMiniMemoryInit::?relay`,0203H
        PUBLIC `??KeusThemeSwitchMiniReadConfigDataIntoMemory::`
        FUNCTION `??KeusThemeSwitchMiniReadConfigDataIntoMemory::`,0203H
        PUBLIC `??KeusThemeSwitchMiniWriteConfigDataIntoMemory:`
        FUNCTION `??KeusThemeSwitchMiniWriteConfigDataIntoMemory:`,0203H
        PUBLIC `??ledTimerCbk::?relay`
        FUNCTION `??ledTimerCbk::?relay`,0203H
        PUBLIC `??leddebounceCbk::?relay`
        FUNCTION `??leddebounceCbk::?relay`,0203H
        PUBLIC `??uart_send_switch_sate_ack::?relay`
        FUNCTION `??uart_send_switch_sate_ack::?relay`,0203H
        PUBLIC `??update_config_struct::?relay`
        FUNCTION `??update_config_struct::?relay`,0203H
        PUBLIC `??update_config_to_memory::?relay`
        FUNCTION `??update_config_to_memory::?relay`,0203H
        PUBLIC `??update_led::?relay`
        FUNCTION `??update_led::?relay`,0203H
        PUBLIC KEUS_init_fnc
        FUNCTION KEUS_init_fnc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC KEUS_loop
        FUNCTION KEUS_loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC KeusThemeSwitchMiniMemoryInit
        FUNCTION KeusThemeSwitchMiniMemoryInit,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC KeusThemeSwitchMiniReadConfigDataIntoMemory
        FUNCTION KeusThemeSwitchMiniReadConfigDataIntoMemory,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC KeusThemeSwitchMiniWriteConfigDataIntoMemory
        FUNCTION KeusThemeSwitchMiniWriteConfigDataIntoMemory,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC buttonManager
        PUBLIC buttonPin1
        PUBLIC buttonPin2
        PUBLIC buttonPin3
        PUBLIC buttonPin4
        PUBLIC button_Pressed
        PUBLIC button_state
        PUBLIC config_data
        PUBLIC contineous_on1
        PUBLIC contineous_on2
        PUBLIC contineous_on3
        PUBLIC contineous_on4
        PUBLIC count1
        PUBLIC count2
        PUBLIC count3
        PUBLIC count4
        PUBLIC debounce
        PUBLIC debounceTimer
        PUBLIC init_status
        PUBLIC intervalTimer
        PUBLIC ledPin1
        PUBLIC ledPin2
        PUBLIC ledPin3
        PUBLIC ledPin4
        PUBLIC ledTimerCbk
        FUNCTION ledTimerCbk,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 4, STACK
        PUBLIC leddebounceCbk
        FUNCTION leddebounceCbk,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC read_status
        PUBLIC uart_send_switch_sate_ack
        FUNCTION uart_send_switch_sate_ack,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC update_config_struct
        FUNCTION update_config_struct,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC update_config_to_memory
        FUNCTION update_config_to_memory,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC update_led
        FUNCTION update_led,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC write_status
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalUARTPoll         SYMBOL "HalUARTPoll"
`??HalUARTPoll::?relay` SYMBOL "?relay", HalUARTPoll
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
KeusGPIOEdgeConfiguration SYMBOL "KeusGPIOEdgeConfiguration"
`??KeusGPIOEdgeConfiguration::?relay` SYMBOL "?relay", KeusGPIOEdgeConfiguration
KeusGPIOReadPinValue SYMBOL "KeusGPIOReadPinValue"
`??KeusGPIOReadPinValue::?relay` SYMBOL "?relay", KeusGPIOReadPinValue
KeusGPIOSetDirection SYMBOL "KeusGPIOSetDirection"
`??KeusGPIOSetDirection::?relay` SYMBOL "?relay", KeusGPIOSetDirection
KeusGPIOSetPinValue SYMBOL "KeusGPIOSetPinValue"
`??KeusGPIOSetPinValue::?relay` SYMBOL "?relay", KeusGPIOSetPinValue
KeusGPIOToggledState SYMBOL "KeusGPIOToggledState"
`??KeusGPIOToggledState::?relay` SYMBOL "?relay", KeusGPIOToggledState
KeusTimerUtilAddTimer SYMBOL "KeusTimerUtilAddTimer"
`??KeusTimerUtilAddTimer::?relay` SYMBOL "?relay", KeusTimerUtilAddTimer
KeusTimerUtilInit   SYMBOL "KeusTimerUtilInit"
`??KeusTimerUtilInit::?relay` SYMBOL "?relay", KeusTimerUtilInit
KeusTimerUtilStartTimer SYMBOL "KeusTimerUtilStartTimer"
`??KeusTimerUtilStartTimer::?relay` SYMBOL "?relay", KeusTimerUtilStartTimer
initUart0           SYMBOL "initUart0"
`??initUart0::?relay` SYMBOL "?relay", initUart0
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen
KEUS_init_fnc       SYMBOL "KEUS_init_fnc"
`??KEUS_init_fnc::?relay` SYMBOL "?relay", KEUS_init_fnc
KEUS_loop           SYMBOL "KEUS_loop"
`??KEUS_loop::?relay` SYMBOL "?relay", KEUS_loop
KeusThemeSwitchMiniMemoryInit SYMBOL "KeusThemeSwitchMiniMemoryInit"
`??KeusThemeSwitchMiniMemoryInit::?relay` SYMBOL "?relay", KeusThemeSwitchMiniMemoryInit
KeusThemeSwitchMiniReadConfigDataIntoMemory SYMBOL "KeusThemeSwitchMiniReadConfigDataIntoMemory"
`??KeusThemeSwitchMiniReadConfigDataIntoMemory::` SYMBOL "?relay", KeusThemeSwitchMiniReadConfigDataIntoMemory
KeusThemeSwitchMiniWriteConfigDataIntoMemory SYMBOL "KeusThemeSwitchMiniWriteConfigDataIntoMemory"
`??KeusThemeSwitchMiniWriteConfigDataIntoMemory:` SYMBOL "?relay", KeusThemeSwitchMiniWriteConfigDataIntoMemory
ledTimerCbk         SYMBOL "ledTimerCbk"
`??ledTimerCbk::?relay` SYMBOL "?relay", ledTimerCbk
leddebounceCbk      SYMBOL "leddebounceCbk"
`??leddebounceCbk::?relay` SYMBOL "?relay", leddebounceCbk
uart_send_switch_sate_ack SYMBOL "uart_send_switch_sate_ack"
`??uart_send_switch_sate_ack::?relay` SYMBOL "?relay", uart_send_switch_sate_ack
update_config_struct SYMBOL "update_config_struct"
`??update_config_struct::?relay` SYMBOL "?relay", update_config_struct
update_config_to_memory SYMBOL "update_config_to_memory"
`??update_config_to_memory::?relay` SYMBOL "?relay", update_config_to_memory
update_led          SYMBOL "update_led"
`??update_led::?relay` SYMBOL "?relay", update_led

        EXTERN `??HalUARTPoll::?relay`
        FUNCTION `??HalUARTPoll::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??KeusGPIOEdgeConfiguration::?relay`
        FUNCTION `??KeusGPIOEdgeConfiguration::?relay`,00H
        EXTERN `??KeusGPIOReadPinValue::?relay`
        FUNCTION `??KeusGPIOReadPinValue::?relay`,00H
        EXTERN `??KeusGPIOSetDirection::?relay`
        FUNCTION `??KeusGPIOSetDirection::?relay`,00H
        EXTERN `??KeusGPIOSetPinValue::?relay`
        FUNCTION `??KeusGPIOSetPinValue::?relay`,00H
        EXTERN `??KeusGPIOToggledState::?relay`
        FUNCTION `??KeusGPIOToggledState::?relay`,00H
        EXTERN `??KeusTimerUtilAddTimer::?relay`
        FUNCTION `??KeusTimerUtilAddTimer::?relay`,00H
        EXTERN `??KeusTimerUtilInit::?relay`
        FUNCTION `??KeusTimerUtilInit::?relay`,00H
        EXTERN `??KeusTimerUtilStartTimer::?relay`
        FUNCTION `??KeusTimerUtilStartTimer::?relay`,00H
        EXTERN `??initUart0::?relay`
        FUNCTION `??initUart0::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,00H
        EXTERN HalUARTPoll
        FUNCTION HalUARTPoll,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOEdgeConfiguration
        FUNCTION KeusGPIOEdgeConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOReadPinValue
        FUNCTION KeusGPIOReadPinValue,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOSetDirection
        FUNCTION KeusGPIOSetDirection,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOSetPinValue
        FUNCTION KeusGPIOSetPinValue,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOToggledState
        FUNCTION KeusGPIOToggledState,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusTimerUtilAddTimer
        FUNCTION KeusTimerUtilAddTimer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusTimerUtilInit
        FUNCTION KeusTimerUtilInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusTimerUtilStartTimer
        FUNCTION KeusTimerUtilStartTimer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN initUart0
        FUNCTION initUart0,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
//    1 
//    2 /********************************************************
//    3  * @fn  This file is to declare all GPIOs
//    4  * *****************************************************/
//    5 
//    6 #include "keus_task.h"
//    7 
//    8 #define UART0     HAL_UART_PORT_0
//    9 //#define UART1     HAL_UART_PORT_1
//   10 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   11 bool debounce = false;
debounce:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   12 uint8 count1 = 0, count2 = 0, count3 = 0,count4 = 0;
count1:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
count2:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
count3:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
count4:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   13 uint8 button_Pressed =0,button_state = 0;
button_Pressed:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
button_state:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   14 uint8 contineous_on1 =0,contineous_on2 =0,contineous_on3 =0,contineous_on4 =0;
contineous_on1:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
contineous_on2:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
contineous_on3:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
contineous_on4:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   15 
//   16 //Variables for NVIC Memory

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   17 bool init_status = 0;
init_status:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   18 bool read_status = 0;
read_status:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   19 bool write_status = 0;
write_status:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   20 
//   21 void ledTimerCbk(uint8 timerId);
//   22 void leddebounceCbk(uint8 timerId);
//   23 void update_led(uint8 led_no, uint8 led_state_t);
//   24 void update_config_struct(uint8 led_no, uint8 led_state);
//   25 void update_config_to_memory(void);
//   26 void uart_send_switch_sate_ack(void);
//   27 
//   28 typedef void (*KeusBtnCbk)(void);
//   29 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   30 struct CONFIG_INFO_t config_data[4];
config_data:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   31 //
//   32 typedef struct {
//   33   uint16 btnDelay;
//   34   uint16 elapsedTime;
//   35   KeusBtnCbk btnCbk;
//   36 } KeusBtnManager;
//   37 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   38 KeusBtnManager buttonManager;
buttonManager:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   39 
//   40 //Debounce configuration

        RSEG XDATA_I:XDATA:NOROOT(0)
//   41 KeusTimerConfig debounceTimer = {
debounceTimer:
        DATA8
        DS 8
        REQUIRE `?<Initializer for debounceTimer>`
        REQUIRE __INIT_XDATA_I
//   42     &leddebounceCbk,
//   43     200,
//   44     true,
//   45     -1,
//   46     0};
//   47 
//   48 //Timer Configuration

        RSEG XDATA_I:XDATA:NOROOT(0)
//   49 KeusTimerConfig intervalTimer = {
intervalTimer:
        DATA8
        DS 8
        REQUIRE `?<Initializer for intervalTimer>`
        REQUIRE __INIT_XDATA_I
//   50     &ledTimerCbk,
//   51     100,
//   52     true,
//   53     -1,
//   54     0};
//   55 /****************************************************************************
//   56  * **************************FUNCTION DECLARATION****************************
//   57  * ***************************************************************************/
//   58 void KEUS_init_fnc(void);
//   59 void KEUS_loop(void);
//   60 
//   61 //********LED and button initilization

        RSEG XDATA_I:XDATA:NOROOT(0)
//   62 extern KeusGPIOPin ledPin1 = {0, 0, GPIO_OUTPUT, false, LED_OFF};
ledPin1:
        DATA8
        DS 5
        REQUIRE `?<Initializer for ledPin1>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   63 extern KeusGPIOPin ledPin2 = {0, 1, GPIO_OUTPUT, false, LED_OFF};
ledPin2:
        DATA8
        DS 5
        REQUIRE `?<Initializer for ledPin2>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   64 extern KeusGPIOPin ledPin3 = {0, 4, GPIO_OUTPUT, false, LED_OFF};
ledPin3:
        DATA8
        DS 5
        REQUIRE `?<Initializer for ledPin3>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   65 extern KeusGPIOPin ledPin4 = {0, 5, GPIO_OUTPUT, false, LED_OFF};
ledPin4:
        DATA8
        DS 5
        REQUIRE `?<Initializer for ledPin4>`
        REQUIRE __INIT_XDATA_I
//   66 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   67 extern KeusGPIOPin buttonPin1 = {1, 2, GPIO_INPUT, true, LED_OFF};
buttonPin1:
        DATA8
        DS 5
        REQUIRE `?<Initializer for buttonPin1>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   68 extern KeusGPIOPin buttonPin2 = {1, 3, GPIO_INPUT, true, LED_OFF};
buttonPin2:
        DATA8
        DS 5
        REQUIRE `?<Initializer for buttonPin2>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   69 extern KeusGPIOPin buttonPin3 = {1, 4, GPIO_INPUT, true, LED_OFF};
buttonPin3:
        DATA8
        DS 5
        REQUIRE `?<Initializer for buttonPin3>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   70 extern KeusGPIOPin buttonPin4 = {1, 5, GPIO_INPUT, true, LED_OFF};
buttonPin4:
        DATA8
        DS 5
        REQUIRE `?<Initializer for buttonPin4>`
        REQUIRE __INIT_XDATA_I
//   71 /*******************************************************
//   72  * @brief  Callback function for timer
//   73            Called every after 100ms
//   74 
//   75 *********************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   76 void ledTimerCbk(uint8 timerId)
ledTimerCbk:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ledTimerCbk
        CODE
//   77 {
        FUNCALL ledTimerCbk, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOToggledState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOToggledState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOToggledState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOToggledState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ledTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   78   KeusGPIOReadPinValue(&buttonPin1);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin1 & 0xff
        MOV       R3,#(buttonPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//   79   KeusGPIOReadPinValue(&buttonPin2);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin2 & 0xff
        MOV       R3,#(buttonPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//   80   KeusGPIOReadPinValue(&buttonPin3);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin3 & 0xff
        MOV       R3,#(buttonPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//   81   KeusGPIOReadPinValue(&buttonPin4);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin4 & 0xff
        MOV       R3,#(buttonPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//   82 
//   83   if (buttonPin1.state == BUTTON_ACTIVE){
        MOV       DPTR,#buttonPin1 + 4
        MOVX      A,@DPTR
        JNZ       ??ledTimerCbk_0
//   84     buttonManager.elapsedTime += KEUS_EMBEDDEDSWITCH_BUTTON_POLL_TIME;
        LCALL     ?Subroutine3 & 0xFFFF
//   85     count1++;
??CrossCallReturnLabel_27:
        MOV       DPTR,#count1
        LCALL     ?Subroutine4 & 0xFFFF
//   86     if(count1 >= 50){
??CrossCallReturnLabel_4:
        JC        ??ledTimerCbk_1
//   87       contineous_on1 = 1;
        MOV       DPTR,#contineous_on1
        MOV       A,#0x1
        MOVX      @DPTR,A
//   88       ledPin1.state = LED_ON;
        MOV       DPTR,#ledPin1 + 4
        CLR       A
        SJMP      ??ledTimerCbk_2
//   89       KeusGPIOSetPinValue(&ledPin1);
//   90     }
//   91     else if (buttonManager.elapsedTime >= buttonManager.btnDelay) {
??ledTimerCbk_1:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        JNC       $+5
        LJMP      ??ledTimerCbk_3 & 0xFFFF
//   92       contineous_on1 = 0;
        MOV       DPTR,#contineous_on1
        LCALL     ?Subroutine7 & 0xFFFF
//   93       buttonManager.elapsedTime = 0;
//   94       ledPin1.state = KeusGPIOToggledState(ledPin1.state); //toggle led at button pressed
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function KeusGPIOToggledState
        MOV       DPTR,#ledPin1 + 4
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV       DPTR,#ledPin1 + 4
??ledTimerCbk_2:
        MOVX      @DPTR,A
//   95       KeusGPIOSetPinValue(&ledPin1);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin1 & 0xff
        MOV       R3,#(ledPin1 >> 8) & 0xff
        LJMP      ??ledTimerCbk_4 & 0xFFFF
//   96     }
//   97   } 
//   98    else if (buttonPin2.state == BUTTON_ACTIVE) {
??ledTimerCbk_0:
        MOV       DPTR,#buttonPin2 + 4
        MOVX      A,@DPTR
        JNZ       ??ledTimerCbk_5
//   99     buttonManager.elapsedTime += KEUS_EMBEDDEDSWITCH_BUTTON_POLL_TIME;
        LCALL     ?Subroutine3 & 0xFFFF
//  100     count2++;
??CrossCallReturnLabel_28:
        MOV       DPTR,#count2
        LCALL     ?Subroutine4 & 0xFFFF
//  101     if(count2 >= 50){
??CrossCallReturnLabel_5:
        JC        ??ledTimerCbk_6
//  102       contineous_on2 = 1;
        MOV       DPTR,#contineous_on2
        MOV       A,#0x1
        MOVX      @DPTR,A
//  103       ledPin2.state = LED_ON;
        MOV       DPTR,#ledPin2 + 4
        CLR       A
        SJMP      ??ledTimerCbk_7
//  104       KeusGPIOSetPinValue(&ledPin2);
//  105     }
//  106     else if (buttonManager.elapsedTime >= buttonManager.btnDelay) {
??ledTimerCbk_6:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        JNC       $+5
        LJMP      ??ledTimerCbk_3 & 0xFFFF
//  107       contineous_on2 = 0;
        MOV       DPTR,#contineous_on2
        LCALL     ?Subroutine7 & 0xFFFF
//  108       buttonManager.elapsedTime = 0;
//  109       ledPin2.state = KeusGPIOToggledState(ledPin2.state); //toggle led at button pressed
??CrossCallReturnLabel_17:
        ; Setup parameters for call to function KeusGPIOToggledState
        MOV       DPTR,#ledPin2 + 4
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV       DPTR,#ledPin2 + 4
??ledTimerCbk_7:
        MOVX      @DPTR,A
//  110       KeusGPIOSetPinValue(&ledPin2);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
        LJMP      ??ledTimerCbk_4 & 0xFFFF
//  111     }
//  112   }  
//  113   else if (buttonPin3.state == BUTTON_ACTIVE) {
??ledTimerCbk_5:
        MOV       DPTR,#buttonPin3 + 4
        MOVX      A,@DPTR
        JNZ       ??ledTimerCbk_8
//  114     buttonManager.elapsedTime += KEUS_EMBEDDEDSWITCH_BUTTON_POLL_TIME;
        LCALL     ?Subroutine3 & 0xFFFF
//  115     count3++;
??CrossCallReturnLabel_29:
        MOV       DPTR,#count3
        LCALL     ?Subroutine4 & 0xFFFF
//  116     if(count3 >= 50){
??CrossCallReturnLabel_6:
        JC        ??ledTimerCbk_9
//  117       contineous_on3 = 1;
        MOV       DPTR,#contineous_on3
        MOV       A,#0x1
        MOVX      @DPTR,A
//  118       ledPin3.state = LED_ON;
        MOV       DPTR,#ledPin3 + 4
        CLR       A
        SJMP      ??ledTimerCbk_10
//  119       KeusGPIOSetPinValue(&ledPin3);
//  120     }
//  121     else if (buttonManager.elapsedTime >= buttonManager.btnDelay) {
??ledTimerCbk_9:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        JNC       $+5
        LJMP      ??ledTimerCbk_3 & 0xFFFF
//  122       contineous_on3 = 0;
        MOV       DPTR,#contineous_on3
        LCALL     ?Subroutine7 & 0xFFFF
//  123       buttonManager.elapsedTime = 0;
//  124       ledPin3.state = KeusGPIOToggledState(ledPin3.state); //toggle led at button pressed
??CrossCallReturnLabel_18:
        ; Setup parameters for call to function KeusGPIOToggledState
        MOV       DPTR,#ledPin3 + 4
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV       DPTR,#ledPin3 + 4
??ledTimerCbk_10:
        MOVX      @DPTR,A
//  125       KeusGPIOSetPinValue(&ledPin3);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin3 & 0xff
        MOV       R3,#(ledPin3 >> 8) & 0xff
        LJMP      ??ledTimerCbk_4 & 0xFFFF
//  126     }
//  127   }  
//  128   else if (buttonPin4.state == BUTTON_ACTIVE) {
??ledTimerCbk_8:
        MOV       DPTR,#buttonPin4 + 4
        MOVX      A,@DPTR
        MOV       DPTR,#buttonManager + 2
        JNZ       ??ledTimerCbk_11
//  129     buttonManager.elapsedTime += KEUS_EMBEDDEDSWITCH_BUTTON_POLL_TIME;
        LCALL     ??Subroutine10_0 & 0xFFFF
//  130     count4++;
??CrossCallReturnLabel_26:
        MOV       DPTR,#count4
        LCALL     ?Subroutine4 & 0xFFFF
//  131     if(count4 >= 50){
??CrossCallReturnLabel_7:
        JC        ??ledTimerCbk_12
//  132       contineous_on4 = 1;
        MOV       DPTR,#contineous_on4
        MOV       A,#0x1
        MOVX      @DPTR,A
//  133       ledPin4.state = LED_ON;
        MOV       DPTR,#ledPin4 + 4
        CLR       A
        SJMP      ??ledTimerCbk_13
//  134       KeusGPIOSetPinValue(&ledPin4);
//  135     }
//  136     else if (buttonManager.elapsedTime >= buttonManager.btnDelay) {
??ledTimerCbk_12:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        JC        ??ledTimerCbk_3
//  137       contineous_on4 = 0;
        MOV       DPTR,#contineous_on4
        LCALL     ?Subroutine7 & 0xFFFF
//  138       buttonManager.elapsedTime = 0;
//  139       ledPin4.state = KeusGPIOToggledState(ledPin4.state); //toggle led at button pressed
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function KeusGPIOToggledState
        MOV       DPTR,#ledPin4 + 4
        LCALL     ?Subroutine5 & 0xFFFF
//  140       KeusGPIOSetPinValue(&ledPin4);
//  141     }
//  142   } 
??CrossCallReturnLabel_11:
        MOV       DPTR,#ledPin4 + 4
        SJMP      ??ledTimerCbk_13
//  143   else {
//  144     buttonManager.elapsedTime = 0;
??ledTimerCbk_11:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  145     count1 = 0;
        MOV       DPTR,#count1
        MOVX      @DPTR,A
//  146     count2 = 0;
        MOV       DPTR,#count2
        MOVX      @DPTR,A
//  147     count3 = 0;
        MOV       DPTR,#count3
        MOVX      @DPTR,A
//  148     count4 = 0;
        MOV       DPTR,#count4
        MOVX      @DPTR,A
//  149 
//  150     if(contineous_on1 ==0){
        MOV       DPTR,#contineous_on1
        MOVX      A,@DPTR
        JNZ       ??ledTimerCbk_14
//  151       ledPin1.state = LED_OFF;
        MOV       DPTR,#ledPin1 + 4
        MOV       A,#0x1
        MOVX      @DPTR,A
//  152       KeusGPIOSetPinValue(&ledPin1);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin1 & 0xff
        MOV       R3,#(ledPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  153     }
//  154     if(contineous_on2 ==0){
??ledTimerCbk_14:
        MOV       DPTR,#contineous_on2
        MOVX      A,@DPTR
        JNZ       ??ledTimerCbk_15
//  155       ledPin2.state = LED_OFF;
        MOV       DPTR,#ledPin2 + 4
        MOV       A,#0x1
        MOVX      @DPTR,A
//  156       KeusGPIOSetPinValue(&ledPin2);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  157     }
//  158     if(contineous_on3 ==0){
??ledTimerCbk_15:
        MOV       DPTR,#contineous_on3
        MOVX      A,@DPTR
        JNZ       ??ledTimerCbk_16
//  159       ledPin3.state = LED_OFF;
        MOV       DPTR,#ledPin3 + 4
        MOV       A,#0x1
        MOVX      @DPTR,A
//  160       KeusGPIOSetPinValue(&ledPin3);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin3 & 0xff
        MOV       R3,#(ledPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  161     }
//  162     if(contineous_on4 ==0){
??ledTimerCbk_16:
        MOV       DPTR,#contineous_on4
        MOVX      A,@DPTR
        JNZ       ??ledTimerCbk_3
//  163       ledPin4.state = LED_OFF;
        MOV       DPTR,#ledPin4 + 4
        MOV       A,#0x1
??ledTimerCbk_13:
        MOVX      @DPTR,A
//  164       KeusGPIOSetPinValue(&ledPin4);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin4 & 0xff
        MOV       R3,#(ledPin4 >> 8) & 0xff
??ledTimerCbk_4:
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  165     }
//  166   }
//  167 }
??ledTimerCbk_3:
        SJMP      ??Subroutine11_0
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function ledTimerCbk
          CFI Conditional ??CrossCallReturnLabel_16
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function ledTimerCbk
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond2) CFA_SP SP+-7
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function ledTimerCbk
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond3) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond3) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond3) CFA_SP SP+-7
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function ledTimerCbk
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond4) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond4) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond4) CFA_SP SP+-7
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        CLR       A
        MOVX      @DPTR,A
        MOV       DPTR,#buttonManager + 2
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function ledTimerCbk
          CFI Conditional ??CrossCallReturnLabel_8
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ledTimerCbk
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond7) CFA_SP SP+-7
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function ledTimerCbk
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond8) CFA_SP SP+-7
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function ledTimerCbk
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond9) CFA_SP SP+-7
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??KeusGPIOToggledState::?relay`; Banked call to: KeusGPIOToggledState
        MOV       A,R1
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function ledTimerCbk
          CFI Conditional ??CrossCallReturnLabel_4
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function ledTimerCbk
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond12) CFA_SP SP+-7
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function ledTimerCbk
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond13) CFA_SP SP+-7
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function ledTimerCbk
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond14) CFA_SP SP+-7
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
        CLR       C
        SUBB      A,#0x32
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function ledTimerCbk
          CFI Conditional ??CrossCallReturnLabel_27
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function ledTimerCbk
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond17) CFA_SP SP+-7
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function ledTimerCbk
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond18) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond18) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond18) CFA_SP SP+-7
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV       DPTR,#buttonManager + 2
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine10_0:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function ledTimerCbk
          CFI Conditional ??CrossCallReturnLabel_26
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function ledTimerCbk
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond21) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond21) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond21) CFA_SP SP+-7
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function ledTimerCbk
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond22) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond22) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond22) CFA_SP SP+-7
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function ledTimerCbk
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond23) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond23) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond23) CFA_SP SP+-7
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOVX      A,@DPTR
        ADD       A,#-0x18
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function ledTimerCbk
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function ledTimerCbk
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond26) CFA_SP SP+-7
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function ledTimerCbk
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond27) CFA_SP SP+-7
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function ledTimerCbk
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond28) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond28) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond28) CFA_SP SP+-7
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV       DPTR,#buttonManager
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPH,#((buttonManager + 2) >> 8) & 0xff
        MOV       DPL,#(buttonManager + 2) & 0xff
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,R0
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,R1
        RET
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29
//  168 
//  169 /**************************************************************
//  170  * @fn      leddebounceCbk
//  171  * @brief   callback function for Debounce,called every after 200ms
//  172  * @param   none
//  173  * @return  None
//  174  * ***********************************************************/
//  175 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX      @DPTR,A
          CFI EndBlock cfiBlock30
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock31

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  176 void leddebounceCbk(uint8 timerId)
leddebounceCbk:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function leddebounceCbk
        CODE
//  177 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  178   debounce = true;
        MOV       DPTR,#debounce
        MOV       A,#0x1
        SJMP      ?Subroutine0
//  179 }
          CFI EndBlock cfiBlock32
//  180 
//  181 
//  182 
//  183 /*************************************************************
//  184  * @fn      KEUS_init_fnc
//  185  * @brief   All Initilization
//  186  * @return  None
//  187  * @param   None  
//  188  * ***********************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  189 void KEUS_init_fnc(void)
KEUS_init_fnc:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function KEUS_init_fnc
        CODE
//  190 {
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOEdgeConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOEdgeConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOEdgeConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOEdgeConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOReadPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusTimerUtilAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusTimerUtilAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusThemeSwitchMiniMemoryInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusThemeSwitchMiniReadConfigDataIntoMemory
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusTimerUtilInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, KeusTimerUtilStartTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, initUart0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init_fnc, HalUARTPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  191 
//  192   //****Setting GPIOs direction and edge
//  193   KeusGPIOSetDirection(&ledPin1);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#ledPin1 & 0xff
        MOV       R3,#(ledPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  194   KeusGPIOSetDirection(&buttonPin1);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#buttonPin1 & 0xff
        MOV       R3,#(buttonPin1 >> 8) & 0xff
        LCALL     ?Subroutine8 & 0xFFFF
//  195   KeusGPIOEdgeConfiguration(&buttonPin1, GPIO_RISING_EDGE);
??CrossCallReturnLabel_20:
        MOV       R2,#buttonPin1 & 0xff
        MOV       R3,#(buttonPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
//  196   KeusGPIOReadPinValue(&buttonPin1);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin1 & 0xff
        MOV       R3,#(buttonPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//  197   KeusGPIOSetPinValue(&ledPin1);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin1 & 0xff
        MOV       R3,#(ledPin1 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  198 
//  199   KeusGPIOSetDirection(&ledPin2);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  200   KeusGPIOSetDirection(&buttonPin2);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#buttonPin2 & 0xff
        MOV       R3,#(buttonPin2 >> 8) & 0xff
        LCALL     ?Subroutine8 & 0xFFFF
//  201   KeusGPIOEdgeConfiguration(&buttonPin2, GPIO_RISING_EDGE);
??CrossCallReturnLabel_21:
        MOV       R2,#buttonPin2 & 0xff
        MOV       R3,#(buttonPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
//  202   KeusGPIOReadPinValue(&buttonPin2);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin2 & 0xff
        MOV       R3,#(buttonPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//  203   KeusGPIOSetPinValue(&ledPin2);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  204 
//  205   KeusGPIOSetDirection(&ledPin3);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#ledPin3 & 0xff
        MOV       R3,#(ledPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  206   KeusGPIOSetDirection(&buttonPin3);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#buttonPin3 & 0xff
        MOV       R3,#(buttonPin3 >> 8) & 0xff
        LCALL     ?Subroutine8 & 0xFFFF
//  207   KeusGPIOEdgeConfiguration(&buttonPin3, GPIO_RISING_EDGE);
??CrossCallReturnLabel_22:
        MOV       R2,#buttonPin3 & 0xff
        MOV       R3,#(buttonPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
//  208   KeusGPIOReadPinValue(&buttonPin3);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin3 & 0xff
        MOV       R3,#(buttonPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//  209   KeusGPIOSetPinValue(&ledPin3);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin3 & 0xff
        MOV       R3,#(ledPin3 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  210 
//  211   KeusGPIOSetDirection(&ledPin4);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#ledPin4 & 0xff
        MOV       R3,#(ledPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//  212   KeusGPIOSetDirection(&buttonPin4);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#buttonPin4 & 0xff
        MOV       R3,#(buttonPin4 >> 8) & 0xff
        LCALL     ?Subroutine8 & 0xFFFF
//  213   KeusGPIOEdgeConfiguration(&buttonPin4, GPIO_RISING_EDGE);
??CrossCallReturnLabel_23:
        MOV       R2,#buttonPin4 & 0xff
        MOV       R3,#(buttonPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
//  214   KeusGPIOReadPinValue(&buttonPin4);
        ; Setup parameters for call to function KeusGPIOReadPinValue
        MOV       R2,#buttonPin4 & 0xff
        MOV       R3,#(buttonPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
//  215   KeusGPIOSetPinValue(&ledPin4);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin4 & 0xff
        MOV       R3,#(ledPin4 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//  216 
//  217   //******Enabling Timer and Debounce
//  218   KeusTimerUtilAddTimer(&intervalTimer);
        ; Setup parameters for call to function KeusTimerUtilAddTimer
        MOV       R2,#intervalTimer & 0xff
        MOV       R3,#(intervalTimer >> 8) & 0xff
        LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
//  219   KeusTimerUtilAddTimer(&debounceTimer);
        ; Setup parameters for call to function KeusTimerUtilAddTimer
        MOV       R2,#debounceTimer & 0xff
        MOV       R3,#(debounceTimer >> 8) & 0xff
        LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
//  220 
//  221   init_status = KeusThemeSwitchMiniMemoryInit();
        ; Setup parameters for call to function KeusThemeSwitchMiniMemoryInit
        LCALL     `??KeusThemeSwitchMiniMemoryInit::?relay`; Banked call to: KeusThemeSwitchMiniMemoryInit
        MOV       A,R1
        MOV       DPTR,#init_status
        MOVX      @DPTR,A
//  222   read_status = KeusThemeSwitchMiniReadConfigDataIntoMemory();
        ; Setup parameters for call to function KeusThemeSwitchMiniReadConfigDataIntoMemory
        LCALL     `??KeusThemeSwitchMiniReadConfigDataIntoMemory::`; Banked call to: KeusThemeSwitchMiniReadConfigDataIntoMemory
        MOV       A,R1
        MOV       DPTR,#read_status
        MOVX      @DPTR,A
//  223   //*****Timer Initialization
//  224   KeusTimerUtilInit();
        ; Setup parameters for call to function KeusTimerUtilInit
        LCALL     `??KeusTimerUtilInit::?relay`; Banked call to: KeusTimerUtilInit
//  225   //******Timer Start
//  226   KeusTimerUtilStartTimer();
        ; Setup parameters for call to function KeusTimerUtilStartTimer
        LCALL     `??KeusTimerUtilStartTimer::?relay`; Banked call to: KeusTimerUtilStartTimer
//  227 
//  228   // //*****UART Initialization
//  229   initUart0();
        ; Setup parameters for call to function initUart0
        LCALL     `??initUart0::?relay`; Banked call to: initUart0
//  230 
//  231   HalUARTWrite(HAL_UART_PORT_0, "KEUS INIT", (byte)osal_strlen("KEUS INIT"));
        ; Setup parameters for call to function osal_strlen
        MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
        MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
        LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV       ?V0,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,?V0
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
        MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  232 
//  233   
//  234   buttonManager.btnDelay = KEUS_EMBEDDEDSWITCH_RESET_BTN_TIMEOUT;
        MOV       DPTR,#buttonManager
        MOV       A,#0x10
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x27
        MOVX      @DPTR,A
//  235 
//  236   config_data[0].config_id = 1;
        MOV       DPTR,#config_data + 2
        MOV       A,#0x1
        MOVX      @DPTR,A
//  237   config_data[0].led = 1;
        MOV       DPTR,#config_data
        MOVX      @DPTR,A
//  238   config_data[0].valid_state = 1;
        INC       DPTR
        MOVX      @DPTR,A
//  239 
//  240   config_data[1].config_id = 1;
        MOV       DPTR,#config_data + 5
        MOVX      @DPTR,A
//  241   config_data[1].led = 2;
        MOV       DPTR,#config_data + 3
        INC       A
        MOVX      @DPTR,A
//  242   config_data[1].valid_state = 1;
        INC       DPTR
        DEC       A
        MOVX      @DPTR,A
//  243 
//  244   config_data[2].config_id = 1;
        MOV       DPTR,#config_data + 8
        MOVX      @DPTR,A
//  245   config_data[2].led = 3;
        MOV       DPTR,#config_data + 6
        MOV       A,#0x3
        MOVX      @DPTR,A
//  246   config_data[2].valid_state = 1;
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
//  247 
//  248   config_data[3].config_id = 1;
        MOV       DPTR,#config_data + 11
        MOVX      @DPTR,A
//  249   config_data[3].led = 4;
        MOV       DPTR,#config_data + 9
        MOV       A,#0x4
        MOVX      @DPTR,A
//  250   config_data[3].valid_state = 1;
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
//  251 
//  252   KEUS_loop();
??KEUS_init_fnc_0:
        ; Setup parameters for call to function HalUARTPoll
        LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
        SJMP      ??KEUS_init_fnc_0
//  253 }
          CFI EndBlock cfiBlock33

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function KEUS_init_fnc
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function KEUS_init_fnc
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function KEUS_init_fnc
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function KEUS_init_fnc
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
        ; Setup parameters for call to function KeusGPIOEdgeConfiguration
        ; Setup parameters for call to function KeusGPIOEdgeConfiguration
        ; Setup parameters for call to function KeusGPIOEdgeConfiguration
        ; Setup parameters for call to function KeusGPIOEdgeConfiguration
        MOV       R1,#0x1
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38
//  254 
//  255 /**********************************************************************
//  256  * @fn      KEUS_loop
//  257  * @brief   Infinite loop
//  258  * @return  No return after this
//  259  * @param   None
//  260  * *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  261 void KEUS_loop(void)
KEUS_loop:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function KEUS_loop
        CODE
//  262 {
        FUNCALL KEUS_loop, HalUARTPoll
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  263   while (1)
//  264   {
//  265     HalUARTPoll();
??KEUS_loop_0:
        ; Setup parameters for call to function HalUARTPoll
        LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
        SJMP      ??KEUS_loop_0
//  266     
//  267   }
//  268 }
          CFI EndBlock cfiBlock39
//  269 
//  270 /*******************************************************************
//  271  * @fn    update_led
//  272  * @brief   Function to receive LED state
//  273  * *****************************************************************/
//  274 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  275 void update_led(uint8 led_no, uint8 led_state_t){
update_led:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function update_led
        CODE
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  276   uint8 led_state;
//  277   led_state = led_state_t;
//  278   if (led_no == 1)
        MOV       A,#0x69
        ADD       A,R2
        MOV       R5,A
        MOV       A,#-0x65
        ADD       A,R2
        MOV       R4,A
        MOV       A,#-0x33
        ADD       A,R2
        MOV       R3,A
        MOV       A,#0x1
        XRL       A,R1
        JZ        $+5
        LJMP      ??update_led_0 & 0xFFFF
//  279   {
//  280     if (config_data[0].config_id == ONOFF)
        MOV       DPTR,#config_data + 2
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ       ??update_led_1
//  281     {
//  282       if (led_state == 0)
        MOV       A,R2
        JNZ       ??update_led_2
//  283       {
//  284         config_data[0].valid_state = LOW;
        MOV       DPTR,#config_data + 1
        CLR       A
        SJMP      ??update_led_3
//  285       }
//  286       else
//  287       {
//  288         config_data[0].valid_state = HIGH;
//  289       }
//  290     }
//  291     else if (config_data[0].config_id == DIMMING)
??update_led_1:
        MOV       A,#0x2
        XRL       A,R0
        JZ        ??update_led_4
//  292     {
//  293       config_data[0].valid_state = led_state;
//  294     }
//  295     else if (config_data[0].config_id == FAN_CONTROLLER)
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??update_led_5
//  296     {
//  297       if (led_state == 0 || led_state == 50 || led_state == 100 || led_state == 150 || led_state == 200 || led_state == 255)
        MOV       A,R2
        JZ        ??update_led_4
        MOV       A,#0x32
        XRL       A,R2
        JZ        ??update_led_4
        MOV       A,#0x64
        XRL       A,R2
        JZ        ??update_led_4
        MOV       A,#-0x6a
        XRL       A,R2
        JZ        ??update_led_4
        MOV       A,#-0x38
        XRL       A,R2
        JZ        ??update_led_4
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??update_led_6
//  298       {
//  299         config_data[0].valid_state = led_state;
??update_led_4:
        MOV       A,R2
        MOV       DPTR,#config_data + 1
        SJMP      ??update_led_3
//  300       }
//  301       else if (led_state > 0 && led_state < 50)
??update_led_6:
        MOV       A,R2
        CLR       C
        SUBB      A,#0x32
        JNC       ??update_led_7
//  302       {
//  303         config_data[0].valid_state = 50;
        MOV       DPTR,#config_data + 1
        MOV       A,#0x32
        SJMP      ??update_led_3
//  304       }
//  305       else if (led_state > 50 && led_state < 100)
??update_led_7:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_8
//  306       {
//  307         config_data[0].valid_state = 100;
        MOV       DPTR,#config_data + 1
        MOV       A,#0x64
        SJMP      ??update_led_3
//  308       }
//  309       else if (led_state > 100 && led_state < 150)
??update_led_8:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_9
//  310       {
//  311         config_data[0].valid_state = 150;
        MOV       DPTR,#config_data + 1
        MOV       A,#-0x6a
        SJMP      ??update_led_3
//  312       }
//  313       else if (led_state > 150 && led_state < 200)
??update_led_9:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_10
//  314       {
//  315         config_data[0].valid_state = 200;
        MOV       DPTR,#config_data + 1
        MOV       A,#-0x38
        SJMP      ??update_led_3
//  316       }
//  317       else if (led_state > 200 && led_state < 255)
??update_led_10:
        MOV       A,R2
        CLR       C
        SUBB      A,#-0x37
        JC        ??update_led_5
//  318       {
//  319         config_data[0].valid_state = 255;
??update_led_2:
        MOV       DPTR,#config_data + 1
        MOV       A,#-0x1
??update_led_3:
        MOVX      @DPTR,A
//  320       }
//  321     }
//  322     config_data[0].led = led_no;
??update_led_5:
        MOV       DPTR,#config_data
        MOV       A,#0x1
        LJMP      ??update_led_11 & 0xFFFF
//  323   }
//  324 
//  325   //LED == 2
//  326   else if (led_no == 2)
??update_led_0:
        MOV       A,#0x2
        XRL       A,R1
        JZ        $+5
        LJMP      ??update_led_12 & 0xFFFF
//  327   {
//  328     if (config_data[1].config_id == ONOFF)
        MOV       DPTR,#config_data + 5
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        JNZ       ??update_led_13
//  329     {
//  330       if (led_state == 0)
        MOV       A,R2
        JNZ       ??update_led_14
//  331       {
//  332         config_data[1].valid_state = LOW;
        MOV       DPTR,#config_data + 4
        CLR       A
        SJMP      ??update_led_15
//  333       }
//  334       else
//  335       {
//  336         config_data[1].valid_state = HIGH;
//  337       }
//  338     }
//  339     else if (config_data[1].config_id == DIMMING)
??update_led_13:
        MOV       A,#0x2
        XRL       A,R0
        JZ        ??update_led_16
//  340     {
//  341       config_data[1].valid_state = led_state;
//  342     }
//  343     
//  344     else if (config_data[1].config_id == FAN_CONTROLLER)
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??update_led_17
//  345     {
//  346       if (config_data[1].valid_state == 0 || config_data[1].valid_state == 50 || config_data[1].valid_state == 100 || config_data[1].valid_state == 150 || config_data[1].valid_state == 200 || config_data[1].valid_state == 255)
        MOV       DPTR,#config_data + 4
        MOVX      A,@DPTR
        MOV       R0,A
        JZ        ??update_led_16
        MOV       A,#0x32
        XRL       A,R0
        JZ        ??update_led_16
        MOV       A,#0x64
        XRL       A,R0
        JZ        ??update_led_16
        MOV       A,#-0x6a
        XRL       A,R0
        JZ        ??update_led_16
        MOV       A,#-0x38
        XRL       A,R0
        JZ        ??update_led_16
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??update_led_18
//  347       {
//  348         config_data[1].valid_state = led_state;
??update_led_16:
        MOV       A,R2
        MOV       DPTR,#config_data + 4
        SJMP      ??update_led_15
//  349       }
//  350       else if (led_state > 0 && led_state < 50)
??update_led_18:
        MOV       A,R2
        JZ        ??update_led_19
        CLR       C
        SUBB      A,#0x32
        JNC       ??update_led_19
//  351       {
//  352         config_data[1].valid_state = 50;
        MOV       A,#0x32
        SJMP      ??update_led_15
//  353       }
//  354       else if (led_state > 50 && led_state < 100)
??update_led_19:
        MOV       A,R3
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_20
//  355       {
//  356         config_data[1].valid_state = 100;
        MOV       A,#0x64
        SJMP      ??update_led_15
//  357       }
//  358       else if (led_state > 100 && led_state < 150)
??update_led_20:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_21
//  359       {
//  360         config_data[1].valid_state = 150;
        MOV       A,#-0x6a
        SJMP      ??update_led_15
//  361       }
//  362       else if (led_state > 150 && led_state < 200)
??update_led_21:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_22
//  363       {
//  364         config_data[1].valid_state = 200;
        MOV       A,#-0x38
        SJMP      ??update_led_15
//  365       }
//  366       else if (led_state > 200 && led_state < 255)
??update_led_22:
        MOV       A,R2
        CLR       C
        SUBB      A,#-0x37
        JC        ??update_led_17
        MOV       A,#-0x1
        XRL       A,R2
        JZ        ??update_led_17
//  367       {
//  368         config_data[1].valid_state = 255;
??update_led_14:
        MOV       DPTR,#config_data + 4
        MOV       A,#-0x1
??update_led_15:
        MOVX      @DPTR,A
//  369       }
//  370     }
//  371     config_data[1].led = led_no;
??update_led_17:
        MOV       DPTR,#config_data + 3
        MOV       A,#0x2
        LJMP      ??update_led_11 & 0xFFFF
//  372   }
//  373   //LED == 3
//  374   else if (led_no == 3)
??update_led_12:
        MOV       A,#0x3
        XRL       A,R1
        JZ        $+5
        LJMP      ??update_led_23 & 0xFFFF
//  375   {
//  376     if (config_data[2].config_id == ONOFF)
        MOV       DPTR,#config_data + 8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_14:
        JNZ       ??update_led_24
//  377     {
//  378       if (led_state == 0)
        MOV       A,R2
        JNZ       ??update_led_25
//  379       {
//  380         config_data[2].valid_state = LOW;
        MOV       DPTR,#config_data + 7
        CLR       A
        SJMP      ??update_led_26
//  381       }
//  382       else
//  383       {
//  384         config_data[2].valid_state = HIGH;
//  385       }
//  386     }
//  387     else if (config_data[2].config_id == DIMMING)
??update_led_24:
        MOV       A,#0x2
        XRL       A,R0
        JZ        ??update_led_27
//  388     {
//  389       config_data[2].valid_state = led_state;
//  390       
//  391     }
//  392     else if (config_data[2].config_id == FAN_CONTROLLER)
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??update_led_28
//  393     {
//  394       if (led_state == 0 || led_state == 50 || led_state == 100 || led_state == 150 || led_state == 200 || led_state == 255)
        MOV       A,R2
        JZ        ??update_led_27
        MOV       A,#0x32
        XRL       A,R2
        JZ        ??update_led_27
        MOV       A,#0x64
        XRL       A,R2
        JZ        ??update_led_27
        MOV       A,#-0x6a
        XRL       A,R2
        JZ        ??update_led_27
        MOV       A,#-0x38
        XRL       A,R2
        JZ        ??update_led_27
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??update_led_29
//  395       {
//  396         config_data[2].valid_state = led_state;
??update_led_27:
        MOV       A,R2
        MOV       DPTR,#config_data + 7
        SJMP      ??update_led_26
//  397       }
//  398       else if (led_state > 0 && led_state < 50)
??update_led_29:
        MOV       A,R2
        CLR       C
        SUBB      A,#0x32
        JNC       ??update_led_30
//  399       {
//  400         config_data[2].valid_state = 50;
        MOV       DPTR,#config_data + 7
        MOV       A,#0x32
        SJMP      ??update_led_26
//  401       }
//  402       else if (led_state > 50 && led_state < 100)
??update_led_30:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_31
//  403       {
//  404         config_data[2].valid_state = 100;
        MOV       DPTR,#config_data + 7
        MOV       A,#0x64
        SJMP      ??update_led_26
//  405       }
//  406       else if (led_state > 100 && led_state < 150)
??update_led_31:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_32
//  407       {
//  408         config_data[2].valid_state = 150;
        MOV       DPTR,#config_data + 7
        MOV       A,#-0x6a
        SJMP      ??update_led_26
//  409       }
//  410       else if (led_state > 150 && led_state < 200)
??update_led_32:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_33
//  411       {
//  412         config_data[2].valid_state = 200;
        MOV       DPTR,#config_data + 7
        MOV       A,#-0x38
        SJMP      ??update_led_26
//  413       }
//  414       else if (led_state > 200 && led_state < 255)
??update_led_33:
        MOV       A,R2
        CLR       C
        SUBB      A,#-0x37
        JC        ??update_led_28
//  415       {
//  416         config_data[2].valid_state = 255;
??update_led_25:
        MOV       DPTR,#config_data + 7
        MOV       A,#-0x1
??update_led_26:
        MOVX      @DPTR,A
//  417       }
//  418     }
//  419     config_data[2].led = led_no;
??update_led_28:
        MOV       DPTR,#config_data + 6
        MOV       A,#0x3
        LJMP      ??update_led_11 & 0xFFFF
//  420   }
//  421   //LED == 4
//  422   else if (led_no == 4)
??update_led_23:
        MOV       A,#0x4
        XRL       A,R1
        JZ        $+5
        LJMP      ??update_led_34 & 0xFFFF
//  423   {
//  424     if (config_data[3].config_id == ONOFF)
        MOV       DPTR,#config_data + 11
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_15:
        JNZ       ??update_led_35
//  425     {
//  426       if (led_state == 0)
        MOV       A,R2
        JNZ       ??update_led_36
//  427       {
//  428         config_data[3].valid_state = LOW;
        MOV       DPTR,#config_data + 10
        CLR       A
        SJMP      ??update_led_37
//  429       }
//  430       else
//  431       {
//  432         config_data[3].valid_state = HIGH;
//  433       }
//  434     }
//  435     else if (config_data[3].config_id == DIMMING)
??update_led_35:
        MOV       A,#0x2
        XRL       A,R0
        JZ        ??update_led_38
//  436     {
//  437       config_data[3].valid_state = led_state;
//  438       
//  439     }
//  440     else if (config_data[3].config_id == FAN_CONTROLLER)
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??update_led_39
//  441     {
//  442       if (led_state == 0 || led_state == 50 || led_state == 100 || led_state == 150 || led_state == 200 || led_state == 255)
        MOV       A,R2
        JZ        ??update_led_38
        MOV       A,#0x32
        XRL       A,R2
        JZ        ??update_led_38
        MOV       A,#0x64
        XRL       A,R2
        JZ        ??update_led_38
        MOV       A,#-0x6a
        XRL       A,R2
        JZ        ??update_led_38
        MOV       A,#-0x38
        XRL       A,R2
        JZ        ??update_led_38
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??update_led_40
//  443       {
//  444         config_data[3].valid_state = led_state;
??update_led_38:
        MOV       A,R2
        MOV       DPTR,#config_data + 10
        SJMP      ??update_led_37
//  445       }
//  446       else if (led_state > 0 && led_state < 50)
??update_led_40:
        MOV       A,R2
        CLR       C
        SUBB      A,#0x32
        JNC       ??update_led_41
//  447       {
//  448         config_data[3].valid_state = 50;
        MOV       DPTR,#config_data + 10
        MOV       A,#0x32
        SJMP      ??update_led_37
//  449       }
//  450       else if (led_state > 50 && led_state < 100)
??update_led_41:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_42
//  451       {
//  452         config_data[3].valid_state = 100;
        MOV       DPTR,#config_data + 10
        MOV       A,#0x64
        SJMP      ??update_led_37
//  453       }
//  454       else if (led_state > 100 && led_state < 150)
??update_led_42:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_43
//  455       {
//  456         config_data[3].valid_state = 150;
        MOV       DPTR,#config_data + 10
        MOV       A,#-0x6a
        SJMP      ??update_led_37
//  457       }
//  458       else if (led_state > 150 && led_state < 200)
??update_led_43:
        DEC       A
        CLR       C
        SUBB      A,#0x31
        JNC       ??update_led_44
//  459       {
//  460         config_data[3].valid_state = 200;
        MOV       DPTR,#config_data + 10
        MOV       A,#-0x38
        SJMP      ??update_led_37
//  461       }
//  462       else if (led_state > 200 && led_state < 255)
??update_led_44:
        MOV       A,R2
        CLR       C
        SUBB      A,#-0x37
        JC        ??update_led_39
//  463       {
//  464         config_data[3].valid_state = 255;
??update_led_36:
        MOV       DPTR,#config_data + 10
        MOV       A,#-0x1
??update_led_37:
        MOVX      @DPTR,A
//  465       }
//  466     }
//  467     config_data[3].led = led_no;
??update_led_39:
        MOV       DPTR,#config_data + 9
        MOV       A,#0x4
??update_led_11:
        MOVX      @DPTR,A
//  468   }
//  469 }
??update_led_34:
        LJMP      ??Subroutine11_0 & 0xFFFF
          CFI EndBlock cfiBlock40

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond41 Using cfiCommon0
          CFI Function update_led
          CFI Conditional ??CrossCallReturnLabel_12
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function update_led
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond42) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond42) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond42) CFA_SP SP+-7
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function update_led
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond43) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond43) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond43) CFA_SP SP+-7
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function update_led
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond44) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond44) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond44) CFA_SP SP+-7
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x1
        XRL       A,R0
        RET
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45
//  470 
//  471 
//  472 /***********************************************************************
//  473  * @fn      update_config_struct
//  474  * @brief   update config structure
//  475  * 
//  476  * ********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  477 void update_config_struct(uint8 led_no, uint8 led_state)
update_config_struct:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function update_config_struct
        CODE
//  478 {
        FUNCALL update_config_struct, KeusThemeSwitchMiniWriteConfigDataIntoMemory
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  479   if (led_no == 1)
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??update_config_struct_0
//  480   {
//  481     config_data[0].valid_state = led_state;
        MOV       A,R2
        MOV       DPTR,#config_data + 1
        MOVX      @DPTR,A
//  482     config_data[0].led = led_no;
        MOV       DPTR,#config_data
        MOV       A,#0x1
        SJMP      ??update_config_struct_1
//  483   }
//  484   else if (led_no == 2)
??update_config_struct_0:
        MOV       A,#0x2
        XRL       A,R6
        JNZ       ??update_config_struct_2
//  485   {
//  486     config_data[1].led = led_no;
        MOV       DPTR,#config_data + 3
        MOV       A,#0x2
        SJMP      ??update_config_struct_3
//  487     config_data[1].valid_state = led_state;
//  488   }
//  489   else if (led_no == 3)
??update_config_struct_2:
        MOV       A,#0x3
        XRL       A,R6
        JNZ       ??update_config_struct_4
//  490   {
//  491     config_data[2].led = led_no;
        MOV       DPTR,#config_data + 6
        MOV       A,#0x3
        SJMP      ??update_config_struct_3
//  492     config_data[2].valid_state = led_state;
//  493   }
//  494   else if (led_no == 4)
??update_config_struct_4:
        MOV       A,#0x4
        XRL       A,R6
        JNZ       ??update_config_struct_5
//  495   {
//  496     config_data[3].led = led_no;
        MOV       DPTR,#config_data + 9
        MOV       A,#0x4
??update_config_struct_3:
        MOVX      @DPTR,A
//  497     config_data[3].valid_state = led_state;
        MOV       A,R2
        INC       DPTR
??update_config_struct_1:
        MOVX      @DPTR,A
//  498   }
//  499   update_config_to_memory();
??update_config_struct_5:
        ; Setup parameters for call to function KeusThemeSwitchMiniWriteConfigDataIntoMemory
        LCALL     `??KeusThemeSwitchMiniWriteConfigDataIntoMemory:`; Banked call to: KeusThemeSwitchMiniWriteConfigDataIntoMemory
        MOV       A,R1
        MOV       DPTR,#write_status
        MOVX      @DPTR,A
//  500 }
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock46
//  501 
//  502 // uint8 get_state(uint8* state){
//  503 //   uint8 Tx_buff [] = {0},index = 0;
//  504 //   for(uint8 i = 0;i<4;i++){
//  505 //   Tx_buff[index++] = config_data[i].led;
//  506 //   Tx_buff[index++] = config_data[i].valid_state;
//  507 //   }
//  508 //   return Tx_buff;
//  509 // }
//  510 
//  511 /*****************************************************************************
//  512  * @fn      uart_send_sate_ack
//  513  * @brief   Send back State of all switch to uart
//  514  * @return
//  515  * @param 
//  516  * **************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  517 void uart_send_switch_sate_ack(void){
uart_send_switch_sate_ack:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function uart_send_switch_sate_ack
        CODE
        FUNCALL uart_send_switch_sate_ack, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  518   uint8 Tx_buff[20] = {0};
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x14
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  519   uint8 index =0;
//  520   Tx_buff[index++] = 0x28;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x28
        MOVX      @DPTR,A
        MOV       R2,#0x1
//  521   for(uint8 i = 0;i<4;i++){
        MOV       R3,#0x0
//  522   Tx_buff[index++] = config_data[i].led;
??uart_send_switch_sate_ack_0:
        MOV       A,R3
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#config_data & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(config_data >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-6
        MOV       A,R2
        MOV       R4,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,DPL
        ADD       A,R4
        MOV       DPL,A
        CLR       A
        ADDC      A,DPH
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+-5
        MOVX      @DPTR,A
        INC       R2
//  523   Tx_buff[index++] = config_data[i].valid_state;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-6
        LCALL     ?Subroutine9 & 0xFFFF
//  524   }
??CrossCallReturnLabel_24:
        POP       A
          CFI CFA_SP SP+-5
        MOVX      @DPTR,A
        INC       R2
        INC       R3
        MOV       A,R3
        CLR       C
        SUBB      A,#0x4
        JC        ??uart_send_switch_sate_ack_0
//  525   Tx_buff[index++] = 0x29;
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV       A,#0x29
        MOVX      @DPTR,A
//  526   HalUARTWrite(HAL_UART_PORT_0, Tx_buff, index);
        ; Setup parameters for call to function HalUARTWrite
        INC       R4
        INC       R4
        INC       R4
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  527   index++;
//  528 }
        MOV       A,#0x14
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        LJMP      ??Subroutine11_0 & 0xFFFF
          CFI EndBlock cfiBlock47

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function uart_send_switch_sate_ack
          CFI Conditional ??CrossCallReturnLabel_24
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-8
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function uart_send_switch_sate_ack
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond49) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond49) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond49) CFA_SP SP+-7
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,DPL
        ADD       A,R2
        MOV       DPL,A
        CLR       A
        ADDC      A,DPH
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50
//  529 /*****************************************************************************
//  530  * @fn        update_config_to_memory
//  531  * **************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  532 void update_config_to_memory(void)
update_config_to_memory:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function update_config_to_memory
        CODE
//  533 {
        FUNCALL update_config_to_memory, KeusThemeSwitchMiniWriteConfigDataIntoMemory
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  534   write_status = KeusThemeSwitchMiniWriteConfigDataIntoMemory();
        ; Setup parameters for call to function KeusThemeSwitchMiniWriteConfigDataIntoMemory
        LCALL     `??KeusThemeSwitchMiniWriteConfigDataIntoMemory:`; Banked call to: KeusThemeSwitchMiniWriteConfigDataIntoMemory
        MOV       A,R1
        MOV       DPTR,#write_status
        LJMP      ?Subroutine0 & 0xFFFF
//  535 }
          CFI EndBlock cfiBlock51
//  536 
//  537 
//  538 //*************************NVIC MEMORY
//  539 
//  540 /*******************************************************
//  541  * @fn          KeusThemeSwitchMiniMemoryInit
//  542  * @brief       nvic memory init
//  543  * @return
//  544  * @param
//  545  * *****************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  546 bool KeusThemeSwitchMiniMemoryInit(void)
KeusThemeSwitchMiniMemoryInit:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function KeusThemeSwitchMiniMemoryInit
        CODE
//  547 {
        FUNCALL KeusThemeSwitchMiniMemoryInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  548   //  for (uint8 i = 0; i < CLICK_TYPES; i++)
//  549   //  {
//  550   //    themeManager.btnThemeMap[i] = 255;
//  551   //  }
//  552 
//  553   uint8 res = osal_nv_item_init(NVIC_MEMORY_POSITION, sizeof(config_data), (void *)config_data);
        ; Setup parameters for call to function osal_nv_item_init
        MOV       ?V0,#config_data & 0xff
        MOV       ?V1,#(config_data >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R4,#0xc
        MOV       R5,#0x0
        MOV       R2,#0x10
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        MOV       R0,A
//  554 
//  555   if (res == SUCCESS || res == NV_ITEM_UNINIT)
        JZ        ??KeusThemeSwitchMiniMemoryInit_0
        MOV       A,#0x9
        XRL       A,R0
        JNZ       ??KeusThemeSwitchMiniMemoryInit_1
//  556   {
//  557     return true;
??KeusThemeSwitchMiniMemoryInit_0:
        MOV       R1,#0x1
        SJMP      ??KeusThemeSwitchMiniMemoryInit_2
//  558   }
//  559   else
//  560   {
//  561     return false;
??KeusThemeSwitchMiniMemoryInit_1:
        MOV       R1,#0x0
//  562   }
??KeusThemeSwitchMiniMemoryInit_2:
          CFI EndBlock cfiBlock52
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  563 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock53
//  564 /*******************************************************
//  565  * @fn      KeusThemeSwitchMiniReadConfigDataIntoMemory
//  566  * @brief   NVIC memory read 
//  567  * @return
//  568  * @param  
//  569  * ****************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  570 bool KeusThemeSwitchMiniReadConfigDataIntoMemory(void)
KeusThemeSwitchMiniReadConfigDataIntoMemory:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function KeusThemeSwitchMiniReadConfigDataIntoMemory
        CODE
//  571 {
        FUNCALL KeusThemeSwitchMiniReadConfigDataIntoMemory, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  572   uint8 res = osal_nv_read(NVIC_MEMORY_POSITION, 0, sizeof(config_data), (void *)config_data);
//  573 
//  574   if (res == SUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V0,#config_data & 0xff
        MOV       ?V1,#(config_data >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0xc
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x10
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        JNZ       ??KeusThemeSwitchMiniReadConfigDataIntoMemory_0
//  575   {
//  576     return true;
        MOV       R1,#0x1
        SJMP      ??KeusThemeSwitchMiniReadConfigDataIntoMemory_1
//  577   }
//  578   else
//  579   {
//  580     return false;
??KeusThemeSwitchMiniReadConfigDataIntoMemory_0:
        MOV       R1,#0x0
//  581   }
??KeusThemeSwitchMiniReadConfigDataIntoMemory_1:
        SJMP      ?Subroutine1
//  582 }
          CFI EndBlock cfiBlock54
//  583 
//  584 
//  585 /********************************************************
//  586  * @fn      KeusThemeSwitchMiniWriteConfigDataIntoMemory
//  587  * @brief   NVIC Memory write
//  588  * @return
//  589  * @param
//  590  * *****************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  591 bool KeusThemeSwitchMiniWriteConfigDataIntoMemory(void)
KeusThemeSwitchMiniWriteConfigDataIntoMemory:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function KeusThemeSwitchMiniWriteConfigDataIntoMemory
        CODE
//  592 {
        FUNCALL KeusThemeSwitchMiniWriteConfigDataIntoMemory, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  593   uint8 res = osal_nv_write(NVIC_MEMORY_POSITION, 0, sizeof(config_data), (void *)config_data);
//  594 
//  595   if (res == SUCCESS)
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#config_data & 0xff
        MOV       ?V1,#(config_data >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0xc
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x10
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        JNZ       ??KeusThemeSwitchMiniWriteConfigDataIntoMemory_0
//  596   {
//  597     return true;
        MOV       R1,#0x1
        SJMP      ??KeusThemeSwitchMiniWriteConfigDataIntoMemory_1
//  598   }
//  599   else
//  600   {
//  601     return false;
??KeusThemeSwitchMiniWriteConfigDataIntoMemory_0:
        MOV       R1,#0x0
//  602   }
??KeusThemeSwitchMiniWriteConfigDataIntoMemory_1:
        SJMP      ?Subroutine1
//  603 }
          CFI EndBlock cfiBlock55

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for debounceTimer>`:
        DATA16
        DW `??leddebounceCbk::?relay`
        DW 200
        DATA8
        DB 1
        DB -1
        DATA16
        DW 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for intervalTimer>`:
        DATA16
        DW `??ledTimerCbk::?relay`
        DW 100
        DATA8
        DB 1
        DB -1
        DATA16
        DW 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledPin1>`:
        DATA8
        DB 0
        DB 0
        DB 1
        DB 0
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledPin2>`:
        DATA8
        DB 0
        DB 1
        DB 1
        DB 0
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledPin3>`:
        DATA8
        DB 0
        DB 4
        DB 1
        DB 0
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledPin4>`:
        DATA8
        DB 0
        DB 5
        DB 1
        DB 0
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for buttonPin1>`:
        DATA8
        DB 1
        DB 2
        DB 0
        DB 1
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for buttonPin2>`:
        DATA8
        DB 1
        DB 3
        DB 0
        DB 1
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for buttonPin3>`:
        DATA8
        DB 1
        DB 4
        DB 0
        DB 1
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for buttonPin4>`:
        DATA8
        DB 1
        DB 5
        DB 0
        DB 1
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ledTimerCbk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ledTimerCbk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??leddebounceCbk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    leddebounceCbk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??KEUS_init_fnc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    KEUS_init_fnc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??KEUS_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    KEUS_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??update_led::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    update_led

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??update_config_struct::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    update_config_struct

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uart_send_switch_sate_ack::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uart_send_switch_sate_ack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??update_config_to_memory::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    update_config_to_memory

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??KeusThemeSwitchMiniMemoryInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    KeusThemeSwitchMiniMemoryInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??KeusThemeSwitchMiniReadConfigDataIntoMemory::`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    KeusThemeSwitchMiniReadConfigDataIntoMemory

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??KeusThemeSwitchMiniWriteConfigDataIntoMemory:`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    KeusThemeSwitchMiniWriteConfigDataIntoMemory

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "KEUS INIT">`:
        DB "KEUS INIT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        END
// 
// 1 709 bytes in segment BANKED_CODE
//    66 bytes in segment BANK_RELAYS
//    56 bytes in segment XDATA_I
//    56 bytes in segment XDATA_ID
//    30 bytes in segment XDATA_ROM_C
//    32 bytes in segment XDATA_Z
// 
//   122 bytes of CODE     memory
//    30 bytes of CONST    memory
// 1 709 bytes of HUGECODE memory
//    88 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
