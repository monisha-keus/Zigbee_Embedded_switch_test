###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               03/Jan/2020  16:00:42
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
#    Command line       =  
#        -f C:\Users\Monisha\AppData\Local\Temp\EWA059.tmp
#        (D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        HAL_KEY=FALSE -D HAL_LCD=FALSE -D HAL_LED=FALSE -D HAL_UART=TRUE -D
#        HAL_UART_ISR=1 -D HAL_UART_ISR_RX_MAX=64 -D HAL_UART_ISR_TX_MAX=64 -D
#        HAL_UART_DMA=2 -D HAL_UART_DMA_RX_MAX=64 -D HAL_UART_DMA_TX_MAX=64 -D
#        NWK_MAX_DEVICE_LIST=5 -D NWK_LINK_STATUS_PERIOD=50 -D
#        INT_HEAP_LEN=3172 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D
#        MULTICAST_ENABLED=FALSE -D APS_MAX_GROUPS=4 -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_READ -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -lC
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List
#        -lA
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\Source\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\Source\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\keus\embeddedswitch\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\keus\common\
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List\keus_task.lst
#    Object file        =  
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\Obj\keus_task.r51
#
###############################################################################

D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
      1          
      2          /********************************************************
      3           * @fn  This function is to declare all GPIOs
      4           * *****************************************************/
      5          
      6          #include "keus_task.h"

   \                                 In  segment SFR_AN, at 0x8a
   \   unsigned char volatile __sfr P1IFG
   \                     P1IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1
      7          
      8          #define UART0     HAL_UART_PORT_0
      9          //#define UART1     HAL_UART_PORT_1
     10          
     11          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     12          bool init_status = 0;
   \                     init_status:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     13          bool read_status = 0;
   \                     read_status:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     14          bool write_status = 0;
   \                     write_status:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     15          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     16          bool debounce = false;
   \                     debounce:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     17          //bool toggle = false, toggle1 = false, toggle3 = false;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     18          uint8 count = 0, count1 = 0, count2 = 0;//led_state;
   \                     count:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     count1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     count2:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     19          uint8 button_Pressed =0,button_state = 0;
   \                     button_Pressed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     button_state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     20          
     21          void ledTimerCbk(uint8 timerId);
     22          void leddebounceCbk(uint8 timerId);
     23          
     24          //Debounce configuration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     25          KeusTimerConfig debounceTimer = {
   \                     debounceTimer:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for debounceTimer>`
   \   000008                REQUIRE __INIT_XDATA_I
     26              &leddebounceCbk,
     27              200,
     28              true,
     29              -1,
     30              0};
     31          
     32          //Timer Configuration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     33          KeusTimerConfig intervalTimer = {
   \                     intervalTimer:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for intervalTimer>`
   \   000008                REQUIRE __INIT_XDATA_I
     34              &ledTimerCbk,
     35              100,
     36              true,
     37              -1,
     38              0};
     39          /****************************************************************************
     40           * **************************FUNCTION DECLARATION****************************
     41           * ***************************************************************************/
     42          void KEUS_init_fnc(void);
     43          
     44          //void update_led_array(uint8 led_no,uint8 led_state);
     45          void KEUS_loop(void);
     46          void update_config_to_memory(void);
     47          void uart_send_button_ack(void);
     48          
     49          /*******************************************************
     50           * @brief  Callback function for timer
     51                     Called every after 100ms
     52          
     53          *********************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     54          void ledTimerCbk(uint8 timerId)
   \                     ledTimerCbk:
     55          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     56            // if (switch_state_buffer)
     57            // { //To control Blinking led rate
     58              HalUARTWrite(HAL_UART_PORT_0,&button_Pressed,1);
   \   000004                ; Setup parameters for call to function HalUARTWrite
   \   000004   7C01         MOV       R4,#0x1
   \   000006   7D00         MOV       R5,#0x0
   \   000008   7A..         MOV       R2,#button_Pressed & 0xff
   \   00000A   7B..         MOV       R3,#(button_Pressed >> 8) & 0xff
   \   00000C   7900         MOV       R1,#0x0
   \   00000E   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     59          
     60              // count1++;
     61              // if(count1 == 5){
     62              //   count1 = 0;    }
     63            // }
     64          
     65            if (config_state_buffer)
   \   000011   90....       MOV       DPTR,#config_state_buffer
   \   000014   E0           MOVX      A,@DPTR
   \   000015   600C         JZ        ??ledTimerCbk_0
     66            { 
     67              count2++;
   \   000017   90....       MOV       DPTR,#count2
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   04           INC       A
   \   00001C   F0           MOVX      @DPTR,A
     68              if(count2 == 5){
   \   00001D   6405         XRL       A,#0x5
   \   00001F   7002         JNZ       ??ledTimerCbk_0
     69                count2 = 0;
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
     70              }
     71            }
     72          }
   \                     ??ledTimerCbk_0:
   \   000023                REQUIRE ?Subroutine0
   \   000023                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
     73          
     74          /**************************************************************
     75           * @fn      leddebounceCbk
     76           * @brief   callback function for Debounce,called every after 200ms
     77           * @param   none
     78           * @return  None
     79           * ***********************************************************/
     80          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          void leddebounceCbk(uint8 timerId)
   \                     leddebounceCbk:
     82          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     83            debounce = true;
   \   000004   90....       MOV       DPTR,#debounce
   \   000007   7401         MOV       A,#0x1
   \   000009   F0           MOVX      @DPTR,A
     84          }
   \   00000A   80..         SJMP      ?Subroutine0
     85          
     86          //********LED and button initilization

   \                                 In  segment XDATA_I, align 1, keep-with-next
     87          extern KeusGPIOPin ledPin1 = {0, 0, GPIO_OUTPUT, false, GPIO_LOW};
   \                     ledPin1:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin1>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     88          extern KeusGPIOPin ledPin2 = {0, 1, GPIO_OUTPUT, false, GPIO_LOW};
   \                     ledPin2:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin2>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          extern KeusGPIOPin ledPin3 = {0, 4, GPIO_OUTPUT, false, GPIO_LOW};
   \                     ledPin3:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin3>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     90          extern KeusGPIOPin ledPin4 = {0, 5, GPIO_OUTPUT, false, GPIO_LOW};
   \                     ledPin4:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin4>`
   \   000005                REQUIRE __INIT_XDATA_I
     91          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          extern KeusGPIOPin buttonPin1 = {1, 2, GPIO_INPUT, true, GPIO_LOW};
   \                     buttonPin1:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin1>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     93          extern KeusGPIOPin buttonPin2 = {1, 3, GPIO_INPUT, true, GPIO_LOW};
   \                     buttonPin2:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin2>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     94          extern KeusGPIOPin buttonPin3 = {1, 4, GPIO_INPUT, true, GPIO_LOW};
   \                     buttonPin3:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin3>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     95          extern KeusGPIOPin buttonPin4 = {1, 5, GPIO_INPUT, true, GPIO_LOW};
   \                     buttonPin4:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin4>`
   \   000005                REQUIRE __INIT_XDATA_I
     96          
     97          /*************************************************************
     98           * @fn      KEUS_init_fnc
     99           * @brief   All Initilization
    100           * @return  None
    101           * @param   None  
    102           * ***********************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    103          void KEUS_init_fnc(void)
   \                     KEUS_init_fnc:
    104          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    105          
    106            //****Setting GPIOs direction and edge
    107            KeusGPIOSetDirection(&ledPin1);
   \   000005                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000005   7A..         MOV       R2,#ledPin1 & 0xff
   \   000007   7B..         MOV       R3,#(ledPin1 >> 8) & 0xff
   \   000009   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    108            KeusGPIOSetDirection(&buttonPin1);
   \   00000C                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00000C   7A..         MOV       R2,#buttonPin1 & 0xff
   \   00000E   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   000010   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    109            KeusGPIOEdgeConfiguration(&buttonPin1, GPIO_FALLING_EDGE);
   \   000013                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000013   7902         MOV       R1,#0x2
   \   000015   7A..         MOV       R2,#buttonPin1 & 0xff
   \   000017   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   000019   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    110            KeusGPIOReadPinValue(&buttonPin1);
   \   00001C                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   00001C   7A..         MOV       R2,#buttonPin1 & 0xff
   \   00001E   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   000020   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    111            KeusGPIOSetPinValue(&ledPin1);
   \   000023                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000023   7A..         MOV       R2,#ledPin1 & 0xff
   \   000025   7B..         MOV       R3,#(ledPin1 >> 8) & 0xff
   \   000027   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    112          
    113            KeusGPIOSetDirection(&ledPin2);
   \   00002A                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00002A   7A..         MOV       R2,#ledPin2 & 0xff
   \   00002C   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \   00002E   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    114            KeusGPIOSetDirection(&buttonPin2);
   \   000031                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000031   7A..         MOV       R2,#buttonPin2 & 0xff
   \   000033   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   000035   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    115            KeusGPIOEdgeConfiguration(&buttonPin2, GPIO_RISING_EDGE);
   \   000038                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000038   7901         MOV       R1,#0x1
   \   00003A   7A..         MOV       R2,#buttonPin2 & 0xff
   \   00003C   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   00003E   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    116            KeusGPIOReadPinValue(&buttonPin2);
   \   000041                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   000041   7A..         MOV       R2,#buttonPin2 & 0xff
   \   000043   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   000045   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    117            KeusGPIOSetPinValue(&ledPin2);
   \   000048                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000048   7A..         MOV       R2,#ledPin2 & 0xff
   \   00004A   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \   00004C   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    118          
    119            KeusGPIOSetDirection(&ledPin3);
   \   00004F                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00004F   7A..         MOV       R2,#ledPin3 & 0xff
   \   000051   7B..         MOV       R3,#(ledPin3 >> 8) & 0xff
   \   000053   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    120            KeusGPIOSetDirection(&buttonPin3);
   \   000056                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000056   7A..         MOV       R2,#buttonPin3 & 0xff
   \   000058   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   00005A   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    121            KeusGPIOEdgeConfiguration(&buttonPin3, GPIO_RISING_EDGE);
   \   00005D                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   00005D   7901         MOV       R1,#0x1
   \   00005F   7A..         MOV       R2,#buttonPin3 & 0xff
   \   000061   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   000063   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    122            KeusGPIOReadPinValue(&buttonPin3);
   \   000066                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   000066   7A..         MOV       R2,#buttonPin3 & 0xff
   \   000068   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   00006A   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    123            KeusGPIOSetPinValue(&ledPin3);
   \   00006D                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   00006D   7A..         MOV       R2,#ledPin3 & 0xff
   \   00006F   7B..         MOV       R3,#(ledPin3 >> 8) & 0xff
   \   000071   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    124          
    125            KeusGPIOSetDirection(&ledPin4);
   \   000074                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000074   7A..         MOV       R2,#ledPin4 & 0xff
   \   000076   7B..         MOV       R3,#(ledPin4 >> 8) & 0xff
   \   000078   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    126            KeusGPIOSetDirection(&buttonPin4);
   \   00007B                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00007B   7A..         MOV       R2,#buttonPin4 & 0xff
   \   00007D   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   00007F   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    127            KeusGPIOEdgeConfiguration(&buttonPin4, GPIO_RISING_EDGE);
   \   000082                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000082   7901         MOV       R1,#0x1
   \   000084   7A..         MOV       R2,#buttonPin4 & 0xff
   \   000086   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   000088   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    128            KeusGPIOReadPinValue(&buttonPin4);
   \   00008B                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   00008B   7A..         MOV       R2,#buttonPin4 & 0xff
   \   00008D   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   00008F   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    129            KeusGPIOSetPinValue(&ledPin4);
   \   000092                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000092   7A..         MOV       R2,#ledPin4 & 0xff
   \   000094   7B..         MOV       R3,#(ledPin4 >> 8) & 0xff
   \   000096   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    130          
    131            //*****Enabling Interrupts
    132            KeusGPIOInterruptEnable(&buttonPin1);
   \   000099                ; Setup parameters for call to function KeusGPIOInterruptEnable
   \   000099   7A..         MOV       R2,#buttonPin1 & 0xff
   \   00009B   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   00009D   12....       LCALL     `??KeusGPIOInterruptEnable::?relay`; Banked call to: KeusGPIOInterruptEnable
    133            KeusGPIOInterruptEnable(&buttonPin2);
   \   0000A0                ; Setup parameters for call to function KeusGPIOInterruptEnable
   \   0000A0   7A..         MOV       R2,#buttonPin2 & 0xff
   \   0000A2   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   0000A4   12....       LCALL     `??KeusGPIOInterruptEnable::?relay`; Banked call to: KeusGPIOInterruptEnable
    134            KeusGPIOInterruptEnable(&buttonPin3);
   \   0000A7                ; Setup parameters for call to function KeusGPIOInterruptEnable
   \   0000A7   7A..         MOV       R2,#buttonPin3 & 0xff
   \   0000A9   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   0000AB   12....       LCALL     `??KeusGPIOInterruptEnable::?relay`; Banked call to: KeusGPIOInterruptEnable
    135            KeusGPIOInterruptEnable(&buttonPin4);
   \   0000AE                ; Setup parameters for call to function KeusGPIOInterruptEnable
   \   0000AE   7A..         MOV       R2,#buttonPin4 & 0xff
   \   0000B0   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   0000B2   12....       LCALL     `??KeusGPIOInterruptEnable::?relay`; Banked call to: KeusGPIOInterruptEnable
    136          
    137            //******Enabling Timer and Debounce
    138            KeusTimerUtilAddTimer(&intervalTimer);
   \   0000B5                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   0000B5   7A..         MOV       R2,#intervalTimer & 0xff
   \   0000B7   7B..         MOV       R3,#(intervalTimer >> 8) & 0xff
   \   0000B9   12....       LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
    139            KeusTimerUtilAddTimer(&debounceTimer);
   \   0000BC                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   0000BC   7A..         MOV       R2,#debounceTimer & 0xff
   \   0000BE   7B..         MOV       R3,#(debounceTimer >> 8) & 0xff
   \   0000C0   12....       LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
    140          
    141            // init_status = KeusThemeSwitchMiniMemoryInit();
    142            // read_status = KeusThemeSwitchMiniReadConfigDataIntoMemory();
    143            //*****Timer Initialization
    144            KeusTimerUtilInit();
   \   0000C3                ; Setup parameters for call to function KeusTimerUtilInit
   \   0000C3   12....       LCALL     `??KeusTimerUtilInit::?relay`; Banked call to: KeusTimerUtilInit
    145            //******Timer Start
    146            KeusTimerUtilStartTimer();
   \   0000C6                ; Setup parameters for call to function KeusTimerUtilStartTimer
   \   0000C6   12....       LCALL     `??KeusTimerUtilStartTimer::?relay`; Banked call to: KeusTimerUtilStartTimer
    147          
    148            // //*****UART Initialization
    149            initUart0();
   \   0000C9                ; Setup parameters for call to function initUart0
   \   0000C9   12....       LCALL     `??initUart0::?relay`; Banked call to: initUart0
    150          
    151            HalUARTWrite(HAL_UART_PORT_0, "KEUS INIT", (byte)osal_strlen("KEUS INIT"));
   \   0000CC                ; Setup parameters for call to function osal_strlen
   \   0000CC   7A..         MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
   \   0000CE   7B..         MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
   \   0000D0   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000D3   8A..         MOV       ?V0,R2
   \   0000D5                ; Setup parameters for call to function HalUARTWrite
   \   0000D5   AC..         MOV       R4,?V0
   \   0000D7   7D00         MOV       R5,#0x0
   \   0000D9   7A..         MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
   \   0000DB   7B..         MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
   \   0000DD   7900         MOV       R1,#0x0
   \   0000DF   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    152          
    153            
    154          
    155            //********At bootup send config and switch state to mini-58
    156            //uart_send_switch_sate_ack(UART1,0x04,4,0x0B);
    157          
    158            KEUS_loop();
   \                     ??KEUS_init_fnc_0:
   \   0000E2                ; Setup parameters for call to function HalUARTPoll
   \   0000E2   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
   \   0000E5   80FB         SJMP      ??KEUS_init_fnc_0
    159          }
    160          
    161          /**********************************************************************
    162           * @fn      KEUS_loop
    163           * @brief   Infinite loop
    164           * @return  No return after this
    165           * @param   None
    166           * *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    167          void KEUS_loop(void)
   \                     KEUS_loop:
    168          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    169            while (1)
    170            {
    171              HalUARTPoll();
   \                     ??KEUS_loop_0:
   \   000004                ; Setup parameters for call to function HalUARTPoll
   \   000004   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
   \   000007   80FB         SJMP      ??KEUS_loop_0
    172              
    173            }
    174          }
    175          
    176          /*******************************************************************************
    177           * @fn      HAL_ISR_FUNCTION
    178           * @brief   ISR for button pressed
    179           * ****************************************************************************/
    180          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    181          HAL_ISR_FUNCTION(halKeusPort1Isr, P1INT_VECTOR)
   \                     halKeusPort1Isr:
    182          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   C0E0         PUSH      A
   \   000002   74F1         MOV       A,#-0xf
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    183            HAL_ENTER_ISR();
   \   000007   A2AF         MOV       C,0xa8.7
   \   000009   E4           CLR       A
   \   00000A   33           RLC       A
   \   00000B   FE           MOV       R6,A
   \   00000C   D2AF         SETB      0xa8.7
    184            if (debounce)
   \   00000E   90....       MOV       DPTR,#debounce
   \   000011   E0           MOVX      A,@DPTR
   \   000012   7003         JNZ       $+5
   \   000014   02....       LJMP      ??halKeusPort1Isr_0
    185            {
    186              debounce = false;
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
    187              if (P1IFG & BV(buttonPin1.bit))
   \   000019   75..01       MOV       ?V0,#0x1
   \   00001C   F5..         MOV       ?V1,A
   \   00001E   90....       MOV       DPTR,#buttonPin1 + 1
   \   000021   E0           MOVX      A,@DPTR
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?S_SHL
   \   000027   E5..         MOV       A,?V0
   \   000029   558A         ANL       A,0x8a
   \   00002B   6026         JZ        ??halKeusPort1Isr_1
    188              {
    189                ledPin1.state = KeusGPIOToggledState(ledPin1.state); //toggle led at button pressed
   \   00002D                ; Setup parameters for call to function KeusGPIOToggledState
   \   00002D   90....       MOV       DPTR,#ledPin1 + 4
   \   000030   12....       LCALL     ?Subroutine2
   \                     ??CrossCallReturnLabel_3:
   \   000033   90....       MOV       DPTR,#ledPin1 + 4
   \   000036   F0           MOVX      @DPTR,A
    190                KeusGPIOSetPinValue(&ledPin1);
   \   000037                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000037   7A..         MOV       R2,#ledPin1 & 0xff
   \   000039   7B..         MOV       R3,#(ledPin1 >> 8) & 0xff
   \   00003B   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    191               // config_data[0].valid_state =  ledPin1.state;
    192                button_state = !ledPin1.state;
   \   00003E   90....       MOV       DPTR,#ledPin1 + 4
   \   000041   E0           MOVX      A,@DPTR
   \   000042   90....       MOV       DPTR,#button_state
   \   000045   7004         JNZ       ??halKeusPort1Isr_2
   \   000047   7401         MOV       A,#0x1
   \   000049   8001         SJMP      ??halKeusPort1Isr_3
   \                     ??halKeusPort1Isr_2:
   \   00004B   E4           CLR       A
   \                     ??halKeusPort1Isr_3:
   \   00004C   F0           MOVX      @DPTR,A
    193                button_Pressed++;
   \   00004D   90....       MOV       DPTR,#button_Pressed
   \   000050   E0           MOVX      A,@DPTR
   \   000051   04           INC       A
   \   000052   F0           MOVX      @DPTR,A
    194          
    195              }
    196          
    197              if (P1IFG & BV(buttonPin2.bit))
   \                     ??halKeusPort1Isr_1:
   \   000053   75..01       MOV       ?V0,#0x1
   \   000056   75..00       MOV       ?V1,#0x0
   \   000059   90....       MOV       DPTR,#buttonPin2 + 1
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?S_SHL
   \   000062   E5..         MOV       A,?V0
   \   000064   558A         ANL       A,0x8a
   \   000066   6025         JZ        ??halKeusPort1Isr_4
    198              {
    199                ledPin2.state = KeusGPIOToggledState(ledPin2.state);
   \   000068                ; Setup parameters for call to function KeusGPIOToggledState
   \   000068   90....       MOV       DPTR,#ledPin2 + 4
   \   00006B   12....       LCALL     ?Subroutine2
   \                     ??CrossCallReturnLabel_4:
   \   00006E   90....       MOV       DPTR,#ledPin2 + 4
   \   000071   F0           MOVX      @DPTR,A
    200                KeusGPIOSetPinValue(&ledPin2);
   \   000072                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000072   7A..         MOV       R2,#ledPin2 & 0xff
   \   000074   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \   000076   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    201                //config_data[1].valid_state =  ledPin2.state;
    202                button_state = !ledPin2.state;
   \   000079   90....       MOV       DPTR,#ledPin2 + 4
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   90....       MOV       DPTR,#button_state
   \   000080   7004         JNZ       ??halKeusPort1Isr_5
   \   000082   7401         MOV       A,#0x1
   \   000084   8001         SJMP      ??halKeusPort1Isr_6
   \                     ??halKeusPort1Isr_5:
   \   000086   E4           CLR       A
   \                     ??halKeusPort1Isr_6:
   \   000087   12....       LCALL     ?Subroutine1
    203                event_t = 0x10;
    204                button_Pressed = SWITCH_2;
    205          
    206              }
   \                     ??CrossCallReturnLabel_0:
   \   00008A   7402         MOV       A,#0x2
   \   00008C   F0           MOVX      @DPTR,A
    207          
    208              if (P1IFG & BV(buttonPin3.bit))
   \                     ??halKeusPort1Isr_4:
   \   00008D   75..01       MOV       ?V0,#0x1
   \   000090   75..00       MOV       ?V1,#0x0
   \   000093   90....       MOV       DPTR,#buttonPin3 + 1
   \   000096   E0           MOVX      A,@DPTR
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?S_SHL
   \   00009C   E5..         MOV       A,?V0
   \   00009E   558A         ANL       A,0x8a
   \   0000A0   6025         JZ        ??halKeusPort1Isr_7
    209              {
    210                ledPin3.state = KeusGPIOToggledState(ledPin3.state);
   \   0000A2                ; Setup parameters for call to function KeusGPIOToggledState
   \   0000A2   90....       MOV       DPTR,#ledPin3 + 4
   \   0000A5   12....       LCALL     ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   0000A8   90....       MOV       DPTR,#ledPin3 + 4
   \   0000AB   F0           MOVX      @DPTR,A
    211                KeusGPIOSetPinValue(&ledPin3);
   \   0000AC                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   0000AC   7A..         MOV       R2,#ledPin3 & 0xff
   \   0000AE   7B..         MOV       R3,#(ledPin3 >> 8) & 0xff
   \   0000B0   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    212                //config_data[2].valid_state =  ledPin3.state;
    213                button_state = !ledPin3.state;
   \   0000B3   90....       MOV       DPTR,#ledPin3 + 4
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   90....       MOV       DPTR,#button_state
   \   0000BA   7004         JNZ       ??halKeusPort1Isr_8
   \   0000BC   7401         MOV       A,#0x1
   \   0000BE   8001         SJMP      ??halKeusPort1Isr_9
   \                     ??halKeusPort1Isr_8:
   \   0000C0   E4           CLR       A
   \                     ??halKeusPort1Isr_9:
   \   0000C1   12....       LCALL     ?Subroutine1
    214                event_t = 0x10;
    215                button_Pressed = SWITCH_3;
    216              }
   \                     ??CrossCallReturnLabel_1:
   \   0000C4   7403         MOV       A,#0x3
   \   0000C6   F0           MOVX      @DPTR,A
    217              if (P1IFG & BV(buttonPin4.bit))
   \                     ??halKeusPort1Isr_7:
   \   0000C7   75..01       MOV       ?V0,#0x1
   \   0000CA   75..00       MOV       ?V1,#0x0
   \   0000CD   90....       MOV       DPTR,#buttonPin4 + 1
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   78..         MOV       R0,#?V0
   \   0000D3   12....       LCALL     ?S_SHL
   \   0000D6   E5..         MOV       A,?V0
   \   0000D8   558A         ANL       A,0x8a
   \   0000DA   6025         JZ        ??halKeusPort1Isr_0
    218              {
    219                ledPin4.state = KeusGPIOToggledState(ledPin4.state);
   \   0000DC                ; Setup parameters for call to function KeusGPIOToggledState
   \   0000DC   90....       MOV       DPTR,#ledPin4 + 4
   \   0000DF   12....       LCALL     ?Subroutine2
   \                     ??CrossCallReturnLabel_6:
   \   0000E2   90....       MOV       DPTR,#ledPin4 + 4
   \   0000E5   F0           MOVX      @DPTR,A
    220                KeusGPIOSetPinValue(&ledPin4);
   \   0000E6                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   0000E6   7A..         MOV       R2,#ledPin4 & 0xff
   \   0000E8   7B..         MOV       R3,#(ledPin4 >> 8) & 0xff
   \   0000EA   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    221                //config_data[3].valid_state =  ledPin4.state;
    222                button_state = !ledPin4.state;
   \   0000ED   90....       MOV       DPTR,#ledPin4 + 4
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   90....       MOV       DPTR,#button_state
   \   0000F4   7004         JNZ       ??halKeusPort1Isr_10
   \   0000F6   7401         MOV       A,#0x1
   \   0000F8   8001         SJMP      ??halKeusPort1Isr_11
   \                     ??halKeusPort1Isr_10:
   \   0000FA   E4           CLR       A
   \                     ??halKeusPort1Isr_11:
   \   0000FB   12....       LCALL     ?Subroutine1
    223                event_t = 0x10;
    224                button_Pressed = SWITCH_4;
    225          
    226          
    227              }
    228            }
   \                     ??CrossCallReturnLabel_2:
   \   0000FE   7404         MOV       A,#0x4
   \   000100   F0           MOVX      @DPTR,A
    229          
    230            /*
    231              Clear the CPU interrupt flag for Port_0
    232              PxIFG has to be cleared before PxIF
    233            */
    234            P1IFG = 0;
   \                     ??halKeusPort1Isr_0:
   \   000101   758A00       MOV       0x8a,#0x0
    235            P1IF = 0;
   \   000104   C2EB         CLR       0xe8.3
    236          
    237            CLEAR_SLEEP_MODE();
    238            HAL_EXIT_ISR();
   \   000106   EE           MOV       A,R6
   \   000107   A2E0         MOV       C,0xE0 /* A   */.0
   \   000109   92AF         MOV       0xa8.7,C
    239          }
   \   00010B   7F02         MOV       R7,#0x2
   \   00010D   02....       LJMP      ?INTERRUPT_LEAVE_XSP
   \   000110                REQUIRE _A_IEN0
   \   000110                REQUIRE P1IFG
   \   000110                REQUIRE _A_IRCON2

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??KeusGPIOToggledState::?relay`; Banked call to: KeusGPIOToggledState
   \   000005   E9           MOV       A,R1
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#event_t
   \   000004   7410         MOV       A,#0x10
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   90....       MOV       DPTR,#button_Pressed
   \   00000D   22           RET

   \                                 In  segment INTVEC, offset 0x7b, root
   \                     `??halKeusPort1Isr::??INTVEC 123`:
   \   00007B   02....       LJMP       (halKeusPort1Isr)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for debounceTimer>`:
   \   000000   ....         DW `??leddebounceCbk::?relay`
   \   000002   C800         DW 200
   \   000004   01           DB 1
   \   000005   FF           DB -1
   \   000006   0000         DW 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for intervalTimer>`:
   \   000000   ....         DW `??ledTimerCbk::?relay`
   \   000002   6400         DW 100
   \   000004   01           DB 1
   \   000005   FF           DB -1
   \   000006   0000         DW 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin1>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin2>`:
   \   000000   00           DB 0
   \   000001   01           DB 1
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin3>`:
   \   000000   00           DB 0
   \   000001   04           DB 4
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin4>`:
   \   000000   00           DB 0
   \   000001   05           DB 5
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin1>`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin2>`:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin3>`:
   \   000000   01           DB 1
   \   000001   04           DB 4
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin4>`:
   \   000000   01           DB 1
   \   000001   05           DB 5
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEUS INIT">`:
   \   000000   4B455553     DB "KEUS INIT"
   \            20494E49
   \            5400    
    240          
    241          //*************************NVIC MEMORY
    242          
    243          // /*******************************************************
    244          //  * @fn          KeusThemeSwitchMiniMemoryInit
    245          //  * @brief       nvic memory init
    246          //  * @return
    247          //  * @param
    248          //  * *****************************************************/
    249          // bool KeusThemeSwitchMiniMemoryInit(void)
    250          // {
    251          //   //  for (uint8 i = 0; i < CLICK_TYPES; i++)
    252          //   //  {
    253          //   //    themeManager.btnThemeMap[i] = 255;
    254          //   //  }
    255          
    256          //   uint8 res = osal_nv_item_init(NVIC_MEMORY_POSITION, sizeof(config_data), (void *)config_data);
    257          
    258          //   if (res == SUCCESS || res == NV_ITEM_UNINIT)
    259          //   {
    260          //     return true;
    261          //   }
    262          //   else
    263          //   {
    264          //     return false;
    265          //   }
    266          // }
    267          // /*******************************************************
    268          //  * @fn      KeusThemeSwitchMiniReadConfigDataIntoMemory
    269          //  * @brief   NVIC memory read 
    270          //  * @return
    271          //  * @param  
    272          //  * ****************************************************/
    273          // bool KeusThemeSwitchMiniReadConfigDataIntoMemory(void)
    274          // {
    275          //   uint8 res = osal_nv_read(NVIC_MEMORY_POSITION, 0, sizeof(config_data), (void *)config_data);
    276          
    277          //   if (res == SUCCESS)
    278          //   {
    279          //     return true;
    280          //   }
    281          //   else
    282          //   {
    283          //     return false;
    284          //   }
    285          // }
    286          // /********************************************************
    287          //  * @fn      KeusThemeSwitchMiniWriteConfigDataIntoMemory
    288          //  * @brief   NVIC Memory write
    289          //  * @return
    290          //  * @param
    291          //  * *****************************************************/
    292          // bool KeusThemeSwitchMiniWriteConfigDataIntoMemory(void)
    293          // {
    294          //   uint8 res = osal_nv_write(NVIC_MEMORY_POSITION, 0, sizeof(config_data), (void *)config_data);
    295          
    296          //   if (res == SUCCESS)
    297          //   {
    298          //     return true;
    299          //   }
    300          //   else
    301          //   {
    302          //     return false;
    303          //   }
    304          // }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   KEUS_init_fnc
        0     10   -> HalUARTPoll
        0     10   -> HalUARTWrite
        0     10   -> KeusGPIOEdgeConfiguration
        0     10   -> KeusGPIOInterruptEnable
        0     10   -> KeusGPIOReadPinValue
        0     10   -> KeusGPIOSetDirection
        0     10   -> KeusGPIOSetPinValue
        0     10   -> KeusTimerUtilAddTimer
        0     10   -> KeusTimerUtilInit
        0     10   -> KeusTimerUtilStartTimer
        0     10   -> initUart0
        0     10   -> osal_strlen
      2      0   KEUS_loop
        2      0   -> HalUARTPoll
      0     15   halKeusPort1Isr
        0     15   -> KeusGPIOSetPinValue
        0     15   -> KeusGPIOToggledState
      2      0   ledTimerCbk
        2      0   -> HalUARTWrite
      2      0   leddebounceCbk


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "KEUS INIT">
       5  ?<Initializer for buttonPin1>
       5  ?<Initializer for buttonPin2>
       5  ?<Initializer for buttonPin3>
       5  ?<Initializer for buttonPin4>
       8  ?<Initializer for debounceTimer>
       8  ?<Initializer for intervalTimer>
       5  ?<Initializer for ledPin1>
       5  ?<Initializer for ledPin2>
       5  ?<Initializer for ledPin3>
       5  ?<Initializer for ledPin4>
       7  ?Subroutine0
      14  ?Subroutine1
       7  ?Subroutine2
     231  KEUS_init_fnc
       9  KEUS_loop
       1  P1IFG
       1  _A_IEN0
       1  _A_IRCON2
       5  buttonPin1
       5  buttonPin2
       5  buttonPin3
       5  buttonPin4
       1  button_Pressed
       1  button_state
       1  count
       1  count1
       1  count2
       1  debounce
       8  debounceTimer
     272  halKeusPort1Isr
       3  halKeusPort1Isr::??INTVEC 123
       1  init_status
       8  intervalTimer
       5  ledPin1
       5  ledPin2
       5  ledPin3
       5  ledPin4
      35  ledTimerCbk
      12  leddebounceCbk
       1  read_status
       1  write_status
      24  -- Other

 
 294 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   3 bytes in segment INTVEC
 293 bytes in segment NEAR_CODE
   3 bytes in segment SFR_AN
  56 bytes in segment XDATA_I
  56 bytes in segment XDATA_ID
  10 bytes in segment XDATA_ROM_C
   9 bytes in segment XDATA_Z
 
 373 bytes of CODE     memory (+ 3 bytes shared)
  10 bytes of CONST    memory
   0 bytes of DATA     memory (+ 3 bytes shared)
 294 bytes of HUGECODE memory
  65 bytes of XDATA    memory

Errors: none
Warnings: none
