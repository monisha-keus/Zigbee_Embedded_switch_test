###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               06/Jan/2020  14:52:57
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
#    Command line       =  
#        -f C:\Users\Monisha\AppData\Local\Temp\EWB3EC.tmp
#        (D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        HAL_KEY=FALSE -D HAL_LCD=FALSE -D HAL_LED=FALSE -D HAL_UART=TRUE -D
#        HAL_UART_ISR=1 -D HAL_UART_ISR_RX_MAX=64 -D HAL_UART_ISR_TX_MAX=64 -D
#        HAL_UART_DMA=2 -D HAL_UART_DMA_RX_MAX=64 -D HAL_UART_DMA_TX_MAX=64 -D
#        NWK_MAX_DEVICE_LIST=5 -D NWK_LINK_STATUS_PERIOD=50 -D
#        INT_HEAP_LEN=3172 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D
#        MULTICAST_ENABLED=FALSE -D APS_MAX_GROUPS=4 -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_READ -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -lC
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List
#        -lA
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\Source\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\Source\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\keus\embeddedswitch\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\keus\common\
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List\keus_task.lst
#    Object file        =  
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\Obj\keus_task.r51
#
###############################################################################

D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
      1          
      2          /********************************************************
      3           * @fn  This function is to declare all GPIOs
      4           * *****************************************************/
      5          
      6          #include "keus_task.h"
      7          
      8          #define UART0     HAL_UART_PORT_0
      9          //#define UART1     HAL_UART_PORT_1
     10          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     11          bool debounce = false;
   \                     debounce:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     12          //bool toggle = false, toggle1 = false, toggle3 = false;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     13          uint8 count = 0, count1 = 0, count2 = 0;//led_state;
   \                     count:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     count1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     count2:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     14          uint8 button_Pressed =0,button_state = 0;
   \                     button_Pressed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     button_state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     15          
     16          void ledTimerCbk(uint8 timerId);
     17          void leddebounceCbk(uint8 timerId);
     18          //void check_sw_pressed(void);
     19          
     20          
     21          typedef void (*KeusBtnCbk)(void);
     22          typedef struct {
     23            uint16 btnDelay;
     24            uint16 elapsedTime;
     25            KeusBtnCbk btnCbk;
     26          } KeusBtnManager;
     27          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     28          KeusBtnManager buttonManager;
   \                     buttonManager:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     29          
     30          //Debounce configuration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     31          KeusTimerConfig debounceTimer = {
   \                     debounceTimer:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for debounceTimer>`
   \   000008                REQUIRE __INIT_XDATA_I
     32              &leddebounceCbk,
     33              200,
     34              true,
     35              -1,
     36              0};
     37          
     38          //Timer Configuration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     39          KeusTimerConfig intervalTimer = {
   \                     intervalTimer:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for intervalTimer>`
   \   000008                REQUIRE __INIT_XDATA_I
     40              &ledTimerCbk,
     41              100,
     42              true,
     43              -1,
     44              0};
     45          /****************************************************************************
     46           * **************************FUNCTION DECLARATION****************************
     47           * ***************************************************************************/
     48          void KEUS_init_fnc(void);
     49          void KEUS_loop(void);
     50          
     51          //********LED and button initilization

   \                                 In  segment XDATA_I, align 1, keep-with-next
     52          extern KeusGPIOPin ledPin1 = {0, 0, GPIO_OUTPUT, false, LED_OFF};
   \                     ledPin1:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin1>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     53          extern KeusGPIOPin ledPin2 = {0, 1, GPIO_OUTPUT, false, LED_OFF};
   \                     ledPin2:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin2>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     54          extern KeusGPIOPin ledPin3 = {0, 4, GPIO_OUTPUT, false, LED_OFF};
   \                     ledPin3:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin3>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     55          extern KeusGPIOPin ledPin4 = {0, 5, GPIO_OUTPUT, false, LED_OFF};
   \                     ledPin4:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin4>`
   \   000005                REQUIRE __INIT_XDATA_I
     56          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     57          extern KeusGPIOPin buttonPin1 = {1, 2, GPIO_INPUT, true, LED_OFF};
   \                     buttonPin1:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin1>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     58          extern KeusGPIOPin buttonPin2 = {1, 3, GPIO_INPUT, true, LED_OFF};
   \                     buttonPin2:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin2>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     59          extern KeusGPIOPin buttonPin3 = {1, 4, GPIO_INPUT, true, LED_OFF};
   \                     buttonPin3:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin3>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     60          extern KeusGPIOPin buttonPin4 = {1, 5, GPIO_INPUT, true, LED_OFF};
   \                     buttonPin4:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin4>`
   \   000005                REQUIRE __INIT_XDATA_I
     61          /*******************************************************
     62           * @brief  Callback function for timer
     63                     Called every after 100ms
     64          
     65          *********************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     66          void ledTimerCbk(uint8 timerId)
   \                     ledTimerCbk:
     67          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     68            KeusGPIOReadPinValue(&buttonPin1);
   \   000004                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   000004   7A..         MOV       R2,#buttonPin1 & 0xff
   \   000006   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   000008   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
     69            if (buttonPin1.state == BUTTON_ACTIVE) {
   \   00000B   90....       MOV       DPTR,#buttonPin1 + 4
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   90....       MOV       DPTR,#buttonManager + 2
   \   000012   704D         JNZ       ??ledTimerCbk_0
     70              buttonManager.elapsedTime += KEUS_EMBEDDEDSWITCH_BUTTON_POLL_TIME;
   \   000014   E0           MOVX      A,@DPTR
   \   000015   24F4         ADD       A,#-0xc
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   3401         ADDC      A,#0x1
   \   00001C   F0           MOVX      @DPTR,A
     71              count++;
   \   00001D   90....       MOV       DPTR,#count
   \   000020   E0           MOVX      A,@DPTR
   \   000021   04           INC       A
   \   000022   F0           MOVX      @DPTR,A
     72              if(count >= 100){
   \   000023   C3           CLR       C
   \   000024   9464         SUBB      A,#0x64
   \   000026   4006         JC        ??ledTimerCbk_1
     73                ledPin1.state = LED_ON;
   \   000028   90....       MOV       DPTR,#ledPin1 + 4
   \   00002B   E4           CLR       A
   \   00002C   8029         SJMP      ??ledTimerCbk_2
     74                KeusGPIOSetPinValue(&ledPin1);
     75              }
     76              else if (buttonManager.elapsedTime >= buttonManager.btnDelay) {
   \                     ??ledTimerCbk_1:
   \   00002E   90....       MOV       DPTR,#buttonManager
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F8           MOV       R0,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   7583..       MOV       DPH,#((buttonManager + 2) >> 8) & 0xff
   \   000039   7582..       MOV       DPL,#(buttonManager + 2) & 0xff
   \   00003C   C3           CLR       C
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   98           SUBB      A,R0
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   99           SUBB      A,R1
   \   000042   4025         JC        ??ledTimerCbk_3
     77                buttonManager.elapsedTime = 0;
   \   000044   90....       MOV       DPTR,#buttonManager + 2
   \   000047   E4           CLR       A
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   F0           MOVX      @DPTR,A
     78                ledPin1.state = KeusGPIOToggledState(ledPin1.state); //toggle led at button pressed
   \   00004B                ; Setup parameters for call to function KeusGPIOToggledState
   \   00004B   90....       MOV       DPTR,#ledPin1 + 4
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F9           MOV       R1,A
   \   000050   12....       LCALL     `??KeusGPIOToggledState::?relay`; Banked call to: KeusGPIOToggledState
   \   000053   E9           MOV       A,R1
   \   000054   90....       MOV       DPTR,#ledPin1 + 4
   \                     ??ledTimerCbk_2:
   \   000057   F0           MOVX      @DPTR,A
     79                KeusGPIOSetPinValue(&ledPin1);
   \   000058                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000058   7A..         MOV       R2,#ledPin1 & 0xff
   \   00005A   7B..         MOV       R3,#(ledPin1 >> 8) & 0xff
   \   00005C   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
   \   00005F   8008         SJMP      ??ledTimerCbk_3
     80              }
     81            } 
     82            else {
     83              buttonManager.elapsedTime = 0;
   \                     ??ledTimerCbk_0:
   \   000061   E4           CLR       A
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   F0           MOVX      @DPTR,A
     84              count = 0;
   \   000065   90....       MOV       DPTR,#count
   \   000068   F0           MOVX      @DPTR,A
     85            }
     86          }
   \                     ??ledTimerCbk_3:
   \   000069                REQUIRE ?Subroutine0
   \   000069                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
     87          
     88          /**************************************************************
     89           * @fn      leddebounceCbk
     90           * @brief   callback function for Debounce,called every after 200ms
     91           * @param   none
     92           * @return  None
     93           * ***********************************************************/
     94          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     95          void leddebounceCbk(uint8 timerId)
   \                     leddebounceCbk:
     96          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     97            debounce = true;
   \   000004   90....       MOV       DPTR,#debounce
   \   000007   7401         MOV       A,#0x1
   \   000009   F0           MOVX      @DPTR,A
     98          }
   \   00000A   80..         SJMP      ?Subroutine0
     99          
    100          
    101          
    102          /*************************************************************
    103           * @fn      KEUS_init_fnc
    104           * @brief   All Initilization
    105           * @return  None
    106           * @param   None  
    107           * ***********************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    108          void KEUS_init_fnc(void)
   \                     KEUS_init_fnc:
    109          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    110          
    111            //****Setting GPIOs direction and edge
    112            KeusGPIOSetDirection(&ledPin1);
   \   000005                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000005   7A..         MOV       R2,#ledPin1 & 0xff
   \   000007   7B..         MOV       R3,#(ledPin1 >> 8) & 0xff
   \   000009   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    113            KeusGPIOSetDirection(&buttonPin1);
   \   00000C                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00000C   7A..         MOV       R2,#buttonPin1 & 0xff
   \   00000E   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   000010   12....       LCALL     ?Subroutine1 & 0xFFFF
    114            KeusGPIOEdgeConfiguration(&buttonPin1, GPIO_RISING_EDGE);
   \                     ??CrossCallReturnLabel_0:
   \   000013   7A..         MOV       R2,#buttonPin1 & 0xff
   \   000015   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   000017   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    115            KeusGPIOReadPinValue(&buttonPin1);
   \   00001A                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   00001A   7A..         MOV       R2,#buttonPin1 & 0xff
   \   00001C   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   00001E   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    116            KeusGPIOSetPinValue(&ledPin1);
   \   000021                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000021   7A..         MOV       R2,#ledPin1 & 0xff
   \   000023   7B..         MOV       R3,#(ledPin1 >> 8) & 0xff
   \   000025   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    117          
    118            KeusGPIOSetDirection(&ledPin2);
   \   000028                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000028   7A..         MOV       R2,#ledPin2 & 0xff
   \   00002A   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \   00002C   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    119            KeusGPIOSetDirection(&buttonPin2);
   \   00002F                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00002F   7A..         MOV       R2,#buttonPin2 & 0xff
   \   000031   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   000033   12....       LCALL     ?Subroutine1 & 0xFFFF
    120            KeusGPIOEdgeConfiguration(&buttonPin2, GPIO_RISING_EDGE);
   \                     ??CrossCallReturnLabel_1:
   \   000036   7A..         MOV       R2,#buttonPin2 & 0xff
   \   000038   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   00003A   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    121            KeusGPIOReadPinValue(&buttonPin2);
   \   00003D                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   00003D   7A..         MOV       R2,#buttonPin2 & 0xff
   \   00003F   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   000041   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    122            KeusGPIOSetPinValue(&ledPin2);
   \   000044                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000044   7A..         MOV       R2,#ledPin2 & 0xff
   \   000046   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \   000048   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    123          
    124            KeusGPIOSetDirection(&ledPin3);
   \   00004B                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00004B   7A..         MOV       R2,#ledPin3 & 0xff
   \   00004D   7B..         MOV       R3,#(ledPin3 >> 8) & 0xff
   \   00004F   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    125            KeusGPIOSetDirection(&buttonPin3);
   \   000052                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000052   7A..         MOV       R2,#buttonPin3 & 0xff
   \   000054   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   000056   12....       LCALL     ?Subroutine1 & 0xFFFF
    126            KeusGPIOEdgeConfiguration(&buttonPin3, GPIO_RISING_EDGE);
   \                     ??CrossCallReturnLabel_2:
   \   000059   7A..         MOV       R2,#buttonPin3 & 0xff
   \   00005B   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   00005D   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    127            KeusGPIOReadPinValue(&buttonPin3);
   \   000060                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   000060   7A..         MOV       R2,#buttonPin3 & 0xff
   \   000062   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   000064   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    128            KeusGPIOSetPinValue(&ledPin3);
   \   000067                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000067   7A..         MOV       R2,#ledPin3 & 0xff
   \   000069   7B..         MOV       R3,#(ledPin3 >> 8) & 0xff
   \   00006B   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    129          
    130            KeusGPIOSetDirection(&ledPin4);
   \   00006E                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00006E   7A..         MOV       R2,#ledPin4 & 0xff
   \   000070   7B..         MOV       R3,#(ledPin4 >> 8) & 0xff
   \   000072   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    131            KeusGPIOSetDirection(&buttonPin4);
   \   000075                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000075   7A..         MOV       R2,#buttonPin4 & 0xff
   \   000077   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   000079   12....       LCALL     ?Subroutine1 & 0xFFFF
    132            KeusGPIOEdgeConfiguration(&buttonPin4, GPIO_RISING_EDGE);
   \                     ??CrossCallReturnLabel_3:
   \   00007C   7A..         MOV       R2,#buttonPin4 & 0xff
   \   00007E   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   000080   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    133            KeusGPIOReadPinValue(&buttonPin4);
   \   000083                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   000083   7A..         MOV       R2,#buttonPin4 & 0xff
   \   000085   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   000087   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    134            KeusGPIOSetPinValue(&ledPin4);
   \   00008A                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   00008A   7A..         MOV       R2,#ledPin4 & 0xff
   \   00008C   7B..         MOV       R3,#(ledPin4 >> 8) & 0xff
   \   00008E   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    135          
    136            //******Enabling Timer and Debounce
    137            KeusTimerUtilAddTimer(&intervalTimer);
   \   000091                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   000091   7A..         MOV       R2,#intervalTimer & 0xff
   \   000093   7B..         MOV       R3,#(intervalTimer >> 8) & 0xff
   \   000095   12....       LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
    138            KeusTimerUtilAddTimer(&debounceTimer);
   \   000098                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   000098   7A..         MOV       R2,#debounceTimer & 0xff
   \   00009A   7B..         MOV       R3,#(debounceTimer >> 8) & 0xff
   \   00009C   12....       LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
    139          
    140            // init_status = KeusThemeSwitchMiniMemoryInit();
    141            // read_status = KeusThemeSwitchMiniReadConfigDataIntoMemory();
    142            //*****Timer Initialization
    143            KeusTimerUtilInit();
   \   00009F                ; Setup parameters for call to function KeusTimerUtilInit
   \   00009F   12....       LCALL     `??KeusTimerUtilInit::?relay`; Banked call to: KeusTimerUtilInit
    144            //******Timer Start
    145            KeusTimerUtilStartTimer();
   \   0000A2                ; Setup parameters for call to function KeusTimerUtilStartTimer
   \   0000A2   12....       LCALL     `??KeusTimerUtilStartTimer::?relay`; Banked call to: KeusTimerUtilStartTimer
    146          
    147            // //*****UART Initialization
    148            initUart0();
   \   0000A5                ; Setup parameters for call to function initUart0
   \   0000A5   12....       LCALL     `??initUart0::?relay`; Banked call to: initUart0
    149          
    150            HalUARTWrite(HAL_UART_PORT_0, "KEUS INIT", (byte)osal_strlen("KEUS INIT"));
   \   0000A8                ; Setup parameters for call to function osal_strlen
   \   0000A8   7A..         MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
   \   0000AA   7B..         MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
   \   0000AC   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000AF   8A..         MOV       ?V0,R2
   \   0000B1                ; Setup parameters for call to function HalUARTWrite
   \   0000B1   AC..         MOV       R4,?V0
   \   0000B3   7D00         MOV       R5,#0x0
   \   0000B5   7A..         MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
   \   0000B7   7B..         MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
   \   0000B9   7900         MOV       R1,#0x0
   \   0000BB   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    151          
    152            
    153          
    154            //********At bootup send config and switch state to mini-58
    155            //uart_send_switch_sate_ack(UART1,0x04,4,0x0B);
    156            buttonManager.btnDelay = KEUS_EMBEDDEDSWITCH_RESET_BTN_TIMEOUT;
   \   0000BE   90....       MOV       DPTR,#buttonManager
   \   0000C1   7410         MOV       A,#0x10
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   7427         MOV       A,#0x27
   \   0000C7   F0           MOVX      @DPTR,A
    157            KEUS_loop();
   \                     ??KEUS_init_fnc_0:
   \   0000C8                ; Setup parameters for call to function HalUARTPoll
   \   0000C8   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
   \   0000CB   80FB         SJMP      ??KEUS_init_fnc_0
    158          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
   \   000003                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000003                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000003                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000003                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000003   7901         MOV       R1,#0x1
   \   000005   22           RET
    159          
    160          /**********************************************************************
    161           * @fn      KEUS_loop
    162           * @brief   Infinite loop
    163           * @return  No return after this
    164           * @param   None
    165           * *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          void KEUS_loop(void)
   \                     KEUS_loop:
    167          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    168            while (1)
    169            {
    170              HalUARTPoll();
   \                     ??KEUS_loop_0:
   \   000004                ; Setup parameters for call to function HalUARTPoll
   \   000004   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
   \   000007   80FB         SJMP      ??KEUS_loop_0
    171              //check_sw_pressed();
    172              
    173            }
    174          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for debounceTimer>`:
   \   000000   ....         DW `??leddebounceCbk::?relay`
   \   000002   C800         DW 200
   \   000004   01           DB 1
   \   000005   FF           DB -1
   \   000006   0000         DW 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for intervalTimer>`:
   \   000000   ....         DW `??ledTimerCbk::?relay`
   \   000002   6400         DW 100
   \   000004   01           DB 1
   \   000005   FF           DB -1
   \   000006   0000         DW 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin1>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin2>`:
   \   000000   00           DB 0
   \   000001   01           DB 1
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin3>`:
   \   000000   00           DB 0
   \   000001   04           DB 4
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin4>`:
   \   000000   00           DB 0
   \   000001   05           DB 5
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin1>`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin2>`:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin3>`:
   \   000000   01           DB 1
   \   000001   04           DB 4
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin4>`:
   \   000000   01           DB 1
   \   000001   05           DB 5
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEUS INIT">`:
   \   000000   4B455553     DB "KEUS INIT"
   \            20494E49
   \            5400    
    175          
    176          // void check_sw_pressed(void){
    177          // if (buttonPin1.state == BUTTON_ACTIVE) {
    178          //     buttonManager.elapsedTime += KEUS_EMBEDDEDSWITCH_BUTTON_POLL_TIME;
    179              
    180          //     if (buttonManager.elapsedTime >= buttonManager.btnDelay) {
    181          //       buttonManager.elapsedTime = 0;
    182          //       ledPin1.state = KeusGPIOToggledState(ledPin1.state); //toggle led at button pressed
    183          //       KeusGPIOSetPinValue(&ledPin1);
    184          //     }
    185          //   } else {
    186          //     buttonManager.elapsedTime = 0;
    187          //   }
    188          // }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   KEUS_init_fnc
        0     10   -> HalUARTPoll
        0     10   -> HalUARTWrite
        0     10   -> KeusGPIOEdgeConfiguration
        0     10   -> KeusGPIOReadPinValue
        0     10   -> KeusGPIOSetDirection
        0     10   -> KeusGPIOSetPinValue
        0     10   -> KeusTimerUtilAddTimer
        0     10   -> KeusTimerUtilInit
        0     10   -> KeusTimerUtilStartTimer
        0     10   -> initUart0
        0     10   -> osal_strlen
      2      0   KEUS_loop
        2      0   -> HalUARTPoll
      4      0   ledTimerCbk
        2      0   -> KeusGPIOReadPinValue
        2      0   -> KeusGPIOSetPinValue
        2      0   -> KeusGPIOToggledState
      2      0   leddebounceCbk


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "KEUS INIT">
       5  ?<Initializer for buttonPin1>
       5  ?<Initializer for buttonPin2>
       5  ?<Initializer for buttonPin3>
       5  ?<Initializer for buttonPin4>
       8  ?<Initializer for debounceTimer>
       8  ?<Initializer for intervalTimer>
       5  ?<Initializer for ledPin1>
       5  ?<Initializer for ledPin2>
       5  ?<Initializer for ledPin3>
       5  ?<Initializer for ledPin4>
       7  ?Subroutine0
       6  ?Subroutine1
     205  KEUS_init_fnc
       9  KEUS_loop
       6  buttonManager
       5  buttonPin1
       5  buttonPin2
       5  buttonPin3
       5  buttonPin4
       1  button_Pressed
       1  button_state
       1  count
       1  count1
       1  count2
       1  debounce
       8  debounceTimer
       8  intervalTimer
       5  ledPin1
       5  ledPin2
       5  ledPin3
       5  ledPin4
     105  ledTimerCbk
      12  leddebounceCbk
      24  -- Other

 
 344 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
  56 bytes in segment XDATA_I
  56 bytes in segment XDATA_ID
  10 bytes in segment XDATA_ROM_C
  12 bytes in segment XDATA_Z
 
  80 bytes of CODE     memory
  10 bytes of CONST    memory
 344 bytes of HUGECODE memory
  68 bytes of XDATA    memory

Errors: none
Warnings: none
