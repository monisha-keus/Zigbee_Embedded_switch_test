###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               07/Jan/2020  17:05:29
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
#    Command line       =  
#        -f C:\Users\Monisha\AppData\Local\Temp\EW671F.tmp
#        (D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        HAL_KEY=FALSE -D HAL_LCD=FALSE -D HAL_LED=FALSE -D HAL_UART=TRUE -D
#        HAL_UART_ISR=1 -D HAL_UART_ISR_RX_MAX=64 -D HAL_UART_ISR_TX_MAX=64 -D
#        HAL_UART_DMA=2 -D HAL_UART_DMA_RX_MAX=64 -D HAL_UART_DMA_TX_MAX=64 -D
#        NWK_MAX_DEVICE_LIST=5 -D NWK_LINK_STATUS_PERIOD=50 -D
#        INT_HEAP_LEN=3172 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D
#        MULTICAST_ENABLED=FALSE -D APS_MAX_GROUPS=4 -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_READ -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -lC
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List
#        -lA
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\Source\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\Source\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\keus\embeddedswitch\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\keus\common\
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\List\keus_task.lst
#    Object file        =  
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\RouterEB\Obj\keus_task.r51
#
###############################################################################

D:\Keus_Docs\zigbee_EStest\Components\keus\embeddedswitch\keus_task.c
      1          
      2          /********************************************************
      3           * @fn  This file is to declare all GPIOs
      4           * *****************************************************/
      5          
      6          #include "keus_task.h"
      7          
      8          #define UART0     HAL_UART_PORT_0
      9          //#define UART1     HAL_UART_PORT_1
     10          
     11          void ledTimerCbk(uint8 timerId);
     12          void leddebounceCbk(uint8 timerId);
     13          void update_led(uint8 led_no, uint8 led_state_t);
     14          void update_config_struct(uint8 led_no, uint8 led_state);
     15          void update_config_to_memory(void);
     16          void uart_send_switch_sate_ack(uint8 cmnd_id,uint8 data_len);
     17          void uart_send_config_sate_ack(uint8 cmnd_id,uint8 data_len);
     18          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     19          bool debounce = false;
   \                     debounce:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          uint8 count1 = 0,timer1 = 0;
   \                     count1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     timer1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          uint8 button_Pressed =0,button_state = 0;
   \                     button_Pressed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     button_state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          uint8 contineous_on1 =0,blink_led = 0;
   \                     contineous_on1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     blink_led:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     23          uint32  APP_EVENT = 0;
   \                     APP_EVENT:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     24          //Variables for NVIC Memory

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     25          bool init_status = 0;
   \                     init_status:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     26          bool read_status = 0;
   \                     read_status:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     27          bool write_status = 0;
   \                     write_status:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     28          
     29          uint8 get_state(uint8* buff);
     30          uint8 get_config(uint8* buff);
     31          
     32          
     33          
     34          void KeusEmbeddedSwitchLedBlinkHandler(uint8 timerId);
     35          
     36          typedef void (*KeusBtnCbk)(void);
     37          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     38          struct CONFIG_INFO_t config_data[4];
   \                     config_data:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     39          //
     40          typedef struct {
     41            uint16 btnDelay;
     42            uint16 elapsedTime;
     43            KeusBtnCbk btnCbk;
     44          } KeusBtnManager;
     45          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     46          KeusBtnManager buttonManager;
   \                     buttonManager:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     47          
     48          //Debounce configuration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     49          KeusTimerConfig debounceTimer = {
   \                     debounceTimer:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for debounceTimer>`
   \   000008                REQUIRE __INIT_XDATA_I
     50              &leddebounceCbk,
     51              200,
     52              true,
     53              -1,
     54              0};
     55          
     56          //Timer Configuration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     57          KeusTimerConfig intervalTimer = {
   \                     intervalTimer:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for intervalTimer>`
   \   000008                REQUIRE __INIT_XDATA_I
     58              &ledTimerCbk,
     59              100,
     60              true,
     61              -1,
     62              0};
     63          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     64            KeusTimerConfig ledTimerConfig = {
   \                     ledTimerConfig:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for ledTimerConfig>`
   \   000008                REQUIRE __INIT_XDATA_I
     65            &KeusEmbeddedSwitchLedBlinkHandler,
     66            500,
     67            true,
     68            -1,
     69            0
     70          };
     71          /****************************************************************************
     72           * **************************FUNCTION DECLARATION****************************
     73           * ***************************************************************************/
     74          void KEUS_init_fnc(void);
     75          uint8 KEUS_loop(void);
     76          
     77          //********LED and button initilization

   \                                 In  segment XDATA_I, align 1, keep-with-next
     78          extern KeusGPIOPin ledPin1 = {0, 0, GPIO_OUTPUT, false, LED_OFF};
   \                     ledPin1:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin1>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     79          extern KeusGPIOPin ledPin2 = {0, 1, GPIO_OUTPUT, false, LED_OFF};
   \                     ledPin2:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin2>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     80          extern KeusGPIOPin ledPin3 = {0, 4, GPIO_OUTPUT, false, LED_OFF};
   \                     ledPin3:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin3>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     81          extern KeusGPIOPin ledPin4 = {0, 5, GPIO_OUTPUT, false, LED_OFF};
   \                     ledPin4:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin4>`
   \   000005                REQUIRE __INIT_XDATA_I
     82          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     83          extern KeusGPIOPin buttonPin1 = {1, 2, GPIO_INPUT, true, LED_OFF};
   \                     buttonPin1:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin1>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     84          extern KeusGPIOPin buttonPin2 = {1, 3, GPIO_INPUT, true, LED_OFF};
   \                     buttonPin2:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin2>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     85          extern KeusGPIOPin buttonPin3 = {1, 4, GPIO_INPUT, true, LED_OFF};
   \                     buttonPin3:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin3>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     86          extern KeusGPIOPin buttonPin4 = {1, 5, GPIO_INPUT, true, LED_OFF};
   \                     buttonPin4:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for buttonPin4>`
   \   000005                REQUIRE __INIT_XDATA_I
     87          /*******************************************************
     88           * @brief  Callback function for timer
     89                     Called every after 100ms
     90          
     91          *********************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     92          void ledTimerCbk(uint8 timerId)
   \                     ledTimerCbk:
     93          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     94            KeusGPIOReadPinValue(&buttonPin1);
   \   000004                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   000004   7A..         MOV       R2,#buttonPin1 & 0xff
   \   000006   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   000008   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
     95            KeusGPIOReadPinValue(&buttonPin2);
   \   00000B                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   00000B   7A..         MOV       R2,#buttonPin2 & 0xff
   \   00000D   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   00000F   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
     96            KeusGPIOReadPinValue(&buttonPin3);
   \   000012                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   000012   7A..         MOV       R2,#buttonPin3 & 0xff
   \   000014   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   000016   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
     97            KeusGPIOReadPinValue(&buttonPin4);
   \   000019                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   000019   7A..         MOV       R2,#buttonPin4 & 0xff
   \   00001B   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   00001D   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
     98          
     99            if (buttonPin1.state == BUTTON_ACTIVE){
   \   000020   90....       MOV       DPTR,#buttonPin1 + 4
   \   000023   E0           MOVX      A,@DPTR
   \   000024   90....       MOV       DPTR,#buttonManager + 2
   \   000027   705C         JNZ       ??ledTimerCbk_0
    100              buttonManager.elapsedTime += KEUS_EMBEDDEDSWITCH_BUTTON_POLL_TIME;
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   24E8         ADD       A,#-0x18
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   3403         ADDC      A,#0x3
   \   000031   F0           MOVX      @DPTR,A
    101              count1++;
   \   000032   90....       MOV       DPTR,#count1
   \   000035   E0           MOVX      A,@DPTR
   \   000036   04           INC       A
   \   000037   F0           MOVX      @DPTR,A
    102              button_Pressed = 1;
   \   000038   90....       MOV       DPTR,#button_Pressed
   \   00003B   7401         MOV       A,#0x1
   \   00003D   F0           MOVX      @DPTR,A
    103              APP_EVENT = EVENT_3;
   \   00003E   90....       MOV       DPTR,#APP_EVENT
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?Subroutine8 & 0xFFFF
    104              if(count1 >= 50){
   \                     ??CrossCallReturnLabel_11:
   \   000046   90....       MOV       DPTR,#count1
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   C3           CLR       C
   \   00004B   9432         SUBB      A,#0x32
   \   00004D   400C         JC        ??ledTimerCbk_1
    105                contineous_on1 = 1;
   \   00004F   90....       MOV       DPTR,#contineous_on1
   \   000052   7401         MOV       A,#0x1
   \   000054   F0           MOVX      @DPTR,A
    106                ledPin1.state = LED_ON;
   \   000055   90....       MOV       DPTR,#ledPin1 + 4
   \   000058   E4           CLR       A
   \   000059   8025         SJMP      ??ledTimerCbk_2
    107                KeusGPIOSetPinValue(&ledPin1);
    108              }
    109              else if (buttonManager.elapsedTime >= buttonManager.btnDelay) {
   \                     ??ledTimerCbk_1:
   \   00005B   90....       MOV       DPTR,#buttonManager
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F8           MOV       R0,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F9           MOV       R1,A
   \   000063   7583..       MOV       DPH,#((buttonManager + 2) >> 8) & 0xff
   \   000066   7582..       MOV       DPL,#(buttonManager + 2) & 0xff
   \   000069   C3           CLR       C
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   98           SUBB      A,R0
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   99           SUBB      A,R1
   \   00006F   402F         JC        ??ledTimerCbk_3
    110                contineous_on1 = 0;
   \   000071   90....       MOV       DPTR,#contineous_on1
   \   000074   E4           CLR       A
   \   000075   F0           MOVX      @DPTR,A
    111                buttonManager.elapsedTime = 0;
   \   000076   90....       MOV       DPTR,#buttonManager + 2
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   F0           MOVX      @DPTR,A
    112                ledPin1.state = LED_OFF;//KeusGPIOToggledState(ledPin1.state); //toggle led at button pressed
   \   00007C   90....       MOV       DPTR,#ledPin1 + 4
   \   00007F   04           INC       A
    113                KeusGPIOSetPinValue(&ledPin1);
    114              }
    115            } 
   \                     ??ledTimerCbk_2:
   \   000080   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000083   801B         SJMP      ??ledTimerCbk_3
    116             
    117            else {
    118              buttonManager.elapsedTime = 0;
   \                     ??ledTimerCbk_0:
   \   000085   E4           CLR       A
   \   000086   F0           MOVX      @DPTR,A
   \   000087   A3           INC       DPTR
   \   000088   F0           MOVX      @DPTR,A
    119              count1 = 0;
   \   000089   90....       MOV       DPTR,#count1
   \   00008C   F0           MOVX      @DPTR,A
    120          
    121              if(contineous_on1 ==0){
   \   00008D   90....       MOV       DPTR,#contineous_on1
   \   000090   E0           MOVX      A,@DPTR
   \   000091   7008         JNZ       ??CrossCallReturnLabel_5
    122                ledPin1.state = LED_OFF;
   \   000093   90....       MOV       DPTR,#ledPin1 + 4
   \   000096   7401         MOV       A,#0x1
   \   000098   12....       LCALL     ?Subroutine6 & 0xFFFF
    123                KeusGPIOSetPinValue(&ledPin1);
    124              }
    125              button_Pressed =0;
   \                     ??CrossCallReturnLabel_5:
   \   00009B   90....       MOV       DPTR,#button_Pressed
   \   00009E   E4           CLR       A
   \   00009F   F0           MOVX      @DPTR,A
    126            }
    127          }
   \                     ??ledTimerCbk_3:
   \   0000A0   80..         SJMP      ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000001                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000001                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000001   7A..         MOV       R2,#ledPin1 & 0xff
   \   000003   7B..         MOV       R3,#(ledPin1 >> 8) & 0xff
   \   000005   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
    128          
    129          /************************************************************************************
    130           * @brief   Timer Function to Blink(500ms) Led1 contineously from start. 
    131           * 
    132           * ***********************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          void KeusEmbeddedSwitchLedBlinkHandler(uint8 timerId){
   \                     KeusEmbeddedSwitchLedBlinkHandler:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    134            if(blink_led == START && button_Pressed == 0){
   \   000004   90....       MOV       DPTR,#blink_led
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7015         JNZ       ??CrossCallReturnLabel_6
   \   00000C   90....       MOV       DPTR,#button_Pressed
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   700F         JNZ       ??CrossCallReturnLabel_6
    135              ledPin1.state = KeusGPIOToggledState(ledPin1.state); //toggle led at button pressed
   \   000012                ; Setup parameters for call to function KeusGPIOToggledState
   \   000012   90....       MOV       DPTR,#ledPin1 + 4
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   12....       LCALL     `??KeusGPIOToggledState::?relay`; Banked call to: KeusGPIOToggledState
   \   00001A   E9           MOV       A,R1
   \   00001B   90....       MOV       DPTR,#ledPin1 + 4
   \   00001E   12....       LCALL     ?Subroutine6 & 0xFFFF
    136              KeusGPIOSetPinValue(&ledPin1);
    137            }
    138          }
   \                     ??CrossCallReturnLabel_6:
   \   000021   80..         SJMP      ??Subroutine12_0
    139          
    140          
    141          /**************************************************************
    142           * @fn      leddebounceCbk
    143           * @brief   callback function for Debounce,called every after 200ms
    144           * @param   none
    145           * @return  None
    146           * ***********************************************************/
    147          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine12_0
   \   000001                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          void leddebounceCbk(uint8 timerId)
   \                     leddebounceCbk:
    149          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    150            debounce = true;
   \   000004   90....       MOV       DPTR,#debounce
   \   000007   7401         MOV       A,#0x1
   \   000009   80..         SJMP      ?Subroutine0
    151          }
    152          
    153          
    154          
    155          /*************************************************************
    156           * @fn      KEUS_init_fnc
    157           * @brief   All Initilization
    158           * @return  None
    159           * @param   None  
    160           * ***********************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    161          void KEUS_init_fnc(void)
   \                     KEUS_init_fnc:
    162          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    163          
    164            //****Setting GPIOs direction and edge
    165            KeusGPIOSetDirection(&ledPin1);
   \   000005                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000005   7A..         MOV       R2,#ledPin1 & 0xff
   \   000007   7B..         MOV       R3,#(ledPin1 >> 8) & 0xff
   \   000009   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    166            KeusGPIOSetDirection(&buttonPin1);
   \   00000C                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00000C   7A..         MOV       R2,#buttonPin1 & 0xff
   \   00000E   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   000010   12....       LCALL     ?Subroutine7 & 0xFFFF
    167            KeusGPIOEdgeConfiguration(&buttonPin1, GPIO_RISING_EDGE);
   \                     ??CrossCallReturnLabel_7:
   \   000013   7A..         MOV       R2,#buttonPin1 & 0xff
   \   000015   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   000017   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    168            KeusGPIOReadPinValue(&buttonPin1);
   \   00001A                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   00001A   7A..         MOV       R2,#buttonPin1 & 0xff
   \   00001C   7B..         MOV       R3,#(buttonPin1 >> 8) & 0xff
   \   00001E   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    169            KeusGPIOSetPinValue(&ledPin1);
   \   000021                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000021   7A..         MOV       R2,#ledPin1 & 0xff
   \   000023   7B..         MOV       R3,#(ledPin1 >> 8) & 0xff
   \   000025   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    170          
    171            KeusGPIOSetDirection(&ledPin2);
   \   000028                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000028   7A..         MOV       R2,#ledPin2 & 0xff
   \   00002A   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \   00002C   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    172            KeusGPIOSetDirection(&buttonPin2);
   \   00002F                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00002F   7A..         MOV       R2,#buttonPin2 & 0xff
   \   000031   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   000033   12....       LCALL     ?Subroutine7 & 0xFFFF
    173            KeusGPIOEdgeConfiguration(&buttonPin2, GPIO_RISING_EDGE);
   \                     ??CrossCallReturnLabel_8:
   \   000036   7A..         MOV       R2,#buttonPin2 & 0xff
   \   000038   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   00003A   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    174            KeusGPIOReadPinValue(&buttonPin2);
   \   00003D                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   00003D   7A..         MOV       R2,#buttonPin2 & 0xff
   \   00003F   7B..         MOV       R3,#(buttonPin2 >> 8) & 0xff
   \   000041   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    175            KeusGPIOSetPinValue(&ledPin2);
   \   000044                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000044   7A..         MOV       R2,#ledPin2 & 0xff
   \   000046   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \   000048   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    176          
    177            KeusGPIOSetDirection(&ledPin3);
   \   00004B                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00004B   7A..         MOV       R2,#ledPin3 & 0xff
   \   00004D   7B..         MOV       R3,#(ledPin3 >> 8) & 0xff
   \   00004F   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    178            KeusGPIOSetDirection(&buttonPin3);
   \   000052                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000052   7A..         MOV       R2,#buttonPin3 & 0xff
   \   000054   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   000056   12....       LCALL     ?Subroutine7 & 0xFFFF
    179            KeusGPIOEdgeConfiguration(&buttonPin3, GPIO_RISING_EDGE);
   \                     ??CrossCallReturnLabel_9:
   \   000059   7A..         MOV       R2,#buttonPin3 & 0xff
   \   00005B   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   00005D   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    180            KeusGPIOReadPinValue(&buttonPin3);
   \   000060                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   000060   7A..         MOV       R2,#buttonPin3 & 0xff
   \   000062   7B..         MOV       R3,#(buttonPin3 >> 8) & 0xff
   \   000064   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    181            KeusGPIOSetPinValue(&ledPin3);
   \   000067                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000067   7A..         MOV       R2,#ledPin3 & 0xff
   \   000069   7B..         MOV       R3,#(ledPin3 >> 8) & 0xff
   \   00006B   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    182          
    183            KeusGPIOSetDirection(&ledPin4);
   \   00006E                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00006E   7A..         MOV       R2,#ledPin4 & 0xff
   \   000070   7B..         MOV       R3,#(ledPin4 >> 8) & 0xff
   \   000072   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
    184            KeusGPIOSetDirection(&buttonPin4);
   \   000075                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000075   7A..         MOV       R2,#buttonPin4 & 0xff
   \   000077   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   000079   12....       LCALL     ?Subroutine7 & 0xFFFF
    185            KeusGPIOEdgeConfiguration(&buttonPin4, GPIO_RISING_EDGE);
   \                     ??CrossCallReturnLabel_10:
   \   00007C   7A..         MOV       R2,#buttonPin4 & 0xff
   \   00007E   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   000080   12....       LCALL     `??KeusGPIOEdgeConfiguration::?relay`; Banked call to: KeusGPIOEdgeConfiguration
    186            KeusGPIOReadPinValue(&buttonPin4);
   \   000083                ; Setup parameters for call to function KeusGPIOReadPinValue
   \   000083   7A..         MOV       R2,#buttonPin4 & 0xff
   \   000085   7B..         MOV       R3,#(buttonPin4 >> 8) & 0xff
   \   000087   12....       LCALL     `??KeusGPIOReadPinValue::?relay`; Banked call to: KeusGPIOReadPinValue
    187            KeusGPIOSetPinValue(&ledPin4);
   \   00008A                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   00008A   7A..         MOV       R2,#ledPin4 & 0xff
   \   00008C   7B..         MOV       R3,#(ledPin4 >> 8) & 0xff
   \   00008E   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
    188          
    189            //******Enabling Timer and Debounce
    190            KeusTimerUtilAddTimer(&intervalTimer);
   \   000091                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   000091   7A..         MOV       R2,#intervalTimer & 0xff
   \   000093   7B..         MOV       R3,#(intervalTimer >> 8) & 0xff
   \   000095   12....       LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
    191            KeusTimerUtilAddTimer(&debounceTimer);
   \   000098                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   000098   7A..         MOV       R2,#debounceTimer & 0xff
   \   00009A   7B..         MOV       R3,#(debounceTimer >> 8) & 0xff
   \   00009C   12....       LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
    192            KeusTimerUtilAddTimer(&ledTimerConfig);
   \   00009F                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   00009F   7A..         MOV       R2,#ledTimerConfig & 0xff
   \   0000A1   7B..         MOV       R3,#(ledTimerConfig >> 8) & 0xff
   \   0000A3   12....       LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
    193          
    194          
    195            init_status = KeusThemeSwitchMiniMemoryInit();
   \   0000A6                ; Setup parameters for call to function KeusThemeSwitchMiniMemoryInit
   \   0000A6   12....       LCALL     `??KeusThemeSwitchMiniMemoryInit::?relay`; Banked call to: KeusThemeSwitchMiniMemoryInit
   \   0000A9   E9           MOV       A,R1
   \   0000AA   90....       MOV       DPTR,#init_status
   \   0000AD   F0           MOVX      @DPTR,A
    196            read_status = KeusThemeSwitchMiniReadConfigDataIntoMemory();
   \   0000AE                ; Setup parameters for call to function KeusThemeSwitchMiniReadConfigDataIntoMemory
   \   0000AE   12....       LCALL     `??KeusThemeSwitchMiniReadConfigDataIntoMemory::`; Banked call to: KeusThemeSwitchMiniReadConfigDataIntoMemory
   \   0000B1   E9           MOV       A,R1
   \   0000B2   90....       MOV       DPTR,#read_status
   \   0000B5   F0           MOVX      @DPTR,A
    197            //*****Timer Initialization
    198            KeusTimerUtilInit();
   \   0000B6                ; Setup parameters for call to function KeusTimerUtilInit
   \   0000B6   12....       LCALL     `??KeusTimerUtilInit::?relay`; Banked call to: KeusTimerUtilInit
    199            //******Timer Start
    200            KeusTimerUtilStartTimer();
   \   0000B9                ; Setup parameters for call to function KeusTimerUtilStartTimer
   \   0000B9   12....       LCALL     `??KeusTimerUtilStartTimer::?relay`; Banked call to: KeusTimerUtilStartTimer
    201          
    202            // //*****UART Initialization
    203            initUart0();
   \   0000BC                ; Setup parameters for call to function initUart0
   \   0000BC   12....       LCALL     `??initUart0::?relay`; Banked call to: initUart0
    204          
    205            HalUARTWrite(HAL_UART_PORT_0, "KEUS INIT", (byte)osal_strlen("KEUS INIT"));
   \   0000BF                ; Setup parameters for call to function osal_strlen
   \   0000BF   7A..         MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
   \   0000C1   7B..         MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
   \   0000C3   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000C6   8A..         MOV       ?V0,R2
   \   0000C8                ; Setup parameters for call to function HalUARTWrite
   \   0000C8   AC..         MOV       R4,?V0
   \   0000CA   7D00         MOV       R5,#0x0
   \   0000CC   7A..         MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
   \   0000CE   7B..         MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
   \   0000D0   7900         MOV       R1,#0x0
   \   0000D2   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    206          
    207            
    208            buttonManager.btnDelay = KEUS_EMBEDDEDSWITCH_RESET_BTN_TIMEOUT;
   \   0000D5   90....       MOV       DPTR,#buttonManager
   \   0000D8   7410         MOV       A,#0x10
   \   0000DA   F0           MOVX      @DPTR,A
   \   0000DB   A3           INC       DPTR
   \   0000DC   7427         MOV       A,#0x27
   \   0000DE   F0           MOVX      @DPTR,A
    209          
    210            config_data[0].config_id = 1;
   \   0000DF   90....       MOV       DPTR,#config_data + 2
   \   0000E2   7401         MOV       A,#0x1
   \   0000E4   F0           MOVX      @DPTR,A
    211            config_data[0].led = 1;
   \   0000E5   90....       MOV       DPTR,#config_data
   \   0000E8   F0           MOVX      @DPTR,A
    212            config_data[0].valid_state = 1;
   \   0000E9   A3           INC       DPTR
   \   0000EA   F0           MOVX      @DPTR,A
    213          
    214            config_data[1].config_id = 1;
   \   0000EB   90....       MOV       DPTR,#config_data + 5
   \   0000EE   F0           MOVX      @DPTR,A
    215            config_data[1].led = 2;
   \   0000EF   90....       MOV       DPTR,#config_data + 3
   \   0000F2   04           INC       A
   \   0000F3   F0           MOVX      @DPTR,A
    216            config_data[1].valid_state = 1;
   \   0000F4   A3           INC       DPTR
   \   0000F5   14           DEC       A
   \   0000F6   F0           MOVX      @DPTR,A
    217          
    218            config_data[2].config_id = 1;
   \   0000F7   90....       MOV       DPTR,#config_data + 8
   \   0000FA   F0           MOVX      @DPTR,A
    219            config_data[2].led = 3;
   \   0000FB   90....       MOV       DPTR,#config_data + 6
   \   0000FE   7403         MOV       A,#0x3
   \   000100   F0           MOVX      @DPTR,A
    220            config_data[2].valid_state = 1;
   \   000101   A3           INC       DPTR
   \   000102   7401         MOV       A,#0x1
   \   000104   F0           MOVX      @DPTR,A
    221          
    222            config_data[3].config_id = 1;
   \   000105   90....       MOV       DPTR,#config_data + 11
   \   000108   F0           MOVX      @DPTR,A
    223            config_data[3].led = 4;
   \   000109   90....       MOV       DPTR,#config_data + 9
   \   00010C   7404         MOV       A,#0x4
   \   00010E   F0           MOVX      @DPTR,A
    224            config_data[3].valid_state = 1;
   \   00010F   A3           INC       DPTR
   \   000110   7401         MOV       A,#0x1
   \   000112   F0           MOVX      @DPTR,A
    225          
    226            APP_EVENT = EVENT_1;
   \   000113   90....       MOV       DPTR,#APP_EVENT
   \   000116   12....       LCALL     ?Subroutine8 & 0xFFFF
    227            KEUS_loop();
   \                     ??CrossCallReturnLabel_12:
   \   000119                ; Setup parameters for call to function KEUS_loop
   \   000119   12....       LCALL     `??KEUS_loop::?relay`; Banked call to: KEUS_loop
    228          }
   \   00011C   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
   \   000003                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000003                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000003                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000003                ; Setup parameters for call to function KeusGPIOEdgeConfiguration
   \   000003   7901         MOV       R1,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    229          
    230          /**********************************************************************
    231           * @fn      KEUS_loop
    232           * @brief   Infinite loop
    233           * @return  No return after this
    234           * @param   None
    235           * *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          uint8 KEUS_loop(void)
   \                     KEUS_loop:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    238            while (1)
    239            {
    240              HalUARTPoll();
   \                     ??KEUS_loop_0:
   \   000005                ; Setup parameters for call to function HalUARTPoll
   \   000005   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
    241              if(APP_EVENT & EVENT_1){
   \   000008   90....       MOV       DPTR,#APP_EVENT
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?L_MOV_X
   \   000010   E5..         MOV       A,?V0
   \   000012   A2E0         MOV       C,0xE0 /* A   */.0
   \   000014   5014         JNC       ??KEUS_loop_1
    242                blink_led = START;
   \   000016   90....       MOV       DPTR,#blink_led
   \   000019   7401         MOV       A,#0x1
   \   00001B   F0           MOVX      @DPTR,A
    243                return APP_EVENT ^ EVENT_1;
   \   00001C   90....       MOV       DPTR,#APP_EVENT
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?L_MOV_X
   \   000024   E5..         MOV       A,?V0
   \   000026   6401         XRL       A,#0x1
   \   000028   806C         SJMP      ??KEUS_loop_2
    244              }
    245              if(APP_EVENT & EVENT_2){
   \                     ??KEUS_loop_1:
   \   00002A   90....       MOV       DPTR,#APP_EVENT
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?L_MOV_X
   \   000032   E5..         MOV       A,?V0
   \   000034   5402         ANL       A,#0x2
   \   000036   6013         JZ        ??KEUS_loop_3
    246                blink_led = STOP;
   \   000038   90....       MOV       DPTR,#blink_led
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
    247                return APP_EVENT ^ EVENT_2;
   \   00003D   90....       MOV       DPTR,#APP_EVENT
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?L_MOV_X
   \   000045   E5..         MOV       A,?V0
   \   000047   6402         XRL       A,#0x2
   \   000049   804B         SJMP      ??KEUS_loop_2
    248              }
    249              if(APP_EVENT & EVENT_3){
   \                     ??KEUS_loop_3:
   \   00004B   90....       MOV       DPTR,#APP_EVENT
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?L_MOV_X
   \   000053   E5..         MOV       A,?V0
   \   000055   5404         ANL       A,#0x4
   \   000057   90....       MOV       DPTR,#APP_EVENT
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   6009         JZ        ??KEUS_loop_4
    250                return APP_EVENT ^ EVENT_3;
   \   00005E   12....       LCALL     ?L_MOV_X
   \   000061   E5..         MOV       A,?V0
   \   000063   6404         XRL       A,#0x4
   \   000065   802F         SJMP      ??KEUS_loop_2
    251              }
    252              if(APP_EVENT & EVENT_4){
   \                     ??KEUS_loop_4:
   \   000067   12....       LCALL     ?L_MOV_X
   \   00006A   E5..         MOV       A,?V0
   \   00006C   5408         ANL       A,#0x8
   \   00006E   90....       MOV       DPTR,#APP_EVENT
   \   000071   78..         MOV       R0,#?V0
   \   000073   6009         JZ        ??KEUS_loop_5
    253                return APP_EVENT ^ EVENT_4;
   \   000075   12....       LCALL     ?L_MOV_X
   \   000078   E5..         MOV       A,?V0
   \   00007A   6408         XRL       A,#0x8
   \   00007C   8018         SJMP      ??KEUS_loop_2
    254              }
    255              if(APP_EVENT & EVENT_5){
   \                     ??KEUS_loop_5:
   \   00007E   12....       LCALL     ?L_MOV_X
   \   000081   E5..         MOV       A,?V0
   \   000083   5410         ANL       A,#0x10
   \   000085   7003         JNZ       $+5
   \   000087   02....       LJMP      ??KEUS_loop_0 & 0xFFFF
    256                return APP_EVENT ^ EVENT_5;
   \   00008A   90....       MOV       DPTR,#APP_EVENT
   \   00008D   78..         MOV       R0,#?V0
   \   00008F   12....       LCALL     ?L_MOV_X
   \   000092   E5..         MOV       A,?V0
   \   000094   6410         XRL       A,#0x10
   \                     ??KEUS_loop_2:
   \   000096   F9           MOV       R1,A
   \   000097   7F04         MOV       R7,#0x4
   \   000099   02....       LJMP      ?BANKED_LEAVE_XDATA
    257              } 
    258            }
    259          }
    260          /*******************************************************************
    261           * @fn      update_led
    262           * @brief   Function to receive LED state
    263           * *****************************************************************/
    264          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void update_led(uint8 led_no, uint8 led_state_t){
   \                     update_led:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    266            uint8 led_state;
    267            led_state = led_state_t;
    268            //LED1
    269            if (led_no == 1)
   \   000009   7469         MOV       A,#0x69
   \   00000B   2A           ADD       A,R2
   \   00000C   FB           MOV       R3,A
   \   00000D   749B         MOV       A,#-0x65
   \   00000F   2A           ADD       A,R2
   \   000010   FA           MOV       R2,A
   \   000011   74CD         MOV       A,#-0x33
   \   000013   2F           ADD       A,R7
   \   000014   F9           MOV       R1,A
   \   000015   7401         MOV       A,#0x1
   \   000017   6E           XRL       A,R6
   \   000018   6003         JZ        $+5
   \   00001A   02....       LJMP      ??update_led_0 & 0xFFFF
    270            {
    271              if (config_data[0].config_id == ONOFF)
   \   00001D   90....       MOV       DPTR,#config_data + 2
   \   000020   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000023   7009         JNZ       ??update_led_1
    272              {
    273                if (led_state == 0)
   \   000025   EF           MOV       A,R7
   \   000026   706C         JNZ       ??update_led_2
    274                {
    275                  config_data[0].valid_state = LOW;
   \   000028   90....       MOV       DPTR,#config_data + 1
   \   00002B   E4           CLR       A
   \   00002C   806B         SJMP      ??update_led_3
    276                }
    277                else
    278                {
    279                  config_data[0].valid_state = HIGH;
    280                }
    281              }
    282              else if (config_data[0].config_id == DIMMING)
   \                     ??update_led_1:
   \   00002E   7402         MOV       A,#0x2
   \   000030   68           XRL       A,R0
   \   000031   6021         JZ        ??update_led_4
    283              {
    284                config_data[0].valid_state = led_state;
    285              }
    286              else if (config_data[0].config_id == FAN_CONTROLLER)
   \   000033   7403         MOV       A,#0x3
   \   000035   68           XRL       A,R0
   \   000036   7062         JNZ       ??update_led_5
    287              {
    288                if (led_state == 0 || led_state == 50 || led_state == 100 || led_state == 150 || led_state == 200 || led_state == 255)
   \   000038   EF           MOV       A,R7
   \   000039   6019         JZ        ??update_led_4
   \   00003B   7432         MOV       A,#0x32
   \   00003D   6F           XRL       A,R7
   \   00003E   6014         JZ        ??update_led_4
   \   000040   7464         MOV       A,#0x64
   \   000042   6F           XRL       A,R7
   \   000043   600F         JZ        ??update_led_4
   \   000045   7496         MOV       A,#-0x6a
   \   000047   6F           XRL       A,R7
   \   000048   600A         JZ        ??update_led_4
   \   00004A   74C8         MOV       A,#-0x38
   \   00004C   6F           XRL       A,R7
   \   00004D   6005         JZ        ??update_led_4
   \   00004F   74FF         MOV       A,#-0x1
   \   000051   6F           XRL       A,R7
   \   000052   7006         JNZ       ??update_led_6
    289                {
    290                  config_data[0].valid_state = led_state;
   \                     ??update_led_4:
   \   000054   EF           MOV       A,R7
   \   000055   90....       MOV       DPTR,#config_data + 1
   \   000058   803F         SJMP      ??update_led_3
    291                }
    292                else if (led_state > 0 && led_state < 50)
   \                     ??update_led_6:
   \   00005A   EF           MOV       A,R7
   \   00005B   C3           CLR       C
   \   00005C   9432         SUBB      A,#0x32
   \   00005E   5007         JNC       ??update_led_7
    293                {
    294                  config_data[0].valid_state = 50;
   \   000060   90....       MOV       DPTR,#config_data + 1
   \   000063   7432         MOV       A,#0x32
   \   000065   8032         SJMP      ??update_led_3
    295                }
    296                else if (led_state > 50 && led_state < 100)
   \                     ??update_led_7:
   \   000067   14           DEC       A
   \   000068   C3           CLR       C
   \   000069   9431         SUBB      A,#0x31
   \   00006B   5007         JNC       ??update_led_8
    297                {
    298                  config_data[0].valid_state = 100;
   \   00006D   90....       MOV       DPTR,#config_data + 1
   \   000070   7464         MOV       A,#0x64
   \   000072   8025         SJMP      ??update_led_3
    299                }
    300                else if (led_state > 100 && led_state < 150)
   \                     ??update_led_8:
   \   000074   14           DEC       A
   \   000075   C3           CLR       C
   \   000076   9431         SUBB      A,#0x31
   \   000078   5007         JNC       ??update_led_9
    301                {
    302                  config_data[0].valid_state = 150;
   \   00007A   90....       MOV       DPTR,#config_data + 1
   \   00007D   7496         MOV       A,#-0x6a
   \   00007F   8018         SJMP      ??update_led_3
    303                }
    304                else if (led_state > 150 && led_state < 200)
   \                     ??update_led_9:
   \   000081   14           DEC       A
   \   000082   C3           CLR       C
   \   000083   9431         SUBB      A,#0x31
   \   000085   5007         JNC       ??update_led_10
    305                {
    306                  config_data[0].valid_state = 200;
   \   000087   90....       MOV       DPTR,#config_data + 1
   \   00008A   74C8         MOV       A,#-0x38
   \   00008C   800B         SJMP      ??update_led_3
    307                }
    308                else if (led_state > 200 && led_state < 255)
   \                     ??update_led_10:
   \   00008E   EF           MOV       A,R7
   \   00008F   C3           CLR       C
   \   000090   94C9         SUBB      A,#-0x37
   \   000092   4006         JC        ??update_led_5
    309                {
    310                  config_data[0].valid_state = 255;
   \                     ??update_led_2:
   \   000094   90....       MOV       DPTR,#config_data + 1
   \   000097   74FF         MOV       A,#-0x1
   \                     ??update_led_3:
   \   000099   F0           MOVX      @DPTR,A
    311                }
    312              }
    313              config_data[0].led = led_no;
   \                     ??update_led_5:
   \   00009A   90....       MOV       DPTR,#config_data
   \   00009D   7401         MOV       A,#0x1
   \   00009F   02....       LJMP      ??update_led_11 & 0xFFFF
    314            }
    315          
    316            //LED == 2
    317            else if (led_no == 2)
   \                     ??update_led_0:
   \   0000A2   7402         MOV       A,#0x2
   \   0000A4   6E           XRL       A,R6
   \   0000A5   6003         JZ        $+5
   \   0000A7   02....       LJMP      ??update_led_12 & 0xFFFF
    318            {
    319              if (config_data[1].config_id == ONOFF)
   \   0000AA   90....       MOV       DPTR,#config_data + 5
   \   0000AD   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000B0   7009         JNZ       ??update_led_13
    320              {
    321                if (led_state == 0)
   \   0000B2   EF           MOV       A,R7
   \   0000B3   706B         JNZ       ??update_led_14
    322                {
    323                  config_data[1].valid_state = LOW;
   \   0000B5   90....       MOV       DPTR,#config_data + 4
   \   0000B8   E4           CLR       A
   \   0000B9   806A         SJMP      ??update_led_15
    324                }
    325                else
    326                {
    327                  config_data[1].valid_state = HIGH;
    328                }
    329              }
    330              else if (config_data[1].config_id == DIMMING)
   \                     ??update_led_13:
   \   0000BB   7402         MOV       A,#0x2
   \   0000BD   68           XRL       A,R0
   \   0000BE   6025         JZ        ??update_led_16
    331              {
    332                config_data[1].valid_state = led_state;
    333              }
    334              
    335              else if (config_data[1].config_id == FAN_CONTROLLER)
   \   0000C0   7403         MOV       A,#0x3
   \   0000C2   68           XRL       A,R0
   \   0000C3   7061         JNZ       ??update_led_17
    336              {
    337                if (config_data[1].valid_state == 0 || config_data[1].valid_state == 50 || config_data[1].valid_state == 100 || config_data[1].valid_state == 150 || config_data[1].valid_state == 200 || config_data[1].valid_state == 255)
   \   0000C5   90....       MOV       DPTR,#config_data + 4
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   F8           MOV       R0,A
   \   0000CA   6019         JZ        ??update_led_16
   \   0000CC   7432         MOV       A,#0x32
   \   0000CE   68           XRL       A,R0
   \   0000CF   6014         JZ        ??update_led_16
   \   0000D1   7464         MOV       A,#0x64
   \   0000D3   68           XRL       A,R0
   \   0000D4   600F         JZ        ??update_led_16
   \   0000D6   7496         MOV       A,#-0x6a
   \   0000D8   68           XRL       A,R0
   \   0000D9   600A         JZ        ??update_led_16
   \   0000DB   74C8         MOV       A,#-0x38
   \   0000DD   68           XRL       A,R0
   \   0000DE   6005         JZ        ??update_led_16
   \   0000E0   74FF         MOV       A,#-0x1
   \   0000E2   68           XRL       A,R0
   \   0000E3   7006         JNZ       ??update_led_18
    338                {
    339                  config_data[1].valid_state = led_state;
   \                     ??update_led_16:
   \   0000E5   EF           MOV       A,R7
   \   0000E6   90....       MOV       DPTR,#config_data + 4
   \   0000E9   803A         SJMP      ??update_led_15
    340                }
    341                else if (led_state > 0 && led_state < 50)
   \                     ??update_led_18:
   \   0000EB   EF           MOV       A,R7
   \   0000EC   6009         JZ        ??update_led_19
   \   0000EE   C3           CLR       C
   \   0000EF   9432         SUBB      A,#0x32
   \   0000F1   5004         JNC       ??update_led_19
    342                {
    343                  config_data[1].valid_state = 50;
   \   0000F3   7432         MOV       A,#0x32
   \   0000F5   802E         SJMP      ??update_led_15
    344                }
    345                else if (led_state > 50 && led_state < 100)
   \                     ??update_led_19:
   \   0000F7   E9           MOV       A,R1
   \   0000F8   C3           CLR       C
   \   0000F9   9431         SUBB      A,#0x31
   \   0000FB   5004         JNC       ??update_led_20
    346                {
    347                  config_data[1].valid_state = 100;
   \   0000FD   7464         MOV       A,#0x64
   \   0000FF   8024         SJMP      ??update_led_15
    348                }
    349                else if (led_state > 100 && led_state < 150)
   \                     ??update_led_20:
   \   000101   14           DEC       A
   \   000102   C3           CLR       C
   \   000103   9431         SUBB      A,#0x31
   \   000105   5004         JNC       ??update_led_21
    350                {
    351                  config_data[1].valid_state = 150;
   \   000107   7496         MOV       A,#-0x6a
   \   000109   801A         SJMP      ??update_led_15
    352                }
    353                else if (led_state > 150 && led_state < 200)
   \                     ??update_led_21:
   \   00010B   14           DEC       A
   \   00010C   C3           CLR       C
   \   00010D   9431         SUBB      A,#0x31
   \   00010F   5004         JNC       ??update_led_22
    354                {
    355                  config_data[1].valid_state = 200;
   \   000111   74C8         MOV       A,#-0x38
   \   000113   8010         SJMP      ??update_led_15
    356                }
    357                else if (led_state > 200 && led_state < 255)
   \                     ??update_led_22:
   \   000115   EF           MOV       A,R7
   \   000116   C3           CLR       C
   \   000117   94C9         SUBB      A,#-0x37
   \   000119   400B         JC        ??update_led_17
   \   00011B   74FF         MOV       A,#-0x1
   \   00011D   6F           XRL       A,R7
   \   00011E   6006         JZ        ??update_led_17
    358                {
    359                  config_data[1].valid_state = 255;
   \                     ??update_led_14:
   \   000120   90....       MOV       DPTR,#config_data + 4
   \   000123   74FF         MOV       A,#-0x1
   \                     ??update_led_15:
   \   000125   F0           MOVX      @DPTR,A
    360                }
    361              }
    362              config_data[1].led = led_no;
   \                     ??update_led_17:
   \   000126   90....       MOV       DPTR,#config_data + 3
   \   000129   7402         MOV       A,#0x2
   \   00012B   02....       LJMP      ??update_led_11 & 0xFFFF
    363            }
    364            //LED == 3
    365            else if (led_no == 3)
   \                     ??update_led_12:
   \   00012E   7403         MOV       A,#0x3
   \   000130   6E           XRL       A,R6
   \   000131   6003         JZ        $+5
   \   000133   02....       LJMP      ??update_led_23 & 0xFFFF
    366            {
    367              if (config_data[2].config_id == ONOFF)
   \   000136   90....       MOV       DPTR,#config_data + 8
   \   000139   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00013C   7009         JNZ       ??update_led_24
    368              {
    369                if (led_state == 0)
   \   00013E   EF           MOV       A,R7
   \   00013F   706C         JNZ       ??update_led_25
    370                {
    371                  config_data[2].valid_state = LOW;
   \   000141   90....       MOV       DPTR,#config_data + 7
   \   000144   E4           CLR       A
   \   000145   806B         SJMP      ??update_led_26
    372                }
    373                else
    374                {
    375                  config_data[2].valid_state = HIGH;
    376                }
    377              }
    378              else if (config_data[2].config_id == DIMMING)
   \                     ??update_led_24:
   \   000147   7402         MOV       A,#0x2
   \   000149   68           XRL       A,R0
   \   00014A   6021         JZ        ??update_led_27
    379              {
    380                config_data[2].valid_state = led_state;
    381                
    382              }
    383              else if (config_data[2].config_id == FAN_CONTROLLER)
   \   00014C   7403         MOV       A,#0x3
   \   00014E   68           XRL       A,R0
   \   00014F   7062         JNZ       ??update_led_28
    384              {
    385                if (led_state == 0 || led_state == 50 || led_state == 100 || led_state == 150 || led_state == 200 || led_state == 255)
   \   000151   EF           MOV       A,R7
   \   000152   6019         JZ        ??update_led_27
   \   000154   7432         MOV       A,#0x32
   \   000156   6F           XRL       A,R7
   \   000157   6014         JZ        ??update_led_27
   \   000159   7464         MOV       A,#0x64
   \   00015B   6F           XRL       A,R7
   \   00015C   600F         JZ        ??update_led_27
   \   00015E   7496         MOV       A,#-0x6a
   \   000160   6F           XRL       A,R7
   \   000161   600A         JZ        ??update_led_27
   \   000163   74C8         MOV       A,#-0x38
   \   000165   6F           XRL       A,R7
   \   000166   6005         JZ        ??update_led_27
   \   000168   74FF         MOV       A,#-0x1
   \   00016A   6F           XRL       A,R7
   \   00016B   7006         JNZ       ??update_led_29
    386                {
    387                  config_data[2].valid_state = led_state;
   \                     ??update_led_27:
   \   00016D   EF           MOV       A,R7
   \   00016E   90....       MOV       DPTR,#config_data + 7
   \   000171   803F         SJMP      ??update_led_26
    388                }
    389                else if (led_state > 0 && led_state < 50)
   \                     ??update_led_29:
   \   000173   EF           MOV       A,R7
   \   000174   C3           CLR       C
   \   000175   9432         SUBB      A,#0x32
   \   000177   5007         JNC       ??update_led_30
    390                {
    391                  config_data[2].valid_state = 50;
   \   000179   90....       MOV       DPTR,#config_data + 7
   \   00017C   7432         MOV       A,#0x32
   \   00017E   8032         SJMP      ??update_led_26
    392                }
    393                else if (led_state > 50 && led_state < 100)
   \                     ??update_led_30:
   \   000180   14           DEC       A
   \   000181   C3           CLR       C
   \   000182   9431         SUBB      A,#0x31
   \   000184   5007         JNC       ??update_led_31
    394                {
    395                  config_data[2].valid_state = 100;
   \   000186   90....       MOV       DPTR,#config_data + 7
   \   000189   7464         MOV       A,#0x64
   \   00018B   8025         SJMP      ??update_led_26
    396                }
    397                else if (led_state > 100 && led_state < 150)
   \                     ??update_led_31:
   \   00018D   14           DEC       A
   \   00018E   C3           CLR       C
   \   00018F   9431         SUBB      A,#0x31
   \   000191   5007         JNC       ??update_led_32
    398                {
    399                  config_data[2].valid_state = 150;
   \   000193   90....       MOV       DPTR,#config_data + 7
   \   000196   7496         MOV       A,#-0x6a
   \   000198   8018         SJMP      ??update_led_26
    400                }
    401                else if (led_state > 150 && led_state < 200)
   \                     ??update_led_32:
   \   00019A   14           DEC       A
   \   00019B   C3           CLR       C
   \   00019C   9431         SUBB      A,#0x31
   \   00019E   5007         JNC       ??update_led_33
    402                {
    403                  config_data[2].valid_state = 200;
   \   0001A0   90....       MOV       DPTR,#config_data + 7
   \   0001A3   74C8         MOV       A,#-0x38
   \   0001A5   800B         SJMP      ??update_led_26
    404                }
    405                else if (led_state > 200 && led_state < 255)
   \                     ??update_led_33:
   \   0001A7   EF           MOV       A,R7
   \   0001A8   C3           CLR       C
   \   0001A9   94C9         SUBB      A,#-0x37
   \   0001AB   4006         JC        ??update_led_28
    406                {
    407                  config_data[2].valid_state = 255;
   \                     ??update_led_25:
   \   0001AD   90....       MOV       DPTR,#config_data + 7
   \   0001B0   74FF         MOV       A,#-0x1
   \                     ??update_led_26:
   \   0001B2   F0           MOVX      @DPTR,A
    408                }
    409              }
    410              config_data[2].led = led_no;
   \                     ??update_led_28:
   \   0001B3   90....       MOV       DPTR,#config_data + 6
   \   0001B6   7403         MOV       A,#0x3
   \   0001B8   02....       LJMP      ??update_led_11 & 0xFFFF
    411            }
    412            //LED == 4
    413            else if (led_no == 4)
   \                     ??update_led_23:
   \   0001BB   7404         MOV       A,#0x4
   \   0001BD   6E           XRL       A,R6
   \   0001BE   6003         JZ        $+5
   \   0001C0   02....       LJMP      ??update_led_34 & 0xFFFF
    414            {
    415              if (config_data[3].config_id == ONOFF)
   \   0001C3   90....       MOV       DPTR,#config_data + 11
   \   0001C6   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001C9   7009         JNZ       ??update_led_35
    416              {
    417                if (led_state == 0)
   \   0001CB   EF           MOV       A,R7
   \   0001CC   706C         JNZ       ??update_led_36
    418                {
    419                  config_data[3].valid_state = LOW;
   \   0001CE   90....       MOV       DPTR,#config_data + 10
   \   0001D1   E4           CLR       A
   \   0001D2   806B         SJMP      ??update_led_37
    420                }
    421                else
    422                {
    423                  config_data[3].valid_state = HIGH;
    424                }
    425              }
    426              else if (config_data[3].config_id == DIMMING)
   \                     ??update_led_35:
   \   0001D4   7402         MOV       A,#0x2
   \   0001D6   68           XRL       A,R0
   \   0001D7   6021         JZ        ??update_led_38
    427              {
    428                config_data[3].valid_state = led_state;
    429                
    430              }
    431              else if (config_data[3].config_id == FAN_CONTROLLER)
   \   0001D9   7403         MOV       A,#0x3
   \   0001DB   68           XRL       A,R0
   \   0001DC   7062         JNZ       ??update_led_39
    432              {
    433                if (led_state == 0 || led_state == 50 || led_state == 100 || led_state == 150 || led_state == 200 || led_state == 255)
   \   0001DE   EF           MOV       A,R7
   \   0001DF   6019         JZ        ??update_led_38
   \   0001E1   7432         MOV       A,#0x32
   \   0001E3   6F           XRL       A,R7
   \   0001E4   6014         JZ        ??update_led_38
   \   0001E6   7464         MOV       A,#0x64
   \   0001E8   6F           XRL       A,R7
   \   0001E9   600F         JZ        ??update_led_38
   \   0001EB   7496         MOV       A,#-0x6a
   \   0001ED   6F           XRL       A,R7
   \   0001EE   600A         JZ        ??update_led_38
   \   0001F0   74C8         MOV       A,#-0x38
   \   0001F2   6F           XRL       A,R7
   \   0001F3   6005         JZ        ??update_led_38
   \   0001F5   74FF         MOV       A,#-0x1
   \   0001F7   6F           XRL       A,R7
   \   0001F8   7006         JNZ       ??update_led_40
    434                {
    435                  config_data[3].valid_state = led_state;
   \                     ??update_led_38:
   \   0001FA   EF           MOV       A,R7
   \   0001FB   90....       MOV       DPTR,#config_data + 10
   \   0001FE   803F         SJMP      ??update_led_37
    436                }
    437                else if (led_state > 0 && led_state < 50)
   \                     ??update_led_40:
   \   000200   EF           MOV       A,R7
   \   000201   C3           CLR       C
   \   000202   9432         SUBB      A,#0x32
   \   000204   5007         JNC       ??update_led_41
    438                {
    439                  config_data[3].valid_state = 50;
   \   000206   90....       MOV       DPTR,#config_data + 10
   \   000209   7432         MOV       A,#0x32
   \   00020B   8032         SJMP      ??update_led_37
    440                }
    441                else if (led_state > 50 && led_state < 100)
   \                     ??update_led_41:
   \   00020D   14           DEC       A
   \   00020E   C3           CLR       C
   \   00020F   9431         SUBB      A,#0x31
   \   000211   5007         JNC       ??update_led_42
    442                {
    443                  config_data[3].valid_state = 100;
   \   000213   90....       MOV       DPTR,#config_data + 10
   \   000216   7464         MOV       A,#0x64
   \   000218   8025         SJMP      ??update_led_37
    444                }
    445                else if (led_state > 100 && led_state < 150)
   \                     ??update_led_42:
   \   00021A   14           DEC       A
   \   00021B   C3           CLR       C
   \   00021C   9431         SUBB      A,#0x31
   \   00021E   5007         JNC       ??update_led_43
    446                {
    447                  config_data[3].valid_state = 150;
   \   000220   90....       MOV       DPTR,#config_data + 10
   \   000223   7496         MOV       A,#-0x6a
   \   000225   8018         SJMP      ??update_led_37
    448                }
    449                else if (led_state > 150 && led_state < 200)
   \                     ??update_led_43:
   \   000227   14           DEC       A
   \   000228   C3           CLR       C
   \   000229   9431         SUBB      A,#0x31
   \   00022B   5007         JNC       ??update_led_44
    450                {
    451                  config_data[3].valid_state = 200;
   \   00022D   90....       MOV       DPTR,#config_data + 10
   \   000230   74C8         MOV       A,#-0x38
   \   000232   800B         SJMP      ??update_led_37
    452                }
    453                else if (led_state > 200 && led_state < 255)
   \                     ??update_led_44:
   \   000234   EF           MOV       A,R7
   \   000235   C3           CLR       C
   \   000236   94C9         SUBB      A,#-0x37
   \   000238   4006         JC        ??update_led_39
    454                {
    455                  config_data[3].valid_state = 255;
   \                     ??update_led_36:
   \   00023A   90....       MOV       DPTR,#config_data + 10
   \   00023D   74FF         MOV       A,#-0x1
   \                     ??update_led_37:
   \   00023F   F0           MOVX      @DPTR,A
    456                }
    457              }
    458              config_data[3].led = led_no;
   \                     ??update_led_39:
   \   000240   90....       MOV       DPTR,#config_data + 9
   \   000243   7404         MOV       A,#0x4
   \                     ??update_led_11:
   \   000245   F0           MOVX      @DPTR,A
    459            }
    460            update_config_to_memory();
   \                     ??update_led_34:
   \   000246                ; Setup parameters for call to function KeusThemeSwitchMiniWriteConfigDataIntoMemory
   \   000246                REQUIRE ?Subroutine3
   \   000246                ; // Fall through to label ?Subroutine3
    461          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     `??KeusThemeSwitchMiniWriteConfigDataIntoMemory:`; Banked call to: KeusThemeSwitchMiniWriteConfigDataIntoMemory
   \   000003   E9           MOV       A,R1
   \   000004   90....       MOV       DPTR,#write_status
   \   000007   F0           MOVX      @DPTR,A
   \   000008   80..         SJMP      ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   7401         MOV       A,#0x1
   \   000004   68           XRL       A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    462          
    463          
    464          /***********************************************************************
    465           * @fn      update_config_struct
    466           * @brief   update config structure
    467           * 
    468           * ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    469          void update_config_struct(uint8 led_no, uint8 led_state)
   \                     update_config_struct:
    470          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    471            if (led_no == 1)
   \   000007   7401         MOV       A,#0x1
   \   000009   6E           XRL       A,R6
   \   00000A   700C         JNZ       ??update_config_struct_0
    472            {
    473              config_data[0].valid_state = led_state;
   \   00000C   EA           MOV       A,R2
   \   00000D   90....       MOV       DPTR,#config_data + 1
   \   000010   F0           MOVX      @DPTR,A
    474              config_data[0].led = led_no;
   \   000011   90....       MOV       DPTR,#config_data
   \   000014   7401         MOV       A,#0x1
   \   000016   8025         SJMP      ??update_config_struct_1
    475            }
    476            else if (led_no == 2)
   \                     ??update_config_struct_0:
   \   000018   7402         MOV       A,#0x2
   \   00001A   6E           XRL       A,R6
   \   00001B   7007         JNZ       ??update_config_struct_2
    477            {
    478              config_data[1].led = led_no;
   \   00001D   90....       MOV       DPTR,#config_data + 3
   \   000020   7402         MOV       A,#0x2
   \   000022   8016         SJMP      ??update_config_struct_3
    479              config_data[1].valid_state = led_state;
    480            }
    481            else if (led_no == 3)
   \                     ??update_config_struct_2:
   \   000024   7403         MOV       A,#0x3
   \   000026   6E           XRL       A,R6
   \   000027   7007         JNZ       ??update_config_struct_4
    482            {
    483              config_data[2].led = led_no;
   \   000029   90....       MOV       DPTR,#config_data + 6
   \   00002C   7403         MOV       A,#0x3
   \   00002E   800A         SJMP      ??update_config_struct_3
    484              config_data[2].valid_state = led_state;
    485            }
    486            else if (led_no == 4)
   \                     ??update_config_struct_4:
   \   000030   7404         MOV       A,#0x4
   \   000032   6E           XRL       A,R6
   \   000033   7009         JNZ       ??update_config_struct_5
    487            {
    488              config_data[3].led = led_no;
   \   000035   90....       MOV       DPTR,#config_data + 9
   \   000038   7404         MOV       A,#0x4
   \                     ??update_config_struct_3:
   \   00003A   F0           MOVX      @DPTR,A
    489              config_data[3].valid_state = led_state;
   \   00003B   EA           MOV       A,R2
   \   00003C   A3           INC       DPTR
   \                     ??update_config_struct_1:
   \   00003D   F0           MOVX      @DPTR,A
    490            }
    491            update_config_to_memory();
   \                     ??update_config_struct_5:
   \   00003E                ; Setup parameters for call to function KeusThemeSwitchMiniWriteConfigDataIntoMemory
   \   00003E   80..         SJMP      ?Subroutine3
    492          }
    493          
    494          /***************************************************************************
    495           * @brief   Function to ge state and corresponding led_no
    496           * ************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          uint8 get_state(uint8* buff){
   \                     get_state:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    498            uint8 index = 0,no_of_led = 4;
    499            buff[index++] = no_of_led;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   7404         MOV       A,#0x4
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   7C01         MOV       R4,#0x1
    500            for(uint8 i = 0;i<no_of_led;i++){
   \   00000E   7D00         MOV       R5,#0x0
    501              buff[index++] = config_data[i].led;
   \                     ??get_state_0:
   \   000010   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000013   C0E0         PUSH      A
   \   000015   EC           MOV       A,R4
   \   000016   FE           MOV       R6,A
   \   000017   EA           MOV       A,R2
   \   000018   2E           ADD       A,R6
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   3B           ADDC      A,R3
   \   00001D   F583         MOV       DPH,A
   \   00001F   D0E0         POP       A
   \   000021   F0           MOVX      @DPTR,A
   \   000022   0C           INC       R4
    502              buff[index++] = config_data[i].valid_state;
   \   000023   8882         MOV       DPL,R0
   \   000025   8983         MOV       DPH,R1
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   C0E0         PUSH      A
   \   00002B   EA           MOV       A,R2
   \   00002C   2C           ADD       A,R4
   \   00002D   F582         MOV       DPL,A
   \   00002F   E4           CLR       A
   \   000030   3B           ADDC      A,R3
   \   000031   F583         MOV       DPH,A
   \   000033   D0E0         POP       A
   \   000035   F0           MOVX      @DPTR,A
   \   000036   0C           INC       R4
    503            }
   \   000037   0D           INC       R5
   \   000038   ED           MOV       A,R5
   \   000039   C3           CLR       C
   \   00003A   9404         SUBB      A,#0x4
   \   00003C   40D2         JC        ??get_state_0
    504            return index-1;
   \   00003E                REQUIRE ?Subroutine4
   \   00003E                ; // Fall through to label ?Subroutine4
    505          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   74FF         MOV       A,#-0x1
   \   000002   2C           ADD       A,R4
   \   000003   F9           MOV       R1,A
   \   000004   80..         SJMP      ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   ED           MOV       A,R5
   \   000001                REQUIRE ??Subroutine14_0
   \   000001                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   75F003       MOV       B,#0x3
   \   000003   A4           MUL       AB
   \   000004   F8           MOV       R0,A
   \   000005   A9F0         MOV       R1,B
   \   000007   74..         MOV       A,#config_data & 0xff
   \   000009   28           ADD       A,R0
   \   00000A   F8           MOV       R0,A
   \   00000B   74..         MOV       A,#(config_data >> 8) & 0xff
   \   00000D   39           ADDC      A,R1
   \   00000E   F9           MOV       R1,A
   \   00000F   8882         MOV       DPL,R0
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET
    506          
    507          /***************************************************************************
    508           * @brief   Function to ge config_id and corresponding led_no
    509           * **************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    510          uint8 get_config(uint8* buff){
   \                     get_config:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    511            uint8 index = 0,no_of_led = 4;
    512            buff[index++] = no_of_led;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   7404         MOV       A,#0x4
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   7C01         MOV       R4,#0x1
    513            for(uint8 i = 0;i<no_of_led;i++){
   \   00000E   7D00         MOV       R5,#0x0
    514              buff[index++] = config_data[i].led;
   \                     ??get_config_0:
   \   000010   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000013   C0E0         PUSH      A
   \   000015   EC           MOV       A,R4
   \   000016   FE           MOV       R6,A
   \   000017   EA           MOV       A,R2
   \   000018   2E           ADD       A,R6
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   3B           ADDC      A,R3
   \   00001D   F583         MOV       DPH,A
   \   00001F   D0E0         POP       A
   \   000021   F0           MOVX      @DPTR,A
   \   000022   0C           INC       R4
    515              buff[index++] = config_data[i].config_id;
   \   000023   8882         MOV       DPL,R0
   \   000025   8983         MOV       DPH,R1
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   C0E0         PUSH      A
   \   00002C   EA           MOV       A,R2
   \   00002D   2C           ADD       A,R4
   \   00002E   F582         MOV       DPL,A
   \   000030   E4           CLR       A
   \   000031   3B           ADDC      A,R3
   \   000032   F583         MOV       DPH,A
   \   000034   D0E0         POP       A
   \   000036   F0           MOVX      @DPTR,A
   \   000037   0C           INC       R4
    516            }
   \   000038   0D           INC       R5
   \   000039   ED           MOV       A,R5
   \   00003A   C3           CLR       C
   \   00003B   9404         SUBB      A,#0x4
   \   00003D   40D1         JC        ??get_config_0
    517            return index-1;
   \   00003F   80..         SJMP      ?Subroutine4
    518          }
    519          
    520          /*****************************************************************************
    521           * @fn      uart_send_sate_ack
    522           * @brief   Send back State of all switch to uart
    523           * @return
    524           * @param 
    525           * **************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000003   7429         MOV       A,#0x29
   \   000005   F0           MOVX      @DPTR,A
   \   000006                ; Setup parameters for call to function HalUARTWrite
   \   000006                ; Setup parameters for call to function HalUARTWrite
   \   000006   0C           INC       R4
   \   000007   0C           INC       R4
   \   000008   0C           INC       R4
   \   000009   7D00         MOV       R5,#0x0
   \   00000B   AA..         MOV       R2,?XSP + 0
   \   00000D   AB..         MOV       R3,?XSP + 1
   \   00000F   7900         MOV       R1,#0x0
   \   000011   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000014   7414         MOV       A,#0x14
   \   000016   12....       LCALL     ?DEALLOC_XSTACK8
   \   000019                REQUIRE ??Subroutine13_0
   \   000019                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    526          void uart_send_switch_sate_ack(uint8 cmnd_id,uint8 data_len){
   \                     uart_send_switch_sate_ack:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    527            uint8 Tx_buff[20] = {0};
   \   00000A   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7414         MOV       A,#0x14
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    528            uint8 index =0,no_of_leds=4;
    529            Tx_buff[index++] = 0x28;
   \   000016   85..82       MOV       DPL,?XSP + 0
   \   000019   85..83       MOV       DPH,?XSP + 1
   \   00001C   7428         MOV       A,#0x28
   \   00001E   F0           MOVX      @DPTR,A
    530            Tx_buff[index++] = data_len;
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   EA           MOV       A,R2
   \   000025   F0           MOVX      @DPTR,A
    531            Tx_buff[index++] = cmnd_id;
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E9           MOV       A,R1
   \   00002C   F0           MOVX      @DPTR,A
    532            Tx_buff[index++] = 0x01;
   \   00002D   7403         MOV       A,#0x3
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   7401         MOV       A,#0x1
   \   000034   F0           MOVX      @DPTR,A
    533            Tx_buff[index++] = no_of_leds;
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   7404         MOV       A,#0x4
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   7A05         MOV       R2,#0x5
    534          
    535            for(uint8 i = 0;i<4;i++){
   \   00003F   7B00         MOV       R3,#0x0
    536            Tx_buff[index++] = config_data[i].led;
   \                     ??uart_send_switch_sate_ack_0:
   \   000041   EB           MOV       A,R3
   \   000042   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000045   C0E0         PUSH      A
   \   000047   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00004A   D0E0         POP       A
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   0A           INC       R2
    537            Tx_buff[index++] = config_data[i].valid_state;
   \   00004E   8882         MOV       DPL,R0
   \   000050   8983         MOV       DPH,R1
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   C0E0         PUSH      A
   \   000056   12....       LCALL     ?Subroutine10 & 0xFFFF
    538            }
   \                     ??CrossCallReturnLabel_13:
   \   000059   D0E0         POP       A
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   0A           INC       R2
   \   00005D   0B           INC       R3
   \   00005E   EB           MOV       A,R3
   \   00005F   C3           CLR       C
   \   000060   9404         SUBB      A,#0x4
   \   000062   40DD         JC        ??uart_send_switch_sate_ack_0
    539            Tx_buff[index++] = 0x29;
   \   000064   02....       LJMP      ?Subroutine2 & 0xFFFF
    540            HalUARTWrite(HAL_UART_PORT_0, Tx_buff, index);
    541          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E582         MOV       A,DPL
   \   000008   2A           ADD       A,R2
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3583         ADDC      A,DPH
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EA           MOV       A,R2
   \   000001   FC           MOV       R4,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   E582         MOV       A,DPL
   \   00000A   2C           ADD       A,R4
   \   00000B   F582         MOV       DPL,A
   \   00000D   E4           CLR       A
   \   00000E   3583         ADDC      A,DPH
   \   000010   F583         MOV       DPH,A
   \   000012   22           RET
    542          
    543          /*****************************************************************************
    544           * @fn      uart_send_config_sate_ack
    545           * @brief   Send back State of all config_id to uart
    546           * @return
    547           * @param 
    548           * **************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    549          void uart_send_config_sate_ack(uint8 cmnd_id,uint8 data_len){
   \                     uart_send_config_sate_ack:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    550            uint8 Tx_buff[20] = {0};
   \   00000A   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7414         MOV       A,#0x14
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    551            uint8 index =0,no_of_leds=4;
    552            Tx_buff[index++] = 0x28;
   \   000016   85..82       MOV       DPL,?XSP + 0
   \   000019   85..83       MOV       DPH,?XSP + 1
   \   00001C   7428         MOV       A,#0x28
   \   00001E   F0           MOVX      @DPTR,A
    553            Tx_buff[index++] = data_len;
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   EA           MOV       A,R2
   \   000025   F0           MOVX      @DPTR,A
    554            Tx_buff[index++] = cmnd_id;
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E9           MOV       A,R1
   \   00002C   F0           MOVX      @DPTR,A
    555            Tx_buff[index++] = 0x01;
   \   00002D   7403         MOV       A,#0x3
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   7401         MOV       A,#0x1
   \   000034   F0           MOVX      @DPTR,A
    556            Tx_buff[index++] = no_of_leds;
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   7404         MOV       A,#0x4
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   7A05         MOV       R2,#0x5
    557          
    558            for(uint8 i = 0;i<no_of_leds;i++){
   \   00003F   7B00         MOV       R3,#0x0
    559            Tx_buff[index++] = config_data[i].led;
   \                     ??uart_send_config_sate_ack_0:
   \   000041   EB           MOV       A,R3
   \   000042   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000045   C0E0         PUSH      A
   \   000047   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00004A   D0E0         POP       A
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   0A           INC       R2
    560            Tx_buff[index++] = config_data[i].config_id;
   \   00004E   8882         MOV       DPL,R0
   \   000050   8983         MOV       DPH,R1
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   C0E0         PUSH      A
   \   000057   12....       LCALL     ?Subroutine10 & 0xFFFF
    561            }
   \                     ??CrossCallReturnLabel_14:
   \   00005A   D0E0         POP       A
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   0A           INC       R2
   \   00005E   0B           INC       R3
   \   00005F   EB           MOV       A,R3
   \   000060   C3           CLR       C
   \   000061   9404         SUBB      A,#0x4
   \   000063   40DC         JC        ??uart_send_config_sate_ack_0
    562            Tx_buff[index++] = 0x29;
   \   000065   02....       LJMP      ?Subroutine2 & 0xFFFF
    563          
    564            HalUARTWrite(HAL_UART_PORT_0, Tx_buff, index);
    565          
    566          }
    567          /*****************************************************************************
    568           * @fn        update_config_to_memory
    569           * **************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    570          void update_config_to_memory(void)
   \                     update_config_to_memory:
    571          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    572            write_status = KeusThemeSwitchMiniWriteConfigDataIntoMemory();
   \   000004                ; Setup parameters for call to function KeusThemeSwitchMiniWriteConfigDataIntoMemory
   \   000004   12....       LCALL     `??KeusThemeSwitchMiniWriteConfigDataIntoMemory:`; Banked call to: KeusThemeSwitchMiniWriteConfigDataIntoMemory
   \   000007   E9           MOV       A,R1
   \   000008   90....       MOV       DPTR,#write_status
   \   00000B   02....       LJMP      ?Subroutine0 & 0xFFFF
    573          }
    574          
    575          
    576          //*************************NVIC MEMORY
    577          
    578          /*******************************************************
    579           * @fn          KeusThemeSwitchMiniMemoryInit
    580           * @brief       nvic memory init
    581           * @return
    582           * @param
    583           * *****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    584          bool KeusThemeSwitchMiniMemoryInit(void)
   \                     KeusThemeSwitchMiniMemoryInit:
    585          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    586            //  for (uint8 i = 0; i < CLICK_TYPES; i++)
    587            //  {
    588            //    themeManager.btnThemeMap[i] = 255;
    589            //  }
    590          
    591            uint8 res = osal_nv_item_init(NVIC_MEMORY_POSITION, sizeof(config_data), (void *)config_data);
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   75....       MOV       ?V0,#config_data & 0xff
   \   000008   75....       MOV       ?V1,#(config_data >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   7C0C         MOV       R4,#0xc
   \   000012   7D00         MOV       R5,#0x0
   \   000014   7A10         MOV       R2,#0x10
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001B   7402         MOV       A,#0x2
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000020   E9           MOV       A,R1
   \   000021   F8           MOV       R0,A
    592          
    593            if (res == SUCCESS || res == NV_ITEM_UNINIT)
   \   000022   6005         JZ        ??KeusThemeSwitchMiniMemoryInit_0
   \   000024   7409         MOV       A,#0x9
   \   000026   68           XRL       A,R0
   \   000027   7004         JNZ       ??KeusThemeSwitchMiniMemoryInit_1
    594            {
    595              return true;
   \                     ??KeusThemeSwitchMiniMemoryInit_0:
   \   000029   7901         MOV       R1,#0x1
   \   00002B   8002         SJMP      ??KeusThemeSwitchMiniMemoryInit_2
    596            }
    597            else
    598            {
    599              return false;
   \                     ??KeusThemeSwitchMiniMemoryInit_1:
   \   00002D   7900         MOV       R1,#0x0
    600            }
   \                     ??KeusThemeSwitchMiniMemoryInit_2:
   \   00002F   80..         SJMP      ?Subroutine1
    601          }
    602          /*******************************************************
    603           * @fn      KeusThemeSwitchMiniReadConfigDataIntoMemory
    604           * @brief   NVIC memory read 
    605           * @return
    606           * @param  
    607           * ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    608          bool KeusThemeSwitchMiniReadConfigDataIntoMemory(void)
   \                     KeusThemeSwitchMiniReadConfigDataIntoMemory:
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    610            uint8 res = osal_nv_read(NVIC_MEMORY_POSITION, 0, sizeof(config_data), (void *)config_data);
    611          
    612            if (res == SUCCESS)
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV       ?V0,#config_data & 0xff
   \   000008   75....       MOV       ?V1,#(config_data >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..0C       MOV       ?V0,#0xc
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7A10         MOV       R2,#0x10
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV       A,#0x4
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002B   E9           MOV       A,R1
   \   00002C   7004         JNZ       ??KeusThemeSwitchMiniReadConfigDataIntoMemory_0
    613            {
    614              return true;
   \   00002E   7901         MOV       R1,#0x1
   \   000030   8002         SJMP      ??KeusThemeSwitchMiniReadConfigDataIntoMemory_1
    615            }
    616            else
    617            {
    618              return false;
   \                     ??KeusThemeSwitchMiniReadConfigDataIntoMemory_0:
   \   000032   7900         MOV       R1,#0x0
    619            }
   \                     ??KeusThemeSwitchMiniReadConfigDataIntoMemory_1:
   \   000034                REQUIRE ?Subroutine1
   \   000034                ; // Fall through to label ?Subroutine1
    620          }
    621          
    622          
    623          /********************************************************
    624           * @fn      KeusThemeSwitchMiniWriteConfigDataIntoMemory
    625           * @brief   NVIC Memory write
    626           * @return
    627           * @param
    628           * *****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          bool KeusThemeSwitchMiniWriteConfigDataIntoMemory(void)
   \                     KeusThemeSwitchMiniWriteConfigDataIntoMemory:
    630          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    631            uint8 res = osal_nv_write(NVIC_MEMORY_POSITION, 0, sizeof(config_data), (void *)config_data);
    632          
    633            if (res == SUCCESS)
   \   000005                ; Setup parameters for call to function osal_nv_write
   \   000005   75....       MOV       ?V0,#config_data & 0xff
   \   000008   75....       MOV       ?V1,#(config_data >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..0C       MOV       ?V0,#0xc
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7A10         MOV       R2,#0x10
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000026   7404         MOV       A,#0x4
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002B   E9           MOV       A,R1
   \   00002C   7004         JNZ       ??KeusThemeSwitchMiniWriteConfigDataIntoMemory_0
    634            {
    635              return true;
   \   00002E   7901         MOV       R1,#0x1
   \   000030   8002         SJMP      ??KeusThemeSwitchMiniWriteConfigDataIntoMemory_1
    636            }
    637            else
    638            {
    639              return false;
   \                     ??KeusThemeSwitchMiniWriteConfigDataIntoMemory_0:
   \   000032   7900         MOV       R1,#0x0
    640            }
   \                     ??KeusThemeSwitchMiniWriteConfigDataIntoMemory_1:
   \   000034   80..         SJMP      ?Subroutine1
    641          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for debounceTimer>`:
   \   000000   ....         DW `??leddebounceCbk::?relay`
   \   000002   C800         DW 200
   \   000004   01           DB 1
   \   000005   FF           DB -1
   \   000006   0000         DW 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for intervalTimer>`:
   \   000000   ....         DW `??ledTimerCbk::?relay`
   \   000002   6400         DW 100
   \   000004   01           DB 1
   \   000005   FF           DB -1
   \   000006   0000         DW 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledTimerConfig>`:
   \   000000   ....         DW `??KeusEmbeddedSwitchLedBlinkHandler::?relay`
   \   000002   F401         DW 500
   \   000004   01           DB 1
   \   000005   FF           DB -1
   \   000006   0000         DW 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin1>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin2>`:
   \   000000   00           DB 0
   \   000001   01           DB 1
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin3>`:
   \   000000   00           DB 0
   \   000001   04           DB 4
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin4>`:
   \   000000   00           DB 0
   \   000001   05           DB 5
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin1>`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin2>`:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin3>`:
   \   000000   01           DB 1
   \   000001   04           DB 4
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for buttonPin4>`:
   \   000000   01           DB 1
   \   000001   05           DB 5
   \   000002   00           DB 0
   \   000003   01           DB 1
   \   000004   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEUS INIT">`:
   \   000000   4B455553     DB "KEUS INIT"
   \            20494E49
   \            5400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   KEUS_init_fnc
        0     10   -> HalUARTWrite
        0     10   -> KEUS_loop
        0     10   -> KeusGPIOEdgeConfiguration
        0     10   -> KeusGPIOReadPinValue
        0     10   -> KeusGPIOSetDirection
        0     10   -> KeusGPIOSetPinValue
        0     10   -> KeusThemeSwitchMiniMemoryInit
        0     10   -> KeusThemeSwitchMiniReadConfigDataIntoMemory
        0     10   -> KeusTimerUtilAddTimer
        0     10   -> KeusTimerUtilInit
        0     10   -> KeusTimerUtilStartTimer
        0     10   -> initUart0
        0     10   -> osal_strlen
      0     22   KEUS_loop
        0     12   -> HalUARTPoll
      2      0   KeusEmbeddedSwitchLedBlinkHandler
        2      0   -> KeusGPIOSetPinValue
        2      0   -> KeusGPIOToggledState
      0     22   KeusThemeSwitchMiniMemoryInit
        0     12   -> osal_nv_item_init
      0     24   KeusThemeSwitchMiniReadConfigDataIntoMemory
        0     14   -> osal_nv_read
      0     23   KeusThemeSwitchMiniWriteConfigDataIntoMemory
        0     14   -> osal_nv_write
      1      9   get_config
      1      9   get_state
      4      0   ledTimerCbk
        2      0   -> KeusGPIOReadPinValue
        2      0   -> KeusGPIOSetPinValue
      2      0   leddebounceCbk
      1     29   uart_send_config_sate_ack
        0     29   -> HalUARTWrite
      1     29   uart_send_switch_sate_ack
        0     29   -> HalUARTWrite
      0      9   update_config_struct
        0      9   -> KeusThemeSwitchMiniWriteConfigDataIntoMemory
      2      0   update_config_to_memory
        2      0   -> KeusThemeSwitchMiniWriteConfigDataIntoMemory
      0      9   update_led
        0      9   -> KeusThemeSwitchMiniWriteConfigDataIntoMemory


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "KEUS INIT">
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
       5  ?<Initializer for buttonPin1>
       5  ?<Initializer for buttonPin2>
       5  ?<Initializer for buttonPin3>
       5  ?<Initializer for buttonPin4>
       8  ?<Initializer for debounceTimer>
       8  ?<Initializer for intervalTimer>
       5  ?<Initializer for ledPin1>
       5  ?<Initializer for ledPin2>
       5  ?<Initializer for ledPin3>
       5  ?<Initializer for ledPin4>
       8  ?<Initializer for ledTimerConfig>
       7  ??Subroutine12_0
       5  ??Subroutine13_0
      21  ??Subroutine14_0
       1  ?Subroutine0
       5  ?Subroutine1
      17  ?Subroutine10
      19  ?Subroutine11
      25  ?Subroutine2
      10  ?Subroutine3
       6  ?Subroutine4
       6  ?Subroutine5
       9  ?Subroutine6
       6  ?Subroutine7
       9  ?Subroutine8
       1  ?Subroutine9
       4  APP_EVENT
     287  KEUS_init_fnc
     156  KEUS_loop
      35  KeusEmbeddedSwitchLedBlinkHandler
      49  KeusThemeSwitchMiniMemoryInit
      52  KeusThemeSwitchMiniReadConfigDataIntoMemory
      54  KeusThemeSwitchMiniWriteConfigDataIntoMemory
       1  blink_led
       6  buttonManager
       5  buttonPin1
       5  buttonPin2
       5  buttonPin3
       5  buttonPin4
       1  button_Pressed
       1  button_state
      12  config_data
       1  contineous_on1
       1  count1
       1  debounce
       8  debounceTimer
      65  get_config
      62  get_state
       1  init_status
       8  intervalTimer
       5  ledPin1
       5  ledPin2
       5  ledPin3
       5  ledPin4
     162  ledTimerCbk
       8  ledTimerConfig
      11  leddebounceCbk
       1  read_status
       1  timer1
     104  uart_send_config_sate_ack
     103  uart_send_switch_sate_ack
      64  update_config_struct
      14  update_config_to_memory
     582  update_led
       1  write_status
      90  -- Other

 
 1 947 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
    64 bytes in segment XDATA_I
    64 bytes in segment XDATA_ID
    50 bytes in segment XDATA_ROM_C
    32 bytes in segment XDATA_Z
 
   154 bytes of CODE     memory
    50 bytes of CONST    memory
 1 947 bytes of HUGECODE memory
    96 bytes of XDATA    memory

Errors: none
Warnings: none
