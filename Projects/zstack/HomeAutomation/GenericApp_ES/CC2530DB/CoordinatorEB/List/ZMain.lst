###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               07/Jan/2020  15:07:44
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\ZMain\TI2530DB\ZMain.c
#    Command line       =  
#        -f C:\Users\Monisha\AppData\Local\Temp\EW98F4.tmp
#        (D:\Keus_Docs\zigbee_EStest\Projects\zstack\ZMain\TI2530DB\ZMain.c -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\Source\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\Source\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\CoordinatorEB\List\ZMain.lst
#    Object file        =  
#        D:\Keus_Docs\zigbee_EStest\Projects\zstack\HomeAutomation\GenericApp_ES\CC2530DB\CoordinatorEB\Obj\ZMain.r51
#
###############################################################################

D:\Keus_Docs\zigbee_EStest\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $
      5          
      6          ak
      7          
      8            Description:    Startup and shutdown code for ZStack
      9            Notes:          This version targets the Chipcon CC2530
     10          
     11          
     12            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     13          
     14            IMPORTANT: Your use of this Software is limited to those specific rights
     15            granted under the terms of a software license agreement between the user
     16            who downloaded the software, his/her employer (which must be your employer)
     17            and Texas Instruments Incorporated (the "License").  You may not use this
     18            Software unless you agree to abide by the terms of the License. The License
     19            limits your use, and you acknowledge, that the Software may not be modified,
     20            copied or distributed unless embedded on a Texas Instruments microcontroller
     21            or used solely and exclusively in conjunction with a Texas Instruments radio
     22            frequency transceiver, which is integrated into your product.  Other than for
     23            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     24            works of, modify, distribute, perform, display or sell this Software and/or
     25            its documentation for any purpose.
     26          
     27            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     28            PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     29            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     30            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     31            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     32            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     33            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     34            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     35            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     36            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     37            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     38          
     39            Should you have any questions regarding your right to use this Software,
     40            contact Texas Instruments Incorporated at www.TI.com.
     41          **************************************************************************************************/
     42          
     43          /*********************************************************************
     44           * INCLUDES
     45           */
     46          
     47          
     48          #ifndef NONWK
     49          #include "AF.h"
     50          #endif
     51          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     52          #include "hal_flash.h"
     53          #include "hal_lcd.h"
     54          #include "hal_led.h"
     55          #include "hal_drivers.h"
     56          #include "OnBoard.h"
     57          #include "OSAL.h"
     58          #include "OSAL_Nv.h"
     59          #include "ZComDef.h"
     60          #include "ZMAC.h"
     61          
     62          
     63          extern void KEUS_init_fnc(void);
     64          
     65          /*********************************************************************
     66           * LOCAL FUNCTIONS
     67           */
     68          
     69          static void zmain_ext_addr( void );
     70          #if defined ZCL_KEY_ESTABLISH
     71          static void zmain_cert_init( void );
     72          #endif
     73          static void zmain_dev_info( void );
     74          static void zmain_vdd_check( void );
     75          
     76          #ifdef LCD_SUPPORTED
     77          static void zmain_lcd_init( void );
     78          #endif
     79          
     80          
     81          
     82          
     83          
     84          /*********************************************************************
     85           * @fn      main
     86           * @brief   First function called after startup.
     87           * @return  don't care
     88           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     89          int main( void )
   \                     main:
     90          {
   \   000000                ; Auto size: 17
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?ALLOC_XSTACK8
     91            // Turn off interrupts
     92            osal_int_disable( INTS_ALL );
   \   000005                ; Setup parameters for call to function osal_int_disable
   \   000005   79FF         MOV       R1,#-0x1
   \   000007   12....       LCALL     `??osal_int_disable::?relay`; Banked call to: osal_int_disable
     93          
     94            // Initialization for board related stuff such as LEDs
     95            HAL_BOARD_INIT();
   \   00000A   53BEFB       ANL       0xbe,#0xfb
   \                     ??main_0:
   \   00000D   E59D         MOV       A,0x9d
   \   00000F   A2E6         MOV       C,0xE0 /* A   */.6
   \   000011   50FA         JNC       ??main_0
   \   000013   00           NOP
   \   000014   78F8         MOV       R0,#-0x8
   \   000016   7901         MOV       R1,#0x1
   \                     ??main_1:
   \   000018   00           NOP
   \   000019   E8           MOV       A,R0
   \   00001A   24FF         ADD       A,#-0x1
   \   00001C   18           DEC       R0
   \   00001D   E9           MOV       A,R1
   \   00001E   34FF         ADDC      A,#-0x1
   \   000020   F9           MOV       R1,A
   \   000021   E8           MOV       A,R0
   \   000022   49           ORL       A,R1
   \   000023   70F3         JNZ       ??main_1
   \   000025   75C600       MOV       0xc6,#0x0
   \                     ??main_2:
   \   000028   E59E         MOV       A,0x9e
   \   00002A   70FC         JNZ       ??main_2
   \   00002C   43BE04       ORL       0xbe,#0x4
   \   00002F   906270       MOV       DPTR,#0x6270
   \   000032   7408         MOV       A,#0x8
   \   000034   F0           MOVX      @DPTR,A
   \   000035   C290         CLR       0x90.0
   \   000037   43FE01       ORL       0xfe,#0x1
   \   00003A   C291         CLR       0x90.1
   \   00003C   43FE02       ORL       0xfe,#0x2
   \   00003F   C294         CLR       0x90.4
   \   000041   43FE10       ORL       0xfe,#0x10
   \   000044   C281         CLR       0x80.1
   \   000046   43FD02       ORL       0xfd,#0x2
   \   000049   438F01       ORL       0x8f,#0x1
     96           
     97            // Make sure supply voltage is high enough to run
     98            zmain_vdd_check();
   \   00004C   7E10         MOV       R6,#0x10
   \                     ??main_3:
   \   00004E                ; Setup parameters for call to function HalAdcCheckVdd
   \   00004E   794E         MOV       R1,#0x4e
   \   000050   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000053   E9           MOV       A,R1
   \   000054   60F8         JZ        ??main_3
   \   000056   1E           DEC       R6
   \   000057   EE           MOV       A,R6
   \   000058   70F4         JNZ       ??main_3
     99          
    100            // Initialize board I/O
    101            InitBoard( OB_COLD );
   \   00005A                ; Setup parameters for call to function InitBoard
   \   00005A   7900         MOV       R1,#0x0
   \   00005C   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
    102          
    103            // Initialze HAL drivers
    104            HalDriverInit();
   \   00005F                ; Setup parameters for call to function HalDriverInit
   \   00005F   12....       LCALL     `??HalDriverInit::?relay`; Banked call to: HalDriverInit
    105          
    106            // Initialize NV System
    107            osal_nv_init( NULL );
   \   000062                ; Setup parameters for call to function osal_nv_init
   \   000062   7A00         MOV       R2,#0x0
   \   000064   7B00         MOV       R3,#0x0
   \   000066   12....       LCALL     `??osal_nv_init::?relay`; Banked call to: osal_nv_init
    108          
    109            // Initialize the MAC
    110            ZMacInit();
   \   000069                ; Setup parameters for call to function ZMacInit
   \   000069   12....       LCALL     `??ZMacInit::?relay`; Banked call to: ZMacInit
    111          
    112            // Determine the extended address
    113            zmain_ext_addr();
   \   00006C                ; Setup parameters for call to function zmain_ext_addr
   \   00006C   12....       LCALL     `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
    114          
    115          #if defined ZCL_KEY_ESTABLISH
    116            // Initialize the Certicom certificate information.
    117            zmain_cert_init();
    118          #endif
    119          
    120            // Initialize basic NV items
    121            zgInit();
   \   00006F                ; Setup parameters for call to function zgInit
   \   00006F   12....       LCALL     `??zgInit::?relay`; Banked call to: zgInit
    122          
    123          #ifndef NONWK
    124            // Since the AF isn't a task, call it's initialization routine
    125            afInit();
    126          #endif
    127          
    128            // Initialize the operating system
    129            osal_init_system();
   \   000072                ; Setup parameters for call to function osal_init_system
   \   000072   12....       LCALL     `??osal_init_system::?relay`; Banked call to: osal_init_system
    130          
    131            // Allow interrupts
    132            osal_int_enable( INTS_ALL );
   \   000075                ; Setup parameters for call to function osal_int_enable
   \   000075   79FF         MOV       R1,#-0x1
   \   000077   12....       LCALL     `??osal_int_enable::?relay`; Banked call to: osal_int_enable
    133          
    134            // Final board initialization
    135            InitBoard( OB_READY );
   \   00007A                ; Setup parameters for call to function InitBoard
   \   00007A   7902         MOV       R1,#0x2
   \   00007C   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
    136          
    137            KEUS_init_fnc();
   \   00007F                ; Setup parameters for call to function KEUS_init_fnc
   \   00007F   12....       LCALL     `??KEUS_init_fnc::?relay`; Banked call to: KEUS_init_fnc
    138          
    139            // Display information about this device
    140            zmain_dev_info();
   \   000082   78..         MOV       R0,#(aExtendedAddress + 7) & 0xff
   \   000084   79..         MOV       R1,#((aExtendedAddress + 7) >> 8) & 0xff
   \   000086   7A00         MOV       R2,#0x0
   \                     ??main_4:
   \   000088   8882         MOV       DPL,R0
   \   00008A   8983         MOV       DPH,R1
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   C4           SWAP      A
   \   00008E   540F         ANL       A,#0xf
   \   000090   FC           MOV       R4,A
   \   000091   EA           MOV       A,R2
   \   000092   FE           MOV       R6,A
   \   000093   7401         MOV       A,#0x1
   \   000095   2E           ADD       A,R6
   \   000096   FA           MOV       R2,A
   \   000097   EC           MOV       A,R4
   \   000098   C3           CLR       C
   \   000099   940A         SUBB      A,#0xa
   \   00009B   5004         JNC       ??main_5
   \   00009D   7B30         MOV       R3,#0x30
   \   00009F   8002         SJMP      ??main_6
   \                     ??main_5:
   \   0000A1   7B37         MOV       R3,#0x37
   \                     ??main_6:
   \   0000A3   EC           MOV       A,R4
   \   0000A4   2B           ADD       A,R3
   \   0000A5   C0E0         PUSH      A
   \   0000A7   85..82       MOV       DPL,?XSP + 0
   \   0000AA   85..83       MOV       DPH,?XSP + 1
   \   0000AD   E582         MOV       A,DPL
   \   0000AF   2E           ADD       A,R6
   \   0000B0   F582         MOV       DPL,A
   \   0000B2   E4           CLR       A
   \   0000B3   3583         ADDC      A,DPH
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   D0E0         POP       A
   \   0000B9   F0           MOVX      @DPTR,A
   \   0000BA   8882         MOV       DPL,R0
   \   0000BC   8983         MOV       DPH,R1
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   540F         ANL       A,#0xf
   \   0000C1   FC           MOV       R4,A
   \   0000C2   EA           MOV       A,R2
   \   0000C3   FF           MOV       R7,A
   \   0000C4   7401         MOV       A,#0x1
   \   0000C6   2A           ADD       A,R2
   \   0000C7   FA           MOV       R2,A
   \   0000C8   EC           MOV       A,R4
   \   0000C9   C3           CLR       C
   \   0000CA   940A         SUBB      A,#0xa
   \   0000CC   5004         JNC       ??main_7
   \   0000CE   7B30         MOV       R3,#0x30
   \   0000D0   8002         SJMP      ??main_8
   \                     ??main_7:
   \   0000D2   7B37         MOV       R3,#0x37
   \                     ??main_8:
   \   0000D4   EC           MOV       A,R4
   \   0000D5   2B           ADD       A,R3
   \   0000D6   C0E0         PUSH      A
   \   0000D8   85..82       MOV       DPL,?XSP + 0
   \   0000DB   85..83       MOV       DPH,?XSP + 1
   \   0000DE   E582         MOV       A,DPL
   \   0000E0   2F           ADD       A,R7
   \   0000E1   F582         MOV       DPL,A
   \   0000E3   E4           CLR       A
   \   0000E4   3583         ADDC      A,DPH
   \   0000E6   F583         MOV       DPH,A
   \   0000E8   D0E0         POP       A
   \   0000EA   F0           MOVX      @DPTR,A
   \   0000EB   E8           MOV       A,R0
   \   0000EC   24FF         ADD       A,#-0x1
   \   0000EE   18           DEC       R0
   \   0000EF   E9           MOV       A,R1
   \   0000F0   34FF         ADDC      A,#-0x1
   \   0000F2   F9           MOV       R1,A
   \   0000F3   EA           MOV       A,R2
   \   0000F4   C3           CLR       C
   \   0000F5   9410         SUBB      A,#0x10
   \   0000F7   408F         JC        ??main_4
   \   0000F9   7410         MOV       A,#0x10
   \   0000FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FE   E4           CLR       A
   \   0000FF   F0           MOVX      @DPTR,A
   \   000100                ; Setup parameters for call to function HalLcdWriteString
   \   000100   7901         MOV       R1,#0x1
   \   000102   7A..         MOV       R2,#`?<Constant "IEEE: ">` & 0xff
   \   000104   7B..         MOV       R3,#(`?<Constant "IEEE: ">` >> 8) & 0xff
   \   000106   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000109                ; Setup parameters for call to function HalLcdWriteString
   \   000109   7902         MOV       R1,#0x2
   \   00010B   AA..         MOV       R2,?XSP + 0
   \   00010D   AB..         MOV       R3,?XSP + 1
   \   00010F   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    141          
    142            /* Display the device info on the LCD */
    143          #ifdef LCD_SUPPORTED
    144            zmain_lcd_init();
   \   000112                ; Setup parameters for call to function HalLcdWriteString
   \   000112   7901         MOV       R1,#0x1
   \   000114   7A..         MOV       R2,#`?<Constant "TexasInstruments">` & 0xff
   \   000116   7B..         MOV       R3,#(`?<Constant "TexasInstruments">` >> 8) & 0xff
   \   000118   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    145          #endif
    146          
    147          #ifdef WDT_IN_PM1
    148            /* If WDT is used, this is a good place to enable it. */
    149            WatchDogEnable( WDTIMX );
    150          #endif
    151          
    152            osal_start_system(); // No Return from here
   \   00011B                ; Setup parameters for call to function osal_start_system
   \   00011B   12....       LCALL     `??osal_start_system::?relay`; Banked call to: osal_start_system
    153          
    154            return 0;  // Shouldn't get here.
   \   00011E   7A00         MOV       R2,#0x0
   \   000120   7B00         MOV       R3,#0x0
   \   000122   7411         MOV       A,#0x11
   \   000124   12....       LCALL     ?DEALLOC_XSTACK8
   \   000127   02....       LJMP      ?BRET
   \   00012A                REQUIRE SLEEPCMD
   \   00012A                REQUIRE SLEEPSTA
   \   00012A                REQUIRE CLKCONCMD
   \   00012A                REQUIRE CLKCONSTA
   \   00012A                REQUIRE _A_P1
   \   00012A                REQUIRE P1DIR
   \   00012A                REQUIRE _A_P0
   \   00012A                REQUIRE P0DIR
   \   00012A                REQUIRE P0INP
    155          } // main()
    156          
    157          /*********************************************************************
    158           * @fn      zmain_vdd_check
    159           * @brief   Check if the Vdd is OK to run the processor.
    160           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    161           *********************************************************************/
    162          static void zmain_vdd_check( void )
    163          {
    164            uint8 cnt = 16;
    165            
    166            do {
    167              while (!HalAdcCheckVdd(VDD_MIN_RUN));
    168            } while (--cnt);
    169          }
    170          
    171          /**************************************************************************************************
    172           * @fn          zmain_ext_addr
    173           *
    174           * @brief       Execute a prioritized search for a valid extended address and write the results
    175           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    176           *
    177           * input parameters
    178           *
    179           * None.
    180           *
    181           * output parameters
    182           *
    183           * None.
    184           *
    185           * @return      None.
    186           **************************************************************************************************
    187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    188          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    189          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    190            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7408         MOV       A,#0x8
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    191            uint8 writeNV = TRUE;
    192          
    193            // First check whether a non-erased extended address exists in the OSAL NV.
    194            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    195                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    196                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   000016   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   000019   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   A8..         MOV       R0,?XSP + 0
   \   000020   A9..         MOV       R1,?XSP + 1
   \   000022   88..         MOV       ?V4,R0
   \   000024   89..         MOV       ?V5,R1
   \   000026   F5..         MOV       ?V6,A
   \   000028                ; Setup parameters for call to function osal_nv_item_init
   \   000028   F5..         MOV       ?V8,A
   \   00002A   F5..         MOV       ?V9,A
   \   00002C   78..         MOV       R0,#?V8
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7C08         MOV       R4,#0x8
   \   000033   7D00         MOV       R5,#0x0
   \   000035   7A01         MOV       R2,#0x1
   \   000037   7B00         MOV       R3,#0x0
   \   000039   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   7046         JNZ       ??zmain_ext_addr_0
   \   000044                ; Setup parameters for call to function osal_nv_read
   \   000044   75....       MOV       ?V8,#aExtendedAddress & 0xff
   \   000047   75....       MOV       ?V9,#(aExtendedAddress >> 8) & 0xff
   \   00004A   78..         MOV       R0,#?V8
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   75..08       MOV       ?V8,#0x8
   \   000052   75..00       MOV       ?V9,#0x0
   \   000055   78..         MOV       R0,#?V8
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV       R4,#0x0
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7A01         MOV       R2,#0x1
   \   000060   7B00         MOV       R3,#0x0
   \   000062   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000065   7404         MOV       A,#0x4
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006A   E9           MOV       A,R1
   \   00006B   701D         JNZ       ??zmain_ext_addr_0
   \   00006D                ; Setup parameters for call to function osal_memcmp
   \   00006D   78..         MOV       R0,#?V4
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000072   7C08         MOV       R4,#0x8
   \   000074   7D00         MOV       R5,#0x0
   \   000076   A9..         MOV       R1,?V0
   \   000078   AA..         MOV       R2,?V1
   \   00007A   AB..         MOV       R3,?V2
   \   00007C   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00007F   7403         MOV       A,#0x3
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   E9           MOV       A,R1
   \   000085   7003         JNZ       $+5
   \   000087   02....       LJMP      ??zmain_ext_addr_1 & 0xFFFF
    197            {
    198              // Attempt to read the extended address from the location on the lock bits page
    199              // where the programming tools know to reserve it.
    200              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   00008A                ; Setup parameters for call to function HalFlashRead
   \   00008A   75..08       MOV       ?V8,#0x8
   \   00008D   78..         MOV       R0,#?V8
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   000094   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000096   7AE8         MOV       R2,#-0x18
   \   000098   7B07         MOV       R3,#0x7
   \   00009A   797F         MOV       R1,#0x7f
   \   00009C   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
    201          
    202              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000A4                ; Setup parameters for call to function osal_memcmp
   \   0000A4   78..         MOV       R0,#?V4
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A9   7C08         MOV       R4,#0x8
   \   0000AB   7D00         MOV       R5,#0x0
   \   0000AD   A9..         MOV       R1,?V0
   \   0000AF   AA..         MOV       R2,?V1
   \   0000B1   AB..         MOV       R3,?V2
   \   0000B3   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000B6   7403         MOV       A,#0x3
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV       A,R1
   \   0000BC   6071         JZ        ??zmain_ext_addr_2
    203              {
    204                // Attempt to read the extended address from the designated location in the Info Page.
    205                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000BE                ; Setup parameters for call to function osal_memcmp
   \   0000BE   78..         MOV       R0,#?V4
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C3   7C08         MOV       R4,#0x8
   \   0000C5   7D00         MOV       R5,#0x0
   \   0000C7   790C         MOV       R1,#0xc
   \   0000C9   7A78         MOV       R2,#0x78
   \   0000CB   7B00         MOV       R3,#0x0
   \   0000CD   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D0   7403         MOV       A,#0x3
   \   0000D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D5   E9           MOV       A,R1
   \   0000D6   701D         JNZ       ??zmain_ext_addr_3
    206                {
    207                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000D8                ; Setup parameters for call to function osal_memcpy
   \   0000D8   75..0C       MOV       ?V0,#0xc
   \   0000DB   75..78       MOV       ?V1,#0x78
   \   0000DE   78..         MOV       R0,#?V0
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E3   7C08         MOV       R4,#0x8
   \   0000E5   7D00         MOV       R5,#0x0
   \   0000E7   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   0000E9   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   0000EB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EE   7403         MOV       A,#0x3
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F3   803A         SJMP      ??zmain_ext_addr_2
    208                }
    209                else  // No valid extended address was found.
    210                {
    211                  uint8 idx;
    212                  
    213          #if !defined ( NV_RESTORE )
    214                  writeNV = FALSE;  // Make this a temporary IEEE address
    215          #endif
    216          
    217                  /* Attempt to create a sufficiently random extended address for expediency.
    218                   * Note: this is only valid/legal in a test environment and
    219                   *       must never be used for a commercial product.
    220                   */
    221                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
   \                     ??zmain_ext_addr_3:
   \   0000F5   7E00         MOV       R6,#0x0
    222                  {
    223                    uint16 randy = osal_rand();
   \                     ??zmain_ext_addr_4:
   \   0000F7                ; Setup parameters for call to function osal_rand
   \   0000F7   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000FA   8A..         MOV       ?V0,R2
    224                    aExtendedAddress[idx++] = LO_UINT16(randy);
   \   0000FC   EE           MOV       A,R6
   \   0000FD   FA           MOV       R2,A
   \   0000FE   74..         MOV       A,#aExtendedAddress & 0xff
   \   000100   2A           ADD       A,R2
   \   000101   F582         MOV       DPL,A
   \   000103   E4           CLR       A
   \   000104   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000106   F583         MOV       DPH,A
   \   000108   E5..         MOV       A,?V0
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   0E           INC       R6
    225                    aExtendedAddress[idx++] = HI_UINT16(randy);
   \   00010C   EE           MOV       A,R6
   \   00010D   F8           MOV       R0,A
   \   00010E   12....       LCALL     ?Subroutine0 & 0xFFFF
    226                  }
   \                     ??CrossCallReturnLabel_0:
   \   000111   EB           MOV       A,R3
   \   000112   F0           MOVX      @DPTR,A
   \   000113   0E           INC       R6
   \   000114   EE           MOV       A,R6
   \   000115   C3           CLR       C
   \   000116   9406         SUBB      A,#0x6
   \   000118   40DD         JC        ??zmain_ext_addr_4
    227                  // Next-to-MSB identifies ZigBee devicetype.
    228          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    229                  aExtendedAddress[idx++] = 0x10;
   \   00011A   08           INC       R0
   \   00011B   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00011E   7410         MOV       A,#0x10
   \   000120   F0           MOVX      @DPTR,A
    230          #elif ZG_BUILD_RTRONLY_TYPE
    231                  aExtendedAddress[idx++] = 0x20;
    232          #else
    233                  aExtendedAddress[idx++] = 0x30;
    234          #endif
    235                  // MSB has historical signficance.
    236                  aExtendedAddress[idx] = 0xF8;
   \   000121   08           INC       R0
   \   000122   74..         MOV       A,#aExtendedAddress & 0xff
   \   000124   28           ADD       A,R0
   \   000125   F582         MOV       DPL,A
   \   000127   E4           CLR       A
   \   000128   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   00012A   F583         MOV       DPH,A
   \   00012C   74F8         MOV       A,#-0x8
   \   00012E   F0           MOVX      @DPTR,A
    237                }
    238              }
    239          
    240              if (writeNV)
    241              {
    242                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   00012F                ; Setup parameters for call to function osal_nv_write
   \   00012F   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   000132   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   000135   78..         MOV       R0,#?V0
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013A   75..08       MOV       ?V0,#0x8
   \   00013D   75..00       MOV       ?V1,#0x0
   \   000140   78..         MOV       R0,#?V0
   \   000142   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000145   7C00         MOV       R4,#0x0
   \   000147   7D00         MOV       R5,#0x0
   \   000149   7A01         MOV       R2,#0x1
   \   00014B   7B00         MOV       R3,#0x0
   \   00014D   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000150   7404         MOV       A,#0x4
   \   000152   12....       LCALL     ?DEALLOC_XSTACK8
    243              }
    244            }
    245          
    246            // Set the MAC PIB extended address according to results from above.
    247            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000155                ; Setup parameters for call to function ZMacSetReq
   \   000155   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   000157   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   000159   79E2         MOV       R1,#-0x1e
   \   00015B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    248          }
   \   00015E   7408         MOV       A,#0x8
   \   000160   12....       LCALL     ?DEALLOC_XSTACK8
   \   000163   7F0A         MOV       R7,#0xa
   \   000165   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   74..         MOV       A,#aExtendedAddress & 0xff
   \   000002   2E           ADD       A,R6
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE: ">`:
   \   000000   49454545     DB "IEEE: "
   \            3A2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TexasInstruments">`:
   \   000000   54657861     DB "TexasInstruments"
   \            73496E73
   \            7472756D
   \            656E7473
   \            00      
    249          
    250          #if defined ZCL_KEY_ESTABLISH
    251          /**************************************************************************************************
    252           * @fn          zmain_cert_init
    253           *
    254           * @brief       Initialize the Certicom certificate information.
    255           *
    256           * input parameters
    257           *
    258           * None.
    259           *
    260           * output parameters
    261           *
    262           * None.
    263           *
    264           * @return      None.
    265           **************************************************************************************************
    266           */
    267          static void zmain_cert_init(void)
    268          {
    269            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    270            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    271              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    272              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    273              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    274              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    275              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    276              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    277            };
    278          
    279            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    280            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    281          
    282            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    283            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    284            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    285                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    286                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    287            {
    288              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    289              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    290                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    291              // If the certificate data is not NULL, use it to update the corresponding NV items.
    292              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    293              {
    294                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    295                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    296                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    297                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    298                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    299                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    300                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    301                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    302              }
    303            }
    304          }
    305          #endif
    306          
    307          /**************************************************************************************************
    308           * @fn          zmain_dev_info
    309           *
    310           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    311           *
    312           * input parameters
    313           *
    314           * None.
    315           *
    316           * output parameters
    317           *
    318           * None.
    319           *
    320           * @return      None.
    321           **************************************************************************************************
    322           */
    323          static void zmain_dev_info(void)
    324          {
    325          #if defined ( SERIAL_DEBUG_SUPPORTED ) || (defined ( LEGACY_LCD_DEBUG ) && defined (LCD_SUPPORTED))
    326            uint8 i;
    327            uint8 *xad;
    328            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    329          
    330            // Display the extended address.
    331            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    332          
    333            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    334            {
    335              uint8 ch;
    336              ch = (*xad >> 4) & 0x0F;
    337              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    338              ch = *xad & 0x0F;
    339              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    340            }
    341            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    342            HalLcdWriteString( "IEEE: ", HAL_LCD_DEBUG_LINE_1 );
    343            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_DEBUG_LINE_2 );
    344          #endif
    345          }
    346          
    347          #ifdef LCD_SUPPORTED
    348          /*********************************************************************
    349           * @fn      zmain_lcd_init
    350           * @brief   Initialize LCD at start up.
    351           * @return  none
    352           *********************************************************************/
    353          static void zmain_lcd_init ( void )
    354          {
    355          #ifdef SERIAL_DEBUG_SUPPORTED
    356            {
    357              HalLcdWriteString( "TexasInstruments", HAL_LCD_DEBUG_LINE_1 );
    358          
    359          #if defined( MT_MAC_FUNC )
    360          #if defined( ZDO_COORDINATOR )
    361                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_DEBUG_LINE_2 );
    362          #else
    363                HalLcdWriteString( "MAC-MT Device", HAL_LCD_DEBUG_LINE_2 );
    364          #endif // ZDO
    365          #elif defined( MT_NWK_FUNC )
    366          #if defined( ZDO_COORDINATOR )
    367                HalLcdWriteString( "NWK Coordinator", HAL_LCD_DEBUG_LINE_2 );
    368          #else
    369                HalLcdWriteString( "NWK Device", HAL_LCD_DEBUG_LINE_2 );
    370          #endif // ZDO
    371          #endif // MT_FUNC
    372            }
    373          #endif // SERIAL_DEBUG_SUPPORTED
    374          }
    375          #endif
    376          
    377          /*********************************************************************
    378          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     17   main
        0     17   -> HalAdcCheckVdd
        0     17   -> HalDriverInit
        0     17   -> HalLcdWriteString
        0     17   -> InitBoard
        0     17   -> KEUS_init_fnc
        0     17   -> ZMacInit
        0     17   -> osal_init_system
        0     17   -> osal_int_disable
        0     17   -> osal_int_enable
        0     17   -> osal_nv_init
        0     17   -> osal_start_system
        0     17   -> zgInit
        0     17   -> zmain_ext_addr
      1     47   zmain_ext_addr
        0     28   -> HalFlashRead
        0     26   -> ZMacSetReq
        0     29   -> osal_memcmp
        0     29   -> osal_memcpy
        0     28   -> osal_nv_item_init
        0     30   -> osal_nv_read
        0     30   -> osal_nv_write
        0     26   -> osal_rand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "IEEE: ">
      17  ?<Constant "TexasInstruments">
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      11  ?Subroutine0
       1  CLKCONCMD
       1  CLKCONSTA
       1  P0DIR
       1  P0INP
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_P0
       1  _A_P1
     298  main
     360  zmain_ext_addr
      12  -- Other

 
 669 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
  32 bytes in segment XDATA_ROM_C
 
  12 bytes of CODE     memory
  32 bytes of CONST    memory
   0 bytes of DATA     memory (+ 9 bytes shared)
 669 bytes of HUGECODE memory

Errors: none
Warnings: none
